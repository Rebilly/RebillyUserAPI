{
  "swagger": "2.0",
  "info": {
    "version": "2.1",
    "title": "Rebilly User API",
    "contact": {
      "name": "Rebilly API Support",
      "url": "https://www.rebilly.com/contact/",
      "email": "integrations@rebilly.com"
    },
    "license": {
      "name": "Rebilly",
      "url": "https://www.rebilly.com/api-license/"
    },
    "termsOfService": "https://www.rebilly.com/terms/",
    "x-logo": {
      "url": "https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg",
      "backgroundColor": "#0033A0"
    },
    "description": "# Introduction\nThis document covers APIs mostly intended for consumption by Rebilly's\nFrontend GUI [app](https://app.rebilly.com).  However, any client is welcome\nto use these APIs.  Our main API docs can be [found here](https://rebilly.github.io/RebillyAPI/).\n\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nor [Javascript](https://github.com/Rebilly/rebilly-js-sdk).\n\n# Authentication\nWhen you sign up for an account, you are given your first API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  private key, JSON Web Tokens, and\npublic key.\n- private key: authenticates each request by searching for the presence\nof an HTTP header: REB-APIKEY.\n- JWT: authenticates each request by the HTTP header: Authorization.\n- public key: authenticates by the HTTP header: REB-AUTH (read more on this below).\n\nRebilly also offers JSON Web Tokens (JWT) authentication, where you can control\nthe specific granular permissions and expiration for that JWT.  We call our resource\nfor generating JWT [Sessions](#tag/Sessions).\n\nRebilly also has a client-side authentication scheme that uses an\napiUser and HMAC-SHA1 signature (only for the Tokens resource), so\nthat you may safely create tokens from the client-side without compromising\nyour secret keys.\n\nNever share your secret keys. Keep them guarded and secure.\nThe client-side authentication scheme uses one HTTP header named REB-AUTH.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# PHP SDK\nFor all PHP SDK examples provided in this spec you will need to configure `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n"
  },
  "host": "api.rebilly.com",
  "basePath": "/v2.1",
  "schemes": [
    "https"
  ],
  "x-servers": [
    {
      "url": "//api.rebilly.com/v2.1",
      "description": "Live Server"
    },
    {
      "url": "//api-sandbox.rebilly.com/v2.1",
      "description": "Sandbox Server"
    }
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "API Keys",
      "description": "Always keep your API Keys private.  In addition to your API Keys, you may use\nJSON Web Tokens (JWT) to authenticate to the API.  See\nour [Sessions](#tag/Sessions) resource for more information.\n"
    },
    {
      "name": "Checkout Pages",
      "description": "Hosted checkout pages.\n"
    },
    {
      "name": "Custom Rules",
      "description": "If system events can't solve your problems, you are able to create a custom event\nthat can fit your requirements, and use it to solve your own business logic.\n\n\"Don't conform to the rules. Create the rules.\"\nRather than adapt your workflow and business, Rebilly can align with your business\nobjectives by giving you the power to automate certain behaviors when key events happen.\nYou can use this to your advantage to mitigate risk, maximize conversions and minimize costs.\nYou have the controls at your fingertips here. If you need more control,\nor help dialing in on a strategy, feel free to contact us.\n\nWhen an event happens, it triggers the evaluation of conditions (that you set up),\nin order from top to bottom. If the condition is met, the corresponding actions are executed.\nThe conditions continue to be checked until either all of the conditions have been executed,\nor a special \"stop\" action is executed.\n"
    },
    {
      "name": "Credential Hashes",
      "description": "Get and create SMTP and Webhook credential hashes.\n"
    },
    {
      "name": "Email Credentials",
      "description": "Send automated emails through our system by connecting to your third party\nSMTP server (or your third party email service provider's SMTP server).\n"
    },
    {
      "name": "Gateway Accounts",
      "description": "Gateway accounts connect payment request to third party networks and platforms.\n"
    },
    {
      "name": "Layouts",
      "description": "Layouts are used to hold collections of plans. A layout can be used to\npower a pricing page. You can make multiple layouts, and use rules to\ntarget them to different audiences.\n"
    },
    {
      "name": "Lists",
      "description": "Lists contain sets of values and may be referenced within Rules criteria.\n\nYou may grant permissions to edit Lists to different people than those who can edit Rules.\nIt may be useful if your workflow involves frequent updates to value sets used in criteria.\n"
    },
    {
      "name": "Migrate payment cards",
      "description": "Migrate payment cards from one gateway to another.\n"
    },
    {
      "name": "Notes",
      "description": "Leave notes on a customer record to have a handy location to share with\nothers who may interface with the customer.  It's great for customer service.\n"
    },
    {
      "name": "Organizations",
      "description": "Organizations include the name and address of the entities related to your\naccount. An account may be multi-national, and support multiple\norganizations. Note: Organizations are share between \"Live\" and \"Sandbox\"\n"
    },
    {
      "name": "Reports",
      "description": "The Rebilly Reporting API is currently experimental.  You may see\nthe [Reports API Documentation here](https://rebilly.github.io/RebillyReportsAPI/).\n"
    },
    {
      "name": "Rules",
      "description": "\"Don't conform to the rules. Create the rules.\"\nRather than adapt your workflow and business, Rebilly can align with your business\nobjectives by giving you the power to automate certain behaviors when key events happen.\nYou can use this to your advantage to mitigate risk, maximize conversions and minimize costs.\nYou have the controls at your fingertips here. If you need more control,\nor help dialing in on a strategy, feel free to contact us.\n\nWhen an event happens, it triggers the evaluation of conditions (that you set up),\nin order from top to bottom. If the condition is met, the corresponding actions are executed.\nThe conditions continue to be checked until either all of the conditions have been executed,\nor a special \"stop\" action is executed.\n"
    },
    {
      "name": "Sessions",
      "description": "A session contains a token, which is a JSON Web Token.  The token is created\nwith a user's signin credentials.\n\nThis token can be used to authenticate to the API.  In addition, the session can be set to\nexpire at a particular time, and has very granular control over permissions.\nUse the token to then authenticate for further requests to the Rebilly API.\n\nThe token should be kept private, but could be stored on the user's browser\nclient to simulate a \"session.\"\n"
    },
    {
      "name": "Status",
      "description": "Check the status of the Rebilly API (no authentication required).\n"
    },
    {
      "name": "Taxes",
      "description": "Proposed: You can map a product to a tax category.  The tax category is used by\ntax providers to calculate taxes for invoices.\n"
    },
    {
      "name": "Tracking",
      "description": "Tracking is a layer for accessing all the activity (API requests,\nsubscriptions, webhooks, events, etc.), thus providing easier\ndebugging and issues auditing.\n"
    },
    {
      "name": "Users",
      "description": "A User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.\n"
    },
    {
      "name": "Websites",
      "description": "A Website represents the website/brand that customers interact with... You\ncould think of it like a brand.  For example, Nestle owns Perrier and Purina\nand PowerBar.\n\nWe recognize that some enterprises have more than one website (or brand).  The\nwebsite is related to each invoice and each payment gateway account.  This feature\nwould allow you to have gateway accounts that are related to multiple websites, or\nexclusive to particular websites.  And gives you more control over your business.\n"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks are designed to notify your systems when certain/all registered events happen in near real-time.\nThey allow you to collect information about those events. Rebilly can send these information via\nPOST to an URL of your choice.\n"
    }
  ],
  "securityDefinitions": {
    "ApiKey": {
      "description": "When you sign up for an account, you are given your first API key.\nTo do so please follow this link: https://www.rebilly.com/site/signup/\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future).\n",
      "name": "REB-APIKEY",
      "type": "apiKey",
      "in": "header"
    },
    "JWT": {
      "description": "You can create a JSON Web Token (JWT) via our Sessions resource.\n",
      "type": "basic"
    },
    "RebAuth": {
      "description": "Only for the Tokens resource.\nThe REB-AUTH value is created in this way\nGenerate a Nonce (random string), and a Timestamp (unix timestamp)\nConcatenate the values of ApiUser, Nonce, and Timestamp (in that order).\nUse that value as the input data when you calculate the <a href=\"http://tools.ietf.org/html/rfc2104\">HMAC-SHA1</a> with your secret key, called the signature.\nForming the four data points into a JSON object.\n\n```json\n{\n  \"REB-APIUSER\": \"abcdefg\",\n  \"REB-NONCE\": \"adfsjtreitou345fgkdafgj\",\n  \"REB-TIMESTAMP\": \"1382591345\",\n  \"REB-SIGNATURE\": \"a234fc95460401cfg09c9d09\"\n}\n```\n\nThen base64 encode that JSON object. This is the final value of the REB-AUTH HTTP header\n",
      "name": "REB-AUTH",
      "type": "apiKey",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "responses": {
    "AccessForbidden": {
      "description": "Access forbidden, invalid API-KEY was used",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "Resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Found": {
      "description": "Resource was moved",
      "headers": {
        "Location": {
          "type": "string"
        }
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidDataError": {
      "description": "Invalid data was sent",
      "schema": {
        "$ref": "#/definitions/InvalidError"
      }
    }
  },
  "parameters": {
    "resourceId": {
      "name": "id",
      "in": "path",
      "description": "The resource identifier string",
      "type": "string",
      "required": true
    },
    "collectionLimit": {
      "name": "limit",
      "in": "query",
      "description": "The collection items limit",
      "type": "integer",
      "minimum": 0,
      "maximum": 1000
    },
    "collectionOffset": {
      "name": "offset",
      "in": "query",
      "description": "The collection items offset",
      "type": "integer",
      "minimum": 0
    },
    "collectionFilter": {
      "name": "filter",
      "in": "query",
      "type": "string",
      "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
    },
    "collectionQuery": {
      "name": "q",
      "in": "query",
      "type": "string",
      "description": "The partial search of the text fields."
    },
    "collectionCriteria": {
      "name": "criteria",
      "in": "query",
      "type": "string",
      "description": "The json criteria for collection"
    },
    "collectionSort": {
      "name": "sort",
      "in": "query",
      "type": "array",
      "collectionFormat": "csv",
      "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
      "items": {
        "type": "string"
      }
    },
    "collectionFields": {
      "name": "fields",
      "in": "query",
      "type": "string",
      "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
    },
    "collectionExpand": {
      "name": "expand",
      "in": "query",
      "type": "string",
      "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
    },
    "systemEventType": {
      "name": "eventType",
      "in": "path",
      "description": "The event type",
      "type": "string",
      "required": true
    },
    "rulesVersion": {
      "name": "version",
      "in": "path",
      "type": "integer",
      "required": true,
      "minimum": 1,
      "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info."
    },
    "hash": {
      "name": "hash",
      "in": "path",
      "description": "The token identifier string",
      "type": "string",
      "required": true
    },
    "mediaType": {
      "name": "Accept",
      "in": "header",
      "type": "string",
      "enum": [
        "application/json"
      ],
      "default": "application/json",
      "description": "The response media type"
    }
  },
  "paths": {
    "/activation/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token string",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sends a token to activate user account",
        "description": "Sends a token to activate user account\n",
        "security": [
          {
            "RebAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User account was activated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Invalid token was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->users()->activate('token');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/api-keys": {
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Retrieve a list of api keys",
        "description": "Retrieve a list of api keys\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api keys was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiKey"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeys = $client->apiKeys()->search([\n    'filter' => 'description:Test',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "API Keys"
        ],
        "summary": "Create an api key",
        "description": "Create an api key\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ApiKey resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Api Key was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeyForm = new Rebilly\\Entities\\ApiKey();\n$apiKeyForm->setDescription('Test');\n$apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);\n\ntry {\n    $apiKey = $client->apiKeys()->create($apiKeyForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/api-keys/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Retrieve api key",
        "description": "Retrieve api key with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Api key was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeys = $client->apiKeys()->load('apiKeyID');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "API Keys"
        ],
        "summary": "Create or update api key with predefined ID",
        "description": "Create or update api key with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ApiKey resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKey was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "201": {
            "description": "ApiKey was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeyForm = new Rebilly\\Entities\\ApiKey();\n$apiKeyForm->setDescription('TestPut');\n$apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);\n\ntry {\n    $apiKey = $client->apiKeys()->update('apiKeyID', $apiKeyForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "API Keys"
        ],
        "summary": "Delete api key",
        "description": "Delete api key with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ApiKey was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "ApiKey has related resources and cannot be deleted",
            "$ref": "#/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->apiKeys()->delete('apiKeyID');\n"
          }
        ]
      }
    },
    "/checkout-pages": {
      "get": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Retrieve a list of checkout pages",
        "description": "Retrieve a list of checkout pages\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of checkout pages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckoutPage"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPages = $client->checkoutPages()->search([\n    'filter' => 'name:testCheckoutPage',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Create a Checkout Page",
        "description": "Create a Checkout Page\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Checkout Page resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPageForm = new Rebilly\\Entities\\CheckoutPage();\n$checkoutPageForm->setPlanId('planId');\n$checkoutPageForm->setWebsiteId('websiteId');\n$checkoutPageForm->setName('TestCheckoutPage');\n$checkoutPageForm->setUriPath('test-checkout-page');\n\ntry {\n    $checkoutPage = $client->checkoutPages()->create($checkoutPageForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/checkout-pages/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Retrieve a Checkout Page",
        "description": "Retrieve a Checkout Page with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Checkout Page was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPage = $client->checkoutPages()->load('checkoutPageId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Create or update a Checkout Page with predefined ID",
        "description": "Create or update a Checkout Page with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Checkout Page resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout Page was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPageForm = new Rebilly\\Entities\\CheckoutPage();\n$checkoutPageForm->setPlanId('planId');\n$checkoutPageForm->setWebsiteId('websiteId');\n$checkoutPageForm->setName('TestCheckoutPage');\n$checkoutPageForm->setUriPath('test-checkout-page');\n\ntry {\n    $checkoutPage = $client->checkoutPages()->update('checkoutPageId', $checkoutPageForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Delete a Checkout Page",
        "description": "Delete a Checkout Page with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Checkout Page was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Checkout page cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->checkoutPages()->delete('checkoutPageId');\n"
          }
        ]
      }
    },
    "/credential-hashes/emails": {
      "post": {
        "tags": [
          "Credential Hashes"
        ],
        "summary": "Create an email credential",
        "description": "Create an email credential\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Email credential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmtpCredential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Email credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SmtpCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/credential-hashes/emails/{hash}": {
      "parameters": [
        {
          "$ref": "#/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Credential Hashes"
        ],
        "summary": "Retrieve an email credential",
        "description": "Retrieve an email credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Email credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SmtpCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/credential-hashes/webhooks": {
      "post": {
        "tags": [
          "Credential Hashes"
        ],
        "summary": "Create a webhook credential",
        "description": "Create a webhook credential\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Credential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookCredential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Webhook credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/WebhookCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/credential-hashes/webhooks/{hash}": {
      "parameters": [
        {
          "$ref": "#/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Credential Hashes"
        ],
        "summary": "Retrieve a webhook credential",
        "description": "Retrieve a webhook credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/WebhookCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/custom-events": {
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve a list of custom events",
        "description": "Retrieve a list of custom events\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "items": {
              "type": "string",
              "enum": [
                "createdTime",
                "-createdTime",
                "handledTime",
                "-handledTime",
                "scheduledTime",
                "-scheduledTime"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of custom events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomEvent"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Create a custom event",
        "description": "Create a custom event\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Custom event resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/custom-events/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve a custom event",
        "description": "Retrieve a custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Create a custom event with predefined ID",
        "description": "Create a custom event with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Custom event resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Custom event can't be modified",
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Delete a custom event",
        "description": "Delete a custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Custom event was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Custom event has related rules and cannot be deleted",
            "$ref": "#/responses/Conflict"
          }
        }
      }
    },
    "/custom-events/{id}/rules": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve a list of rules for custom event",
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Custom Rules",
          "Rules"
        ],
        "summary": "Update the rules for custom event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Set of rules resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rules were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/custom-events/{id}/rules/history": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve the change history of the set of rules for a custom event",
        "description": "Retrieve the change history of the set of rules for the selected custom event.\nThe history is updated each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSetHistoryItem"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/custom-events/{id}/rules/history/{version}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve the record from the change history of the set of rules for a custom event",
        "description": "Retrieve the record from the change history of the set of rules for the selected custom event.\nA history record is created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetHistoryItem"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/custom-events/{id}/rules/versions/{version}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve the version of the set of rules for a custom event",
        "description": "Retrieve the version of the selected set of rules for the selected custom event.\nThe versions are created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve a list of existing events",
        "responses": {
          "200": {
            "description": "A list of System Events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SystemEvent"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/events/{eventType}": {
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the event information",
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SystemEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/events/{eventType}/rules": {
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve a list of rules for event",
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Rules"
        ],
        "summary": "Update the rules for event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Set of rules resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rules were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/events/{eventType}/rules/history": {
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the change history of the set of rules",
        "description": "Retrieve the change history of the selected set of rules.\nThe history is updated each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSetHistoryItem"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/events/{eventType}/rules/history/{version}": {
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the record from the change history of the set of rules",
        "description": "Retrieve the record from the change history of the selected set of rules.\nA history record is created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History record was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetHistoryItem"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/events/{eventType}/rules/versions/{version}": {
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the version of the set of rules",
        "description": "Retrieve the version of the selected set of rules.\nThe versions are created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sends an email with a link containing a token to reset user password",
        "description": "Sends an email with a link containing a token to reset user password\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Forgot password resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Email sent successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$forgotPasswordForm = new Rebilly\\Entities\\ForgotPassword();\n$forgotPasswordForm->setEmail('johndoe@test.com');\n\ntry {\n    $client->users()->forgotPassword($forgotPasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts": {
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a list of gateway accounts",
        "description": "Retrieve a list of gateway accounts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Gateway Accounts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GatewayAccount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccounts = $client->$gatewayAccounts()->search([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create a Gateway Account",
        "description": "Create a Gateway Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gateway Account resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccountForm = new Rebilly\\Entities\\GatewayAccount();\n\n$gatewayAccountForm->setGatewayName('A1Gateway');\n$gatewayAccountForm->setAcquirerName('Bank of Rebilly');\n$gatewayAccountForm->setOrganizationId('organizationId');\n$gatewayAccountForm->setMerchantCategoryCode(5734);\n$gatewayAccountForm->setWebsites([\n    'websiteId1',\n    'websiteId2',\n]);\n$gatewayAccountForm->setPaymentCardSchemes([\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_VISA,\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_MASTERCARD,\n]);\n$gatewayAccountForm->setMethod(Rebilly\\Entities\\PaymentMethod::METHOD_CASH);\n\n$gatewayConfig = [\n    'accountId' => 'test',\n    'password' => '123',\n];\n\n$gatewayAccountForm->setGatewayConfig($gatewayConfig);\n\ntry {\n    $gatewayAccount = $client->gatewayAccounts()->create($gatewayAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a Gateway Account",
        "description": "Retrieve a Gateway Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Gateway Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccount = $client->gatewayAccounts()->load('gatewayAccountId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create or update a Gateway Account with predefined ID",
        "description": "Create or update a GatewayAccount with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gateway Account resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccountForm = new Rebilly\\Entities\\GatewayAccount();\n\n$gatewayAccountForm->setGatewayName('A1Gateway');\n$gatewayAccountForm->setAcquirerName('Bank of Rebilly');\n$gatewayAccountForm->setOrganizationId('organizationId');\n$gatewayAccountForm->setMerchantCategoryCode(5734);\n$gatewayAccountForm->setWebsites([\n    'websiteId1',\n    'websiteId2',\n]);\n$gatewayAccountForm->setPaymentCardSchemes([\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_VISA,\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_MASTERCARD,\n]);\n$gatewayAccountForm->setMethod(Rebilly\\Entities\\PaymentMethod::METHOD_CASH);\n\n$gatewayConfig = [\n    'accountId' => 'test',\n    'password' => '123',\n];\n\n$gatewayAccountForm->setGatewayConfig($gatewayConfig);\n\ntry {\n    $gatewayAccount = $client->gatewayAccounts()->update('gatewayAccountId', $gatewayAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Update a Gateway Account with predefined ID",
        "description": "Update a GatewayAccount with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gateway Account resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Delete a Gateway Account",
        "description": "Delete a Gateway Account with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Gateway Account was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->gatewayAccounts()->delete('gatewayAccountId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts/{id}/disable": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Disable a Gateway Account",
        "description": "Disable a gateway account with specified identifier string.\nDisabled gateway accounts have their \"status\" attribute set to \"inactive\" and cannot process transactions.\n",
        "responses": {
          "201": {
            "description": "Disabled successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Gateway account is pending activation and cannot be disabled."
          }
        }
      }
    },
    "/gateway-accounts/{id}/enable": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Enable a Gateway Account",
        "description": "Enable a gateway account with specified identifier string.\nEnabled gateway accounts have their \"status\" attribute set to \"active\" and can process transactions.\n",
        "responses": {
          "201": {
            "description": "Enabled successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Gateway account is pending activation and cannot be enabled."
          }
        }
      }
    },
    "/layouts": {
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "Retrieve a layout list",
        "description": "Retrieve a layout list\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Layout list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Layout"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layouts = $client->layouts()->search([\n    'filter' => 'name:TestLayout',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Layouts"
        ],
        "summary": "Create a layout",
        "description": "Create a layout\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Layout resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layoutForm = new Rebilly\\Entities\\Layout();\n$layoutItemForm = new Rebilly\\Entities\\LayoutItem();\n\n$layoutItemForm->setPlanId('planId');\n$layoutItemForm->setStarred(false);\n\n$layoutForm->setName('TestLayout');\n$layoutForm->setLayoutItems([\n    $layoutItemForm,\n]);\n\ntry {\n    $layout = $client->layouts()->create($layoutForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/layouts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "Retrieve a layout",
        "description": "Retrieve a layout with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Layout was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layout = $client->layouts()->load('layoutId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Layouts"
        ],
        "summary": "Create or update a layout with predefined ID",
        "description": "Create or update a layout with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Layout resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Layout was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layoutForm = new Rebilly\\Entities\\Layout();\n$layoutItemForm = new Rebilly\\Entities\\LayoutItem();\n\n$layoutItemForm->setPlanId('planId');\n$layoutItemForm->setStarred(false);\n\n$layoutForm->setName('TestLayout');\n$layoutForm->setLayoutItems([\n    $layoutItemForm,\n]);\n\ntry {\n    $layout = $client->layouts()->update('layoutId', $layoutForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Layouts"
        ],
        "summary": "Delete a layout",
        "description": "Delete a layout with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Layout was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->layouts()->delete('layoutId');\n"
          }
        ]
      }
    },
    "/lists": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Retrieve a collection of Lists (latest version of each List)",
        "description": "Retrieve a collection of Lists\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionCriteria"
          },
          {
            "$ref": "#/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Lists was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/List"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Lists"
        ],
        "summary": "Create a List",
        "description": "Create a List\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "List resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "List was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/lists/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Retrieve list's latest version",
        "description": "Retrieve latest version of List with specified identifier string\n",
        "responses": {
          "200": {
            "description": "List was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Lists"
        ],
        "summary": "Create or update a list with predefined ID",
        "description": "Create or update a list with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "List resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "201": {
            "description": "List was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Lists"
        ],
        "summary": "Delete a list",
        "description": "Delete a list with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "List was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "List is used in Rules and cannot be deleted"
          }
        }
      }
    },
    "/lists/{id}/{version}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "name": "version",
          "in": "path",
          "type": "integer",
          "required": true,
          "minimum": 1,
          "description": "List version"
        }
      ],
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Retrieve List's exact version",
        "responses": {
          "200": {
            "description": "List's exact version was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Users",
          "Sessions"
        ],
        "summary": "Destroys the user's current session",
        "description": "Destroys the user's current session. Endpoint must be accessed with valid JWT Authorization header.\n",
        "responses": {
          "204": {
            "description": "Session was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieve a list of notes",
        "description": "Retrieve a list of notes\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Notes was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Note"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$notes = $client->notes()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Create a note",
        "description": "Create a note\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Note resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$noteForm = new Rebilly\\Entities\\Note();\n$noteForm->setRelatedId('customerId');\n$noteForm->setRelatedType(Rebilly\\Entities\\ResourceType::TYPE_CUSTOMER);\n$noteForm->setContent('Test Note');\n\ntry {\n    $note = $client->notes()->create($noteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/notes/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieve a note with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Note was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$note = $client->notes()->load('noteId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Notes"
        ],
        "summary": "Create or update a note with predefined ID",
        "description": "Create or update a note with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Note resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$noteForm = new Rebilly\\Entities\\Note();\n$noteForm->setRelatedId('customerId');\n$noteForm->setRelatedType(Rebilly\\Entities\\ResourceType::TYPE_CUSTOMER);\n$noteForm->setContent('Test Note');\n\ntry {\n    $note = $client->notes()->update('noteId', $noteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Retrieve a list of organizations",
        "description": "Retrieve a list of organizations\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of organizations was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizations = $client->organizations()->search([\n    'filter' => 'city:Test',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create a organization",
        "description": "Create a organization\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Organization resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizationForm = new Rebilly\\Entities\\Organization();\n$organizationForm->setName('Test Organization');\n$organizationForm->setCountry('US');\n\ntry {\n    $organization = $client->organizations()->create($organizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/organizations/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Retrieve a organization",
        "description": "Retrieve a organization with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Organization was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organization = $client->organizations()->load('organizationId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create or update a organization with predefined ID",
        "description": "Create or update a organization with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Organization resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizationForm = new Rebilly\\Entities\\Organization();\n$organizationForm->setName('Test Organization');\n$organizationForm->setCountry('US');\n\ntry {\n    $organization = $client->organizations()->update('organizationId', $organizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete a organization",
        "description": "Delete a organization with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Organization was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Organization has related resources and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-cards-migrations": {
      "get": {
        "tags": [
          "Migrate payment cards"
        ],
        "summary": "Retrieve a list of payment cards ready for migration",
        "description": "Retrieve a list of payment cards ready for migration\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of payment cards was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentCard"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardMigrations = $client->paymentCardMigrations()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      }
    },
    "/payment-cards-migrations/migrate": {
      "post": {
        "tags": [
          "Migrate payment cards"
        ],
        "summary": "Migrate payment cards to another gateway account",
        "description": "Migrate payment cards to another gateway account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment card migration attributes",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCardMigrationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Migration command was accepted",
            "schema": {
              "$ref": "#/definitions/PaymentCardMigrationResponse"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/previews/rule-actions/send-email": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Send a test email",
        "description": "Send a test email\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Test email resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendTestEmail"
            }
          }
        ],
        "security": [
          {
            "RebAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Test email was sent",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SendTestEmail"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/previews/rule-actions/trigger-webhook": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Trigger a test webhook",
        "description": "Trigger a test webhook\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Test webhook resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendPreviewWebhook"
            }
          }
        ],
        "security": [
          {
            "RebAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Test webhook was triggered",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SendPreviewWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/previews/webhooks": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Trigger a test webhook",
        "description": "Trigger a test webhook\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Webhook resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Test webhook was triggered",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve user's profile",
        "description": "Retrieve user's profile\n",
        "responses": {
          "200": {
            "description": "Profile was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's profile",
        "description": "Update user's profile\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Profile resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/profile/password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user's password with the specified newPassword",
        "description": "Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "currentPassword and newPassword",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/profile/totp-reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset (renew) totpSecret",
        "description": "Reset (renew) totpSecret\n",
        "responses": {
          "201": {
            "description": "totpSecret reset (renewed) successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/queue/custom-events": {
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve a list of scheduled custom events",
        "description": "Retrieve a list of scheduled custom events\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scheduled custom events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomEvent"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/queue/custom-events/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Retrieve a scheduled custom event",
        "description": "Retrieve a scheduled custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Scheduled custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "303": {
            "description": "Custom event was successfully processed and moved out from queue",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Rules"
        ],
        "summary": "Delete a scheduled custom event",
        "description": "Delete a scheduled custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Scheduled custom event was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create a session",
        "description": "Create a session\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Sessions resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$sessionForm = new Rebilly\\Entities\\Session();\n\n$permissions = [\n    // Example permission to use GET and POST methods only for certain Customers\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_CUSTOMERS,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n        ],\n        'resourceIds' => [\n            'testCustomerId',\n            'testCustomerId2',\n        ],\n    ],\n    // Example permission to use all methods for Websites resource\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_WEBSITES,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n            $sessionForm::METHOD_PUT,\n            $sessionForm::METHOD_HEAD,\n            $sessionForm::METHOD_DELETE,\n        ],\n    ],\n    // Example permission to use all methods for all resources\n    [],\n];\n\n$sessionForm->setPermissions($permissions);\n\ntry {\n    $session = $client->sessions()->create($sessionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/sessions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Retrieve a Session",
        "description": "Retrieve a Session with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Session was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$session = $client->sessions()->load('sessionId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create or update a Session with predefined ID",
        "description": "Create or update a Session with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Session resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$sessionForm = new Rebilly\\Entities\\Session();\n\n$permissions = [\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_CUSTOMERS,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n        ],\n        'resourceIds' => [\n            'testCustomerId',\n            'testCustomerId2',\n        ],\n    ],\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_WEBSITES,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n        ],\n        'resourceIds' => [\n            'testWebsiteId',\n            'testWebsiteId2',\n        ],\n    ],\n];\n\n$sessionForm->setPermissions($permissions);\n\ntry {\n    $session = $client->sessions()->update('sessionId', $sessionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete a Session",
        "description": "Delete a Session with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Session was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Session has related resources and cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->sessions()->delete('sessionId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/signin": {
      "post": {
        "tags": [
          "Users",
          "Sessions"
        ],
        "summary": "Create a session with email and password",
        "description": "Create a session with email and password\n",
        "security": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Signin resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$loginForm = new Rebilly\\Entities\\Login();\n$loginForm->setEmail('test@test.com');\n$loginForm->setPassword('1234');\n\ntry {\n    $user = $client->users()->signin($loginForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new user and sends an email confirmation",
        "description": "Creates a new user and sends an email confirmation\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Signup resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$signupForm = new Rebilly\\Entities\\Signup();\n$signupForm->setFirstName('John');\n$signupForm->setLastName('Doe');\n$signupForm->setEmail('johndoe@test.com');\n$signupForm->setBusinessPhone('+123456789');\n$signupForm->setPassword('1234');\n\ntry {\n    $client->users()->signup($signupForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Retrieve API current status",
        "description": "Retrieve API current status\n",
        "security": [],
        "responses": {
          "200": {
            "description": "Status was received",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/tax-categories": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Retrieve a list of tax categories",
        "description": "Retrieve a list of tax categories\n",
        "responses": {
          "200": {
            "description": "A list of tax categories was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCategory"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/api": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking API logs",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking API logs was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiTracking"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiTrackingLog = $client->apiTracking()->search([\n    'filter' => 'status:200',\n]);\n"
          }
        ]
      }
    },
    "/tracking/api/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking API log with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking API log was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiTrackingLog = $client->apiTracking()->load('apiLogId');\n"
          }
        ]
      }
    },
    "/tracking/lists": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve Lists changes history",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists changes history was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/List"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/subscriptions": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking subscription logs",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking subscription logs was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionTracking"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/subscriptions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking subscription log with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking subscription log was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/tracking/webhooks": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking webhook notifications",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionCriteria"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking webhook notifications was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookTracking"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/webhooks/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking webhook notification with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking webhook notification was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/WebhookTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/tracking/webhooks/{id}/history": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve related webhook attempts for specified webhook tracking.",
        "responses": {
          "200": {
            "description": "Webhook tracking related attempts were retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookTracking"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a list of users",
        "description": "Retrieve a list of users\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$users = $client->users()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create an user",
        "description": "Create an user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$userForm = new Rebilly\\Entities\\User();\n$userForm->setFirstName('John');\n$userForm->setLastName('Doe');\n$userForm->setEmail('johndoe@test.com');\n\ntry {\n    $user = $client->users()->create($userForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve user",
        "description": "Retrieve user with specified identifier string\n",
        "responses": {
          "200": {
            "description": "User was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$user = $client->users()->load('userId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Create or update user with predefined ID",
        "description": "Create or update user with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$userForm = new Rebilly\\Entities\\User();\n$userForm->setFirstName('John');\n$userForm->setLastName('Doe');\n$userForm->setEmail('johndoe@test.com');\n\ntry {\n    $user = $client->users()->update('userId', $userForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete user with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "User was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "User has related resources and cannot be deleted",
            "$ref": "#/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->users()->delete('userId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}/password": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user's password with the specified newPassword",
        "description": "Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "currentPassword and newPassword",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$updatePasswordForm = new Rebilly\\Entities\\UpdatePassword();\n$updatePasswordForm->setCurrentPassword('1234');\n$updatePasswordForm->setNewPassword('5678');\n\ntry {\n    $user = $client->users()->updatePassword('userId', $updatePasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}/totp-reset": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset (renew) totpSecret",
        "description": "Reset (renew) totpSecret\n",
        "responses": {
          "201": {
            "description": "totpSecret reset (renewed) successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$user = $client->users()->resetTotp('userId');\n"
          }
        ]
      }
    },
    "/users/reset-password/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token string",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset user password",
        "description": "Reset user password\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ResetPassword resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password was reseted successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$resetPasswordForm = new Rebilly\\Entities\\ResetPassword();\n$resetPasswordForm->setNewPassword('1234');\n\ntry {\n    $user = $client->users()->resetPassword('userId', 'token', $resetPasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve a list of webhooks",
        "description": "Retrieve a list of webhooks\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Webhooks was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GlobalWebhook"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "description": "Create a webhook\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Webhook resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Webhook was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/webhooks/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve a webhook",
        "description": "Retrieve a webhook with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create or update a webhook with predefined ID",
        "description": "Create or update a webhook with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Webhook resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "201": {
            "description": "Webhook was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/websites": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Retrieve a list of websites",
        "description": "Retrieve a list of websites\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of Websites was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Website"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websites = $client->websites()->search([\n    'filter' => 'name:TestWebsite',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Websites"
        ],
        "summary": "Create a website",
        "description": "Create a website\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Website resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Website"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteForm = new Rebilly\\Entities\\Website();\n$websiteForm->setName('TestWebsite');\n$websiteForm->setUrl('http://testwebsite.com');\n$websiteForm->setServicePhone('+0123456789');\n$websiteForm->setServiceEmail('test@testwebsite.com');\n\ntry {\n    $website = $client->websites()->create($websiteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/websites/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Retrieve a website",
        "description": "Retrieve a website with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Website was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$website = $client->websites()->load('websiteId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Websites"
        ],
        "summary": "Create or update a website with predefined ID",
        "description": "Create or update a website with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Website resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Website"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Website was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteForm = new Rebilly\\Entities\\Website();\n$websiteForm->setName('TestWebsite');\n$websiteForm->setUrl('http://testwebsite.com');\n$websiteForm->setServicePhone('+0123456789');\n$websiteForm->setServiceEmail('test@testwebsite.com');\n\ntry {\n    $website = $client->websites()->update('websiteId', $websiteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Websites"
        ],
        "summary": "Delete a website",
        "description": "Delete a website with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Website was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Website has related resources and cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->websites()->delete('websiteId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    }
  },
  "definitions": {
    "AmountRestrictions": {
      "type": "object",
      "required": [
        "currency",
        "min"
      ],
      "properties": {
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "min": {
          "description": "The minimum amount allowed",
          "type": "number",
          "format": "double",
          "minimum": 0
        },
        "max": {
          "description": "The maximum amount allowed",
          "type": "number",
          "format": "double",
          "minimum": 0
        }
      }
    },
    "ApiKey": {
      "type": "object",
      "description": "API secret Key.",
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "description": {
          "description": "API key description",
          "type": "string"
        },
        "datetimeFormat": {
          "description": "Date time format",
          "type": "string",
          "default": "iso8601",
          "enum": [
            "mysql",
            "iso8601"
          ]
        },
        "apiUser": {
          "description": "API user name",
          "type": "string",
          "readOnly": true
        },
        "secretKey": {
          "description": "API secret key's value",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "The API key created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Attachment": {
      "type": "object",
      "required": [
        "fileId",
        "relatedId",
        "relatedType"
      ],
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "fileId": {
          "description": "Linked File object id",
          "type": "string"
        },
        "relatedType": {
          "description": "Linked object type",
          "type": "string",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ]
        },
        "relatedId": {
          "description": "Linked object Id",
          "type": "string"
        },
        "name": {
          "description": "The Original Attachment name",
          "type": "string"
        },
        "description": {
          "description": "The Attachment description",
          "type": "string"
        },
        "createdTime": {
          "description": "Creation date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Latest update date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/FileLink"
            },
            {
              "$ref": "#/definitions/AttachmentResourceLink"
            }
          ]
        }
      }
    },
    "AuthenticationOptions": {
      "type": "object",
      "properties": {
        "passwordPattern": {
          "description": "Allowed password pattern",
          "type": "string"
        },
        "credentialTtl": {
          "description": "The default lifetime of the credential in seconds",
          "type": "integer"
        },
        "authTokenTtl": {
          "description": "The default lifetime of the auth-token in seconds",
          "type": "integer"
        },
        "resetTokenTtl": {
          "description": "The default lifetime of the reset-token in seconds",
          "type": "integer"
        }
      }
    },
    "AuthenticationToken": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "token": {
          "description": "The token identifier string",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        },
        "password": {
          "description": "The token's password (write-only)",
          "type": "string",
          "format": "password"
        },
        "credentialId": {
          "description": "The credential's ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The token's customer ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "expiredTime": {
          "description": "Token's expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The bank account identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID.",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "bankName": {
          "description": "Bank's name.",
          "type": "string"
        },
        "routingNumber": {
          "description": "Bank's Routing Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountNumber": {
          "description": "Bank's Account Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountType": {
          "description": "Banks's Account type. Required if bank account is not created from Token",
          "type": "string"
        },
        "token": {
          "description": "Bank Account Token. Use without any other fields",
          "type": "string"
        },
        "address": {
          "description": "The Address. Required if bank account is not created from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "status": {
          "description": "Bank Account status",
          "type": "string",
          "enum": [
            "active",
            "deactivated"
          ]
        },
        "createdTime": {
          "description": "Bank Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Bank Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "Blacklist": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "id": {
          "description": "The blacklist identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "The blacklist type",
          "type": "string",
          "enum": [
            "payment-card-id",
            "customer-id",
            "email",
            "ip-address",
            "country",
            "fingerprint",
            "bin"
          ]
        },
        "value": {
          "description": "The blacklist value",
          "type": "string"
        },
        "expiredTime": {
          "description": "The blacklist expired time",
          "type": "string",
          "format": "date-time"
        },
        "createdTime": {
          "description": "The blacklist created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The blacklist updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "CheckoutPage": {
      "type": "object",
      "required": [
        "name",
        "planId",
        "websiteId",
        "uriPath"
      ],
      "properties": {
        "id": {
          "description": "Checkout page identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "planId": {
          "description": "Checkout page plan ID",
          "type": "string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Checkout page website ID",
          "type": "string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "uriPath": {
          "description": "Your own custom uri path for this Checkout Page. It will be appended to checkout url https://checkout.rebilly.com/checkout/<uriPath>",
          "type": "string",
          "maxLength": 50
        },
        "name": {
          "description": "Checkout page name",
          "type": "string"
        },
        "isActive": {
          "description": "If checkout page active",
          "type": "boolean"
        },
        "redirectUrl": {
          "description": "Checkout page url",
          "type": "string"
        },
        "redirectTimeout": {
          "description": "Checkout page redirect timeout",
          "type": "integer"
        },
        "allowCustomCustomerId": {
          "description": "If to enable your own customer ID in requests",
          "type": "boolean"
        },
        "createdTime": {
          "description": "Checkout page created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Checkout page updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "none": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/WebhookAuthorization"
        }
      ]
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The contact identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The contact customer ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "address": {
          "description": "The contact street address",
          "type": "string",
          "maxLength": 60
        },
        "address2": {
          "description": "The contact street address (second line)",
          "type": "string",
          "maxLength": 60
        },
        "city": {
          "description": "The contact city",
          "type": "string",
          "maxLength": 45
        },
        "region": {
          "description": "The contact region (state)",
          "type": "string",
          "maxLength": 45
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        },
        "postalCode": {
          "description": "The contact postal code",
          "type": "string",
          "maxLength": 10
        },
        "phoneNumbers": {
          "$ref": "#/definitions/ContactPhoneNumbers"
        },
        "emails": {
          "$ref": "#/definitions/ContactEmails"
        },
        "createdTime": {
          "description": "The contact created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The contact updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "ContactEmails": {
      "description": "The contact emails",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "properties": {
          "label": {
            "description": "The email label",
            "type": "string"
          },
          "value": {
            "description": "The email value",
            "type": "string"
          },
          "primary": {
            "description": "True if email is primary",
            "type": "boolean"
          }
        }
      }
    },
    "ContactObject": {
      "type": "object",
      "properties": {
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "address": {
          "description": "The contact street address",
          "type": "string",
          "maxLength": 60
        },
        "address2": {
          "description": "The contact street address (second line)",
          "type": "string",
          "maxLength": 60
        },
        "city": {
          "description": "The contact city",
          "type": "string",
          "maxLength": 45
        },
        "region": {
          "description": "The contact region (state)",
          "type": "string",
          "maxLength": 45
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        },
        "postalCode": {
          "description": "The contact postal code",
          "type": "string",
          "maxLength": 10
        },
        "phoneNumbers": {
          "$ref": "#/definitions/ContactPhoneNumbers"
        },
        "emails": {
          "$ref": "#/definitions/ContactEmails"
        }
      }
    },
    "ContactPhoneNumbers": {
      "description": "The contact phone numbers",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "properties": {
          "label": {
            "description": "The phone label",
            "type": "string"
          },
          "value": {
            "description": "The phone value",
            "type": "string"
          },
          "primary": {
            "description": "True if phone is primary",
            "type": "boolean"
          }
        }
      }
    },
    "Coupon": {
      "type": "object",
      "description": "Coupons and Discounts",
      "required": [
        "discount",
        "issuedTime"
      ],
      "properties": {
        "redemptionCode": {
          "description": "Coupon's redemption code",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "discount": {
          "$ref": "#/definitions/Discount"
        },
        "restrictions": {
          "description": "Coupon restrictions",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/CouponRestriction"
            }
          ]
        },
        "redemptionsCount": {
          "type": "integer",
          "description": "Coupon's redemptions count",
          "minimum": 0,
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "If coupon enabled",
          "readOnly": true,
          "enum": [
            "issued",
            "expired"
          ]
        },
        "description": {
          "type": "string",
          "description": "Your coupon description. When it is not empty this is used for invoice discount item description,\notherwise the item's description uses coupon's redemptionCode like 'Coupon \"redemptionCode\"'\n"
        },
        "issuedTime": {
          "description": "Coupon's issued time (start time)",
          "type": "string",
          "format": "date-time"
        },
        "expiredTime": {
          "description": "Coupon's expire time (end time)",
          "type": "string",
          "format": "date-time"
        },
        "createdTime": {
          "description": "Coupon created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Coupon updated time.",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "CouponExpiration": {
      "type": "object",
      "required": [
        "expiredTime"
      ],
      "properties": {
        "expiredTime": {
          "description": "The coupon's expiry time, must be greater than the issued time. Null or empty string will immediately expire the coupon.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CouponRedemption": {
      "type": "object",
      "description": "Coupons redemption log",
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "redemptionCode": {
          "description": "Coupon's redemption code",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "additionalRestrictions": {
          "description": "Additional restrictions for coupon's redemptions",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/RedemptionRestriction"
            }
          ]
        },
        "redeemedTime": {
          "description": "Coupon redeem time",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "canceledTime": {
          "description": "Coupon redemption canceled time",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "CouponRestriction": {
      "description": "Coupon restrictions",
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Coupon's restriction type",
          "type": "string",
          "enum": [
            "discounts-per-redemption",
            "minimum-order-amount",
            "redemptions-per-customer",
            "restrict-to-invoices",
            "restrict-to-plans",
            "restrict-to-subscriptions",
            "total-redemptions"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "discounts-per-redemption": {
      "description": "discounts-per-redemption restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "quantity"
          ],
          "properties": {
            "quantity": {
              "type": "integer",
              "description": "Restriction quantity"
            }
          }
        }
      ]
    },
    "minimum-order-amount": {
      "description": "minimum-order-amount restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "amount",
            "currency"
          ],
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Minimum order quantity"
            },
            "currency": {
              "type": "string",
              "description": "Minimum order currency"
            }
          }
        }
      ]
    },
    "redemptions-per-customer": {
      "description": "Quantity per Customer restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "quantity"
          ],
          "properties": {
            "quantity": {
              "type": "integer",
              "description": "Restriction value"
            }
          }
        }
      ]
    },
    "restrict-to-invoices": {
      "description": "restrict-to-invoices restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "invoiceIds"
          ],
          "properties": {
            "invoiceIds": {
              "type": "array",
              "description": "Invoice IDs coupon can be applied to",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "restrict-to-plans": {
      "description": "restrict-to-plans restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "planIds"
          ],
          "properties": {
            "planIds": {
              "type": "array",
              "description": "Plan IDs coupon can be applied to",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "restrict-to-subscriptions": {
      "description": "restrict-to-subscriptions restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "subscriptionIds"
          ],
          "properties": {
            "subscriptionIds": {
              "type": "array",
              "description": "Subscription IDs coupon can be applied to",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "total-redemptions": {
      "description": "total-redemptions restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "quantity"
          ],
          "properties": {
            "quantity": {
              "type": "integer",
              "description": "Total redemptions quantity"
            }
          }
        }
      ]
    },
    "Discount": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Discount type",
          "type": "string",
          "enum": [
            "fixed",
            "percent"
          ]
        }
      }
    },
    "fixed": {
      "description": "Coupon fixed amount discount",
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "type": "object",
          "required": [
            "amount",
            "currency"
          ],
          "properties": {
            "amount": {
              "description": "Discount amount",
              "type": "number",
              "format": "double"
            },
            "currency": {
              "description": "Discount currency",
              "type": "string"
            }
          }
        }
      ]
    },
    "percent": {
      "description": "Coupon percent discount",
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "description": "Discount percent",
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "InvoiceDiscount": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "redemptionCode": {
          "description": "Coupon's redemption code",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "redemptionId": {
          "description": "Redemption ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "amount": {
          "description": "Total amount that was discounted by this Coupon",
          "type": "number",
          "format": "double"
        },
        "description": {
          "type": "string",
          "description": "Discount description"
        }
      }
    },
    "RedemptionRestriction": {
      "description": "Redemption restrictions",
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Redemption's additional restriction type",
          "type": "string",
          "enum": [
            "discounts-per-redemption",
            "minimum-order-amount",
            "restrict-to-invoices",
            "restrict-to-plans",
            "restrict-to-subscriptions"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "Credential": {
      "type": "object",
      "required": [
        "username",
        "password",
        "customerId"
      ],
      "properties": {
        "id": {
          "description": "The credential identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "username": {
          "description": "Credential's username",
          "type": "string"
        },
        "password": {
          "description": "The credential's password",
          "type": "string",
          "format": "password"
        },
        "customerId": {
          "description": "The credential's customer ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "The credential's expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "Condition": {
      "type": "object",
      "discriminator": "op",
      "properties": {
        "op": {
          "type": "string",
          "description": "The condition operation",
          "enum": [
            "and",
            "or",
            "not",
            "between",
            "equals",
            "in",
            "gt",
            "gte",
            "lt",
            "lte"
          ]
        }
      },
      "required": [
        "op"
      ]
    },
    "and": {
      "type": "object",
      "description": "Logical AND",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ]
    },
    "between": {
      "type": "object",
      "description": "Between condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "min": {
              "type": "string"
            },
            "max": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "min",
            "max"
          ]
        }
      ]
    },
    "compare": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "path",
        "value"
      ]
    },
    "equals": {
      "type": "object",
      "description": "Equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "gt": {
      "type": "object",
      "description": "Greater than condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "gte": {
      "type": "object",
      "description": "Greater than or equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "in": {
      "type": "object",
      "description": "In condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "path",
            "values"
          ]
        }
      ]
    },
    "logical-not": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/Condition"
        }
      },
      "required": [
        "condition"
      ],
      "example": {
        "operation": "not",
        "condition": {
          "operation": "equals",
          "path": "/name",
          "value": "John Dou"
        }
      }
    },
    "logical": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/Condition"
          }
        }
      },
      "required": [
        "conditions"
      ]
    },
    "lt": {
      "type": "object",
      "description": "Less than condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "lte": {
      "type": "object",
      "description": "Less than or equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "not": {
      "type": "object",
      "description": "Logical NOT",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical-not"
        }
      ]
    },
    "or": {
      "type": "object",
      "description": "Logical OR",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ]
    },
    "Customer": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The customer identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "defaultPaymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "createdTime": {
          "description": "The customer created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The customer updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "primaryAddress": {
          "$ref": "#/definitions/ContactObject"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            },
            {
              "$ref": "#/definitions/DefaultPaymentInstrumentLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "CustomEvent": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The custom event identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "eventType": {
          "type": "string",
          "description": "The system event type",
          "enum": [
            "subscription-ended",
            "subscription-trial-ended",
            "subscription-renewed",
            "payment-card-expired",
            "invoice-past-due",
            "invoice-issued",
            "invoice-voided",
            "invoice-paid",
            "invoice-abandoned"
          ]
        },
        "title": {
          "type": "string",
          "description": "The custom event title"
        },
        "description": {
          "type": "string",
          "description": "The custom event description"
        },
        "chronology": {
          "type": "string",
          "description": "The emitting time of the custom event relatively to the system event",
          "enum": [
            "before",
            "after"
          ]
        },
        "scheduleInstruction": {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "rulesCount": {
          "type": "integer",
          "readOnly": true
        }
      },
      "required": [
        "eventType",
        "title",
        "chronology",
        "scheduleInstruction"
      ]
    },
    "CustomField": {
      "description": "A separate Custom Field schema",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "description": "The name of the custom field",
          "type": "string"
        },
        "type": {
          "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "datetime",
            "integer",
            "number",
            "string",
            "monetary"
          ]
        },
        "description": {
          "description": "The custom field description",
          "type": "string"
        },
        "isUsed": {
          "description": "A flag to represent that the custom field is used on a record of the resource.",
          "type": "boolean"
        },
        "additionalSchema": {
          "description": "Additional parameters which can be added according to type:\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\n"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Dispute": {
      "type": "object",
      "required": [
        "currency",
        "transactionId",
        "postedTime",
        "type",
        "status",
        "reasonCode"
      ],
      "properties": {
        "id": {
          "description": "The dispute identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The dispute's customer ID",
          "type": "string",
          "readOnly": true
        },
        "transactionId": {
          "description": "The dispute's transaction ID",
          "type": "string"
        },
        "currency": {
          "description": "The dispute currency ISO Alpha code",
          "type": "string"
        },
        "amount": {
          "description": "The dispute amount",
          "type": "number",
          "format": "double"
        },
        "acquirerReferenceNumber": {
          "description": "The dispute's acquirer reference number",
          "type": "string"
        },
        "reasonCode": {
          "description": "The dispute's reason code",
          "type": "string",
          "enum": [
            "1000",
            "12",
            "2",
            "30",
            "31",
            "35",
            "37",
            "40",
            "41",
            "42",
            "46",
            "47",
            "49",
            "50",
            "53",
            "54",
            "55",
            "57",
            "59",
            "60",
            "62",
            "7",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "79",
            "8",
            "80",
            "81",
            "82",
            "83",
            "85",
            "86",
            "93",
            "00",
            "63",
            "A01",
            "A02",
            "A08",
            "F10",
            "F14",
            "F22",
            "F24",
            "F29",
            "C02",
            "C04",
            "C05",
            "C08",
            "C14",
            "C18",
            "C28",
            "C31",
            "C32",
            "M10",
            "M49",
            "P01",
            "P03",
            "P04",
            "P05",
            "P07",
            "P08",
            "P22",
            "P23",
            "R03",
            "R13",
            "M01",
            "FR1",
            "FR4",
            "FR6",
            "AL",
            "AP",
            "AW",
            "CA",
            "CD",
            "CR",
            "DA",
            "DP",
            "DP1",
            "EX",
            "IC",
            "IN",
            "IS",
            "LP",
            "N",
            "NA",
            "NC",
            "P",
            "RG",
            "RM",
            "RN1",
            "RN2",
            "SV",
            "TF",
            "TNM",
            "UA01",
            "UA02",
            "UA32",
            "UA99",
            "UA03",
            "UA10",
            "UA11",
            "UA12",
            "UA18",
            "UA20",
            "UA21",
            "UA22",
            "UA23",
            "UA28",
            "UA30",
            "UA31",
            "UA38",
            "duplicate",
            "fraudulent",
            "subscription_canceled",
            "product_unacceptable",
            "product_not_received",
            "unrecognized",
            "credit_not_processed",
            "customer_initiated",
            "incorrect_account_details",
            "insufficient_funds",
            "bank_cannot_process",
            "debit_not_authorized",
            "general"
          ]
        },
        "category": {
          "description": "The dispute's category",
          "type": "string",
          "readOnly": true,
          "enum": [
            "fraud",
            "unrecognized",
            "product-not-received",
            "product-unacceptable",
            "product-not-refunded",
            "duplicate",
            "subscription-canceled",
            "uncategorized"
          ]
        },
        "type": {
          "description": "The dispute's type",
          "type": "string",
          "enum": [
            "information-request",
            "first-chargeback",
            "second-chargeback",
            "arbitration"
          ]
        },
        "status": {
          "description": "The dispute's status",
          "type": "string",
          "enum": [
            "response-needed",
            "under-review",
            "forfeited",
            "won",
            "lost",
            "unknown"
          ]
        },
        "postedTime": {
          "description": "Dispute posted time",
          "type": "string",
          "format": "date-time"
        },
        "deadlineTime": {
          "description": "Dispute deadline time",
          "type": "string",
          "format": "date-time"
        },
        "rawResponse": {
          "description": "Dispute raw response from gateway",
          "type": "string",
          "readOnly": true
        },
        "resolvedTime": {
          "description": "Dispute resolved time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Dispute created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Dispute updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/TransactionLink"
            }
          ]
        }
      }
    },
    "DisputeEvidence": {
      "type": "object",
      "properties": {
        "policy": {
          "description": "The id of a file upload with the policy materials (may include the cancellation policy, refund policy, and terms of use).",
          "type": "string"
        },
        "accessLogs": {
          "description": "The id of a file upload with the access logs showing the customer activity.",
          "type": "string"
        },
        "customerCommunication": {
          "description": "The id of a file upload showing communication with the customer (for example emails).",
          "type": "string"
        },
        "customerSignature": {
          "description": "The id of a file upload showing the signed contract or signed delivery receipt.",
          "type": "string"
        },
        "deliveryProof": {
          "description": "The id of a file upload showing the proof of delivery.",
          "type": "string"
        },
        "explanation": {
          "description": "An explanation relevant to the category of dispute.",
          "type": "string"
        },
        "additionalFile": {
          "description": "Any additional evidence as a file upload id.",
          "type": "string"
        }
      }
    },
    "SmtpAuthorization": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "none",
            "plain",
            "login",
            "cram-md5"
          ],
          "default": "none"
        }
      }
    },
    "cram-md5": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "login": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "plain": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "SmtpCredential": {
      "type": "object",
      "description": "SMTP Credential",
      "required": [
        "host"
      ],
      "properties": {
        "hash": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "host": {
          "type": "string",
          "description": "The host name"
        },
        "port": {
          "type": "integer",
          "description": "The port value",
          "minimum": 1,
          "maximum": 65535,
          "default": 25
        },
        "encryption": {
          "type": "string",
          "description": "The encryption value",
          "enum": [
            "none",
            "tls",
            "ssl"
          ],
          "default": "none"
        },
        "auth": {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "UserPasswordAuthorization": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "minimum": 100,
          "maximum": 600
        },
        "error": {
          "type": "string"
        }
      }
    },
    "SystemEvent": {
      "type": "object",
      "description": "The application event",
      "readOnly": true,
      "properties": {
        "eventType": {
          "$ref": "#/definitions/EventType"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rulesCount": {
          "type": "integer",
          "readOnly": true
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "EventType": {
      "type": "string",
      "description": "Rebilly event type",
      "readOnly": true,
      "enum": [
        "dispute-created",
        "gateway-account-requested",
        "transaction-processed",
        "subscription-activated",
        "subscription-canceled",
        "subscription-created",
        "subscription-renewed",
        "payment-card-expired",
        "invoice-past-due",
        "payment-declined",
        "transaction-process-requested",
        "risk-score-changed"
      ]
    },
    "File": {
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "Original File name",
          "type": "string"
        },
        "extension": {
          "description": "The File extension",
          "type": "string"
        },
        "description": {
          "description": "The File description",
          "type": "string"
        },
        "url": {
          "description": "Write-only. If defined on POST, this would be used as a file source.",
          "type": "string"
        },
        "tags": {
          "description": "The tags list",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mime": {
          "description": "The mime type",
          "type": "string",
          "readOnly": true,
          "enum": [
            "image/png",
            "image/jpeg",
            "image/gif",
            "application/pdf",
            "audio/mpeg"
          ]
        },
        "size": {
          "description": "The File size in bytes",
          "type": "integer",
          "readOnly": true
        },
        "width": {
          "description": "Image width, applicable to images only",
          "type": "integer",
          "readOnly": true
        },
        "height": {
          "description": "Image height, applicable to images only",
          "type": "integer",
          "readOnly": true
        },
        "sha1": {
          "description": "Hash sum of the file",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "The upload date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The latest update date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "isPublic": {
          "description": "Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.",
          "type": "boolean"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/FileDownloadLink"
            },
            {
              "$ref": "#/definitions/SignedLinkLink"
            },
            {
              "$ref": "#/definitions/PermalinkLink"
            }
          ]
        }
      }
    },
    "ForgotPassword": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email",
          "type": "string",
          "format": "email"
        }
      }
    },
    "GatewayAccount": {
      "type": "object",
      "required": [
        "gatewayName",
        "acquirerName",
        "merchantCategoryCode",
        "websites",
        "acceptedCurrencies",
        "organizationId"
      ],
      "discriminator": "gatewayName",
      "properties": {
        "id": {
          "description": "The gateway identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "status": {
          "description": "The gateway account's status",
          "readOnly": true,
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "pending"
          ]
        },
        "gatewayName": {
          "$ref": "#/definitions/GatewayName"
        },
        "acquirerName": {
          "$ref": "#/definitions/AcquirerName"
        },
        "merchantCategoryCode": {
          "description": "The gateway account's merchant category code",
          "type": "integer",
          "minimum": 742,
          "maximum": 9950
        },
        "dccMarkup": {
          "description": "Dynamic currency conversion markup in basis points",
          "type": "integer",
          "minimum": 1,
          "maximum": 10000
        },
        "descriptor": {
          "description": "The gateway account's descriptor",
          "type": "string"
        },
        "cityField": {
          "description": "The gateway account's city field (also known as line 2 descriptor)",
          "type": "string"
        },
        "organizationId": {
          "description": "Organization ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websites": {
          "description": "Websites IDs",
          "type": "array",
          "items": {
            "description": "Website ID",
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ]
          }
        },
        "excludedDccQuoteCurrencies": {
          "description": "Excluded Dynamic Currency Conversion Quote Currencies",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "monthlyLimit": {
          "description": "Monthly Limit",
          "type": "number",
          "format": "double",
          "minimum": 0
        },
        "approvalWindowTtl": {
          "description": "The time window (in seconds) allotted for approving a suspended transaction before it is automatically canceled",
          "type": "integer",
          "default": 3600,
          "minimum": 300,
          "maximum": 1296000
        },
        "threeDSecure": {
          "description": "True, if Gateway Account allows 3DSecure",
          "type": "boolean"
        },
        "dynamicDescriptor": {
          "description": "True, if Gateway Account allows dynamic descriptor",
          "type": "boolean"
        },
        "acceptedCurrencies": {
          "description": "Accepted currencies (array of the currency three letter code)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "paymentCardSchemes": {
          "description": "Accepted payment card brands",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Visa",
              "MasterCard",
              "American Express",
              "Discover",
              "Maestro",
              "Solo",
              "Electron",
              "JCB",
              "Voyager",
              "Diners Club",
              "Switch",
              "Laser",
              "China Unionpay"
            ]
          }
        },
        "downtimeStart": {
          "description": "Gateway account downtime start",
          "type": "string",
          "format": "date-time"
        },
        "downtimeEnd": {
          "description": "Gateway account downtime end",
          "type": "string",
          "format": "date-time"
        },
        "amountRestrictions": {
          "description": "Set restrictions on allowed amounts per currency",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AmountRestrictions"
          }
        },
        "restriction": {
          "description": "Set restriction conditions on transaction",
          "allOf": [
            {
              "$ref": "#/definitions/Condition"
            }
          ]
        },
        "createdTime": {
          "description": "Gateway Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Gateway Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/OnBoardingUrlLink"
            }
          ]
        }
      }
    },
    "A1Gateway": {
      "description": "A1Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "A1Gateway credentials object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "A1Gateway account ID"
                },
                "password": {
                  "type": "string",
                  "description": "A1Gateway password",
                  "format": "password"
                }
              },
              "required": [
                "accountId",
                "password"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/A1GatewayMpis"
            }
          }
        }
      ]
    },
    "AmexVPC": {
      "description": "AmexVPC config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "AmexVPC credentials object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "Virtual Payment Client URL"
                },
                "merchantId": {
                  "type": "string",
                  "description": "Merchant ID"
                },
                "accessCode": {
                  "type": "string",
                  "description": "Access Code",
                  "format": "password"
                },
                "user": {
                  "type": "string",
                  "description": "User (used for refund, void and capture)"
                },
                "password": {
                  "type": "string",
                  "description": "Password (used for refund, void and capture)",
                  "format": "password"
                }
              },
              "required": [
                "url",
                "merchantId",
                "accessCode",
                "user",
                "password"
              ]
            }
          }
        }
      ]
    },
    "AstroPayCard": {
      "description": "AstroPay Card config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "AstroPay Card credentials object",
              "properties": {
                "x_login": {
                  "type": "string",
                  "description": "AstroPay Card login"
                },
                "x_tran_key": {
                  "type": "string",
                  "description": "AstroPay Card transaction key",
                  "format": "password"
                },
                "secret_key": {
                  "type": "string",
                  "description": "AstroPay Card secret key",
                  "format": "password"
                }
              },
              "required": [
                "x_login",
                "x_tran_key",
                "secret_key"
              ]
            }
          }
        }
      ]
    },
    "AuthorizeNet": {
      "description": "AuthorizeNet Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiLoginId": {
                  "type": "string",
                  "description": "AuthorizeNet Gateway api login ID"
                },
                "transactionKey": {
                  "description": "AuthorizeNet Gateway Transaction Key",
                  "type": "string",
                  "format": "password"
                }
              },
              "required": [
                "apiLoginId",
                "transactionKey"
              ]
            }
          }
        }
      ]
    },
    "Beanstream": {
      "description": "Beanstream Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Beanstream Gateway merchant ID"
                },
                "apiPasscode": {
                  "type": "string",
                  "description": "Beanstream Gateway API Passcode",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "apiPasscode"
              ]
            }
          }
        }
      ]
    },
    "BraintreePayments": {
      "description": "BraintreePayments Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "publicKey": {
                  "type": "string",
                  "description": "BraintreePayments Public Key"
                },
                "privateKey": {
                  "type": "string",
                  "description": "BraintreePayments Private Key",
                  "format": "password"
                },
                "merchantId": {
                  "type": "string",
                  "description": "BraintreePayments merchant ID",
                  "format": "password"
                },
                "merchantAccountId": {
                  "type": "string",
                  "description": "BraintreePayments merchant account ID",
                  "format": "password"
                }
              },
              "required": [
                "publicKey",
                "privateKey",
                "merchantId",
                "merchantAccountId"
              ]
            }
          }
        }
      ]
    },
    "Cashflows": {
      "description": "Cashflows Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "authId": {
                  "type": "string",
                  "description": "Cashflows Gateway auth ID"
                },
                "authPassword": {
                  "type": "string",
                  "description": "Cashflows Gateway auth password",
                  "format": "password"
                }
              },
              "required": [
                "authPassword",
                "authId"
              ]
            }
          }
        }
      ]
    },
    "Cayan": {
      "description": "Cayan Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantSiteId": {
                  "type": "string",
                  "description": "Cayan Gateway merchant site ID"
                },
                "merchantName": {
                  "type": "string",
                  "description": "Cayan Gateway merchant name"
                },
                "merchantKey": {
                  "type": "string",
                  "description": "Cayan Gateway merchant key",
                  "format": "password"
                }
              },
              "required": [
                "merchantSiteId",
                "merchantName",
                "merchantKey"
              ]
            }
          }
        }
      ]
    },
    "Chase": {
      "description": "Chase Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Chase Gateway Net Connect username"
                },
                "password": {
                  "type": "string",
                  "description": "Chase Gateway Net Connect password",
                  "format": "password"
                },
                "coNumber": {
                  "type": "string",
                  "description": "Chase Gateway CO Number used for delimited file reports"
                },
                "divisionId": {
                  "type": "string",
                  "description": "Chase Gateway division ID"
                },
                "partialAuth": {
                  "type": "boolean",
                  "description": "Support for Partial Auths",
                  "default": false
                }
              },
              "required": [
                "username",
                "password",
                "coNumber",
                "divisionId",
                "partialAuth"
              ]
            }
          }
        }
      ]
    },
    "ChinaUnionPay": {
      "description": "China Union Pay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "China Union Pay Gateway account ID"
                },
                "partyId": {
                  "type": "string",
                  "description": "China Union Pay Gateway party ID"
                },
                "goods": {
                  "type": "string",
                  "description": "China Union Pay Gateway goods"
                },
                "md5key": {
                  "type": "string",
                  "description": "China Union Pay Gateway md5key",
                  "format": "password"
                },
                "mobilePay": {
                  "type": "string",
                  "description": "China Union Pay Gateway mobile pay param"
                }
              },
              "required": [
                "accountId",
                "partyId",
                "goods",
                "md5key",
                "mobilePay"
              ]
            }
          }
        }
      ]
    },
    "Credorax": {
      "description": "Credorax Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Credorax Gateway merchant ID"
                },
                "merchantMd5Signature": {
                  "type": "string",
                  "description": "Credorax Gateway md5 signature",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "merchantMd5Signature"
              ]
            }
          }
        }
      ]
    },
    "Cryptonator": {
      "description": "Cryptonator config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "Cryptonator credentials object",
              "properties": {
                "merchant_id": {
                  "type": "string",
                  "description": "Cryptonator merchant ID"
                },
                "secret": {
                  "type": "string",
                  "description": "Cryptonator secret",
                  "format": "password"
                }
              },
              "required": [
                "merchant_id",
                "secret"
              ]
            }
          }
        }
      ]
    },
    "DataCash": {
      "description": "DataCash Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "client": {
                  "type": "string",
                  "description": "DataCash Gateway client"
                },
                "password": {
                  "type": "string",
                  "description": "DataCash Gateway password",
                  "format": "password"
                },
                "policy": {
                  "type": "integer",
                  "description": "Policy",
                  "minimum": 0,
                  "maximum": 7,
                  "default": 2
                },
                "delay": {
                  "type": "integer",
                  "description": "Auto Capture delay (in hours)",
                  "minimum": 0,
                  "default": 0
                }
              },
              "required": [
                "client",
                "password",
                "policy",
                "delay"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/DataCashMpis"
            }
          }
        }
      ]
    },
    "Dengi": {
      "description": "Dengi Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string",
                  "description": "Dengi Gateway project ID"
                },
                "publicKey": {
                  "type": "string",
                  "description": "Dengi Gateway public key",
                  "format": "password"
                },
                "refundKey": {
                  "type": "string",
                  "description": "Dengi Gateway refund key",
                  "format": "password"
                }
              },
              "required": [
                "projectId",
                "publicKey",
                "refundKey"
              ]
            }
          }
        }
      ]
    },
    "eMerchantPay": {
      "description": "eMerchantPay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "eMerchantPay Gateway client ID"
                },
                "apiKey": {
                  "type": "string",
                  "description": "eMerchantPay Gateway api key",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "apiKey"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/eMerchantPayMpis"
            }
          }
        }
      ]
    },
    "Flexepin": {
      "description": "Flexepin Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Flexepin API Key"
                },
                "apiSecret": {
                  "type": "string",
                  "description": "Flexepin API Secret",
                  "format": "password"
                }
              },
              "required": [
                "apiKey",
                "apiSecret"
              ]
            }
          }
        }
      ]
    },
    "Forte": {
      "description": "Forte Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "Forte Gateway account ID"
                },
                "locationId": {
                  "type": "string",
                  "description": "Forte Gateway location ID"
                },
                "apiAccessId": {
                  "type": "string",
                  "description": "Forte Gateway api access ID",
                  "format": "password"
                },
                "apiSecretKey": {
                  "type": "string",
                  "description": "Forte Gateway api secret key",
                  "format": "password"
                }
              },
              "required": [
                "accountId",
                "locationId",
                "apiAccessId",
                "apiSecretKey"
              ]
            }
          }
        }
      ]
    },
    "FundSend": {
      "description": "FundSend Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "FundSend Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "FundSend Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "GET": {
      "description": "GET Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "GET Gateway account ID"
                }
              },
              "required": [
                "accountId"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/GETMpis"
            }
          }
        }
      ]
    },
    "GlobalCollect": {
      "description": "GlobalCollect Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "GlobalCollect Gateway merchant ID"
                },
                "apiKeyId": {
                  "type": "string",
                  "description": "GlobalCollect Gateway api key ID"
                },
                "apiSecretKey": {
                  "type": "string",
                  "description": "GlobalCollect Gateway api secret key",
                  "format": "password"
                },
                "skipFraudService": {
                  "type": "boolean",
                  "description": "GlobalCollect skip fraud service"
                }
              },
              "required": [
                "merchantId",
                "apiKeyId",
                "apiSecretKey"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/GlobalCollectMpis"
            }
          }
        }
      ]
    },
    "GlobalOne": {
      "description": "GlobalOne Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "terminalId": {
                  "type": "string",
                  "description": "GlobalOne Gateway terminal ID"
                },
                "sharedSecret": {
                  "type": "string",
                  "description": "GlobalOne Gateway shared secret",
                  "format": "password"
                }
              },
              "required": [
                "terminalId",
                "sharedSecret"
              ]
            }
          }
        }
      ]
    },
    "Gpaysafe": {
      "description": "Gpaysafe Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Gpaysafe apiKey"
                }
              },
              "required": [
                "apiKey"
              ]
            }
          }
        }
      ]
    },
    "iCheque": {
      "description": "iCheque Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "iCheque Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "iCheque Gateway secret word",
                  "format": "password"
                },
                "apiUserId": {
                  "type": "string",
                  "description": "Username for the Alliance API (transaction reporting)"
                },
                "apiSecurityToken": {
                  "type": "string",
                  "description": "Hash of the password for the Alliance API (transaction reporting)",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Ilixium": {
      "description": "Ilixium Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Ilixium Gateway merchant ID"
                },
                "accountId": {
                  "type": "string",
                  "description": "Ilixium Gateway account ID"
                },
                "digestPassword": {
                  "type": "string",
                  "description": "Ilixium Gateway digest password",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "accountId",
                "digestPassword"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/IlixiumMpis"
            }
          }
        }
      ]
    },
    "Intuit": {
      "description": "Intuit Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "The Intuit client_id key"
                },
                "clientSecret": {
                  "type": "string",
                  "description": "The Intuit client_secret key",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "clientSecret"
              ]
            }
          }
        }
      ]
    },
    "IpayOptions": {
      "description": "Ipay Options config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "Ipay Options credentials object",
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "Ipay Options website ID"
                },
                "rcode": {
                  "type": "string",
                  "description": "Ipay Options rcode",
                  "format": "password"
                }
              },
              "required": [
                "sid",
                "rcode"
              ]
            }
          }
        }
      ]
    },
    "Jeton": {
      "description": "Jeton Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Jeton apiKey"
                }
              },
              "required": [
                "apiKey"
              ]
            }
          }
        }
      ]
    },
    "JetPay": {
      "description": "JetPay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "TerminalID": {
                  "type": "string",
                  "description": "JetPay Gateway terminal ID"
                }
              },
              "required": [
                "TerminalID"
              ]
            }
          }
        }
      ]
    },
    "Moneris": {
      "description": "Moneris Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiToken": {
                  "type": "string",
                  "description": "Moneris Gateway api token",
                  "format": "password"
                },
                "storeId": {
                  "type": "string",
                  "description": "Moneris Gateway store ID"
                }
              },
              "required": [
                "storeId",
                "apiToken"
              ]
            }
          }
        }
      ]
    },
    "NMI": {
      "description": "NMI Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "NMI Gateway api token"
                },
                "password": {
                  "type": "string",
                  "description": "NMI Gateway store ID",
                  "format": "password"
                }
              },
              "required": [
                "username",
                "password"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/NMIMpis"
            }
          }
        }
      ]
    },
    "OchaPay": {
      "description": "OchaPay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiUsername": {
                  "type": "string",
                  "description": "OchaPay Gateway username"
                },
                "apiPassword": {
                  "type": "string",
                  "description": "OchaPay Gateway api password",
                  "format": "password"
                },
                "secretWord": {
                  "type": "string",
                  "description": "OchaPay Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "apiUsername",
                "apiPassword",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Optimal": {
      "description": "Optimal Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "storeId": {
                  "type": "string",
                  "description": "Optimal Gateway store ID"
                },
                "storePwd": {
                  "type": "string",
                  "description": "Optimal Gateway store password",
                  "format": "password"
                },
                "accountNum": {
                  "type": "string",
                  "description": "Optimal Gateway account number"
                }
              },
              "required": [
                "storeId",
                "storePwd",
                "accountNum"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/OptimalMpis"
            }
          }
        }
      ]
    },
    "PandaGateway": {
      "description": "Panda Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Panda Gateway merchant code"
                },
                "apiCode": {
                  "type": "string",
                  "description": "Panda Gateway api code"
                },
                "signKey": {
                  "type": "string",
                  "description": "Panda Gateway sign key",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "apiCode",
                "signKey"
              ]
            }
          }
        }
      ]
    },
    "Payeezy": {
      "description": "Payeezy Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Payeezy Merchant ID"
                },
                "merchantToken": {
                  "type": "string",
                  "description": "Merchant Token",
                  "format": "password"
                },
                "apiKey": {
                  "type": "string",
                  "description": "API Key"
                },
                "apiSecret": {
                  "type": "string",
                  "description": "API Secret",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "merchantToken",
                "apiKey",
                "apiSecret"
              ]
            }
          }
        }
      ]
    },
    "Payflow": {
      "description": "Payflow config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "Payflow credentials object",
              "properties": {
                "user": {
                  "type": "string",
                  "description": "If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR"
                },
                "vendor": {
                  "type": "string",
                  "description": "Your merchant login ID created when you registered for the account."
                },
                "password": {
                  "type": "string",
                  "description": "The password you defined while registering for the account.",
                  "format": "password"
                }
              },
              "required": [
                "user",
                "vendor",
                "password"
              ]
            }
          }
        }
      ]
    },
    "PayPal": {
      "description": "PayPal Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantIdInPayPal": {
                  "type": "string",
                  "description": "PayPal Gateway merchant id"
                },
                "redirectUrl": {
                  "type": "string",
                  "description": "PayPal Gateway redirect url",
                  "format": "url"
                }
              },
              "required": [
                "merchantIdInPayPal",
                "redirectUrl"
              ]
            }
          }
        }
      ]
    },
    "Payr": {
      "description": "Payr Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "Payr Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "Payr Gateway secret word",
                  "format": "password"
                },
                "apiUserId": {
                  "type": "string",
                  "description": "Username for the Alliance API (transaction reporting)"
                },
                "apiSecurityToken": {
                  "type": "string",
                  "description": "Hash of the password for the Alliance API (transaction reporting)",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Payvision": {
      "description": "Payvision Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "memberId": {
                  "type": "string",
                  "description": "Payvision Gateway member id"
                },
                "memberGuid": {
                  "type": "string",
                  "description": "Payvision Gateway member guid",
                  "format": "password"
                },
                "avs": {
                  "type": "boolean",
                  "description": "Payvision Gateway avs"
                },
                "delay": {
                  "type": "integer",
                  "description": "Payvision Gateway delay"
                }
              },
              "required": [
                "memberId",
                "memberGuid",
                "avs",
                "delay"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/PayvisionMpis"
            }
          }
        }
      ]
    },
    "Plugnpay": {
      "description": "Plugnpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "publisher-name": {
                  "type": "string",
                  "description": "Plugnpay Gateway member id"
                },
                "publisher-password": {
                  "type": "string",
                  "description": "Plugnpay Gateway avs",
                  "format": "password"
                }
              },
              "required": [
                "publisher-name",
                "publisher-password"
              ]
            }
          }
        }
      ]
    },
    "Realex": {
      "description": "Realex Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Realex Gateway merchant id"
                },
                "secretKey": {
                  "type": "string",
                  "description": "Realex Gateway secret key",
                  "format": "password"
                },
                "rebatePassword": {
                  "type": "string",
                  "description": "Realex Gateway rebate password",
                  "format": "password"
                },
                "account": {
                  "type": "string",
                  "description": "Realex Gateway account"
                }
              },
              "required": [
                "merchantId",
                "secretKey",
                "rebatePassword",
                "account"
              ]
            }
          }
        }
      ]
    },
    "RealTime": {
      "description": "RealTime Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "RealTime Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "RealTime Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "RebillyProcessor": {
      "description": "RebillyProcessor Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "properties": {
            "mpi": {
              "$ref": "#/definitions/RebillyProcessorMpis"
            }
          }
        }
      ]
    },
    "Redsys": {
      "description": "Redsys Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Redsys Gateway merchant code",
                  "format": "password"
                },
                "secretCode": {
                  "type": "string",
                  "description": "Redsys Gateway secret code",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "secretCode"
              ]
            }
          }
        }
      ]
    },
    "RPN": {
      "description": "RPN Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "mid": {
                  "type": "string",
                  "description": "RPN MID"
                },
                "key": {
                  "type": "string",
                  "description": "RPN Key",
                  "format": "password"
                }
              },
              "required": [
                "mid",
                "key"
              ]
            }
          }
        }
      ]
    },
    "Sagepay": {
      "description": "Sagepay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "M_ID": {
                  "type": "string",
                  "description": "Sagepay Gateway merchant ID"
                },
                "M_KEY": {
                  "type": "string",
                  "description": "Sagepay Gateway merchant key",
                  "format": "password"
                }
              },
              "required": [
                "M_ID",
                "M_KEY"
              ]
            }
          }
        }
      ]
    },
    "Skrill": {
      "description": "Skrill config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "Skrill credentials object",
              "properties": {
                "accountEmail": {
                  "type": "string",
                  "description": "Email address of your Skrill merchant account"
                },
                "secretWord": {
                  "type": "string",
                  "description": "Secret word used for MD5 signature verifications",
                  "format": "password"
                },
                "mqiPassword": {
                  "type": "string",
                  "description": "Password used during MQI/API requests",
                  "format": "password"
                }
              },
              "required": [
                "accountEmail",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "SMSVoucher": {
      "description": "SMSVoucher Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "AppId": {
                  "type": "string",
                  "description": "SMSVoucher AppId"
                }
              },
              "required": [
                "AppId"
              ]
            }
          }
        }
      ]
    },
    "StaticGateway": {
      "description": "StaticGateway Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object"
        }
      ]
    },
    "Stripe": {
      "description": "Stripe Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "redirectUrl": {
                  "type": "string",
                  "description": "Stripe Gateway redirect url",
                  "format": "url"
                }
              },
              "required": [
                "redirectUrl"
              ]
            }
          }
        }
      ]
    },
    "UPayCard": {
      "description": "UPayCard Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "receiver_account": {
                  "type": "string",
                  "description": "merchant receiver account"
                },
                "key": {
                  "type": "string",
                  "description": "merchant key",
                  "format": "password"
                },
                "secret": {
                  "type": "string",
                  "description": "merchant secret",
                  "format": "password"
                }
              },
              "required": [
                "receiver_account",
                "key",
                "secret"
              ]
            }
          }
        }
      ]
    },
    "USAePay": {
      "description": "USAePay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "sourceKey": {
                  "type": "string",
                  "description": "USAePay Gateway source key",
                  "format": "password"
                },
                "pin": {
                  "type": "string",
                  "description": "USAePay Gateway pin",
                  "format": "password"
                }
              },
              "required": [
                "sourceKey",
                "pin"
              ]
            }
          }
        }
      ]
    },
    "VantivLitle": {
      "description": "VantivLitle Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "VantivLitle Gateway username"
                },
                "password": {
                  "type": "string",
                  "description": "VantivLitle Gateway password",
                  "format": "password"
                },
                "merchantId": {
                  "type": "string",
                  "description": "VantivLitle Gateway merchant ID"
                }
              },
              "required": [
                "username",
                "password",
                "merchantId"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/VantivLitleMpis"
            }
          }
        }
      ]
    },
    "vegaaH": {
      "description": "vegaaH Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "terminalId": {
                  "type": "string",
                  "description": "vegaaH Gateway terminal ID"
                },
                "password": {
                  "type": "string",
                  "description": "vegaaH Gateway password",
                  "format": "password"
                }
              },
              "required": [
                "terminalId",
                "password"
              ]
            }
          }
        }
      ]
    },
    "Walpay": {
      "description": "Walpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantName": {
                  "type": "string",
                  "description": "Walpay Gateway merchant name"
                },
                "merchantPin": {
                  "type": "string",
                  "description": "Walpay Gateway merchant pin",
                  "format": "password"
                }
              },
              "required": [
                "merchantName",
                "merchantPin"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/WalpayMpis"
            }
          }
        }
      ]
    },
    "Wirecard": {
      "description": "Wirecard Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantUsername": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant username"
                },
                "merchantPassword": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant password",
                  "format": "password"
                },
                "businessSignature": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant business case signature",
                  "format": "password"
                },
                "delay": {
                  "type": "integer",
                  "description": "Wirecard Gateway delay"
                }
              },
              "required": [
                "merchantUsername",
                "merchantPassword",
                "businessSignature",
                "delay"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/WirecardMpis"
            }
          }
        }
      ]
    },
    "Worldpay": {
      "description": "Worldpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Worldpay Gateway merchant code",
                  "format": "password"
                },
                "merchantPassword": {
                  "type": "string",
                  "description": "Worldpay Gateway merchant password",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "merchantPassword"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/WorldpayMpis"
            }
          }
        }
      ]
    },
    "AcquirerName": {
      "description": "Acquirer name",
      "type": "string",
      "enum": [
        "Alipay",
        "AIB",
        "AstroPay Card",
        "Ipay Options",
        "B+S",
        "Bank of America",
        "Bank of Moscow",
        "Bank of Rebilly",
        "Bank One",
        "Beanstream",
        "BMO Harris Bank",
        "Borgun",
        "BraintreePayments",
        "Catalunya Caixa",
        "Chase",
        "ChinaUnionPay",
        "CIM",
        "Credorax",
        "Cryptonator",
        "Elavon",
        "EMS",
        "Fifth Third Bank",
        "First Data Buypass",
        "First Data Nashville",
        "First Data North",
        "First Data Omaha",
        "Flexepin",
        "Forte",
        "FundSend",
        "GlobalCollect",
        "Global East",
        "Gpaysafe",
        "Heartland",
        "HSBC",
        "iCheque",
        "Ilixium",
        "Intuit",
        "Jeton",
        "Masapay",
        "Merrick",
        "Mission Valley Bank",
        "Moneris",
        "NATWEST",
        "NMI",
        "OchaPay",
        "Other",
        "Panda Bank",
        "PayPal",
        "Payr",
        "Payvision",
        "Peoples Trust Company",
        "Privatbank",
        "RBC",
        "RBS WorldPay",
        "RealTime",
        "RebillyProcessor",
        "Skrill",
        "SMSVoucher",
        "State Bank of Mauritius",
        "Stripe",
        "TBI",
        "TrustPay",
        "TSYS",
        "UPayCard",
        "Vantiv",
        "VoicePay",
        "WeChat Pay",
        "Wells Fargo",
        "Wing Hang Bank",
        "Wirecard",
        "WorldPay"
      ]
    },
    "GatewayName": {
      "description": "The gateway name",
      "type": "string",
      "enum": [
        "A1Gateway",
        "AmexVPC",
        "AstroPayCard",
        "AuthorizeNet",
        "Beanstream",
        "BraintreePayments",
        "Cashflows",
        "Cayan",
        "Chase",
        "ChinaUnionPay",
        "Credorax",
        "Cryptonator",
        "DataCash",
        "Dengi",
        "eMerchantPay",
        "Flexepin",
        "FundSend",
        "Forte",
        "GET",
        "GlobalCollect",
        "GlobalOne",
        "Gpaysafe",
        "iCheque",
        "Ilixium",
        "Intuit",
        "IpayOptions",
        "JetPay",
        "Jeton",
        "Moneris",
        "NMI",
        "OchaPay",
        "Optimal",
        "PandaGateway",
        "Payeezy",
        "Payflow",
        "PayPal",
        "Payr",
        "Payvision",
        "Plugnpay",
        "Realex",
        "RealTime",
        "RebillyProcessor",
        "Redsys",
        "RPN",
        "Sagepay",
        "Skrill",
        "SMSVoucher",
        "StaticGateway",
        "Stripe",
        "UPayCard",
        "USAePay",
        "VantivLitle",
        "vegaaH",
        "Walpay",
        "Wirecard",
        "Worldpay"
      ]
    },
    "MpiName": {
      "description": "The Merchant plug-in Name",
      "type": "string",
      "enum": [
        "PayvisionMpi",
        "WirecardMpi",
        "IlixiumMpi",
        "DataCashMpi",
        "OptimalMpi",
        "GlobalCollectMpi",
        "CardinalCommerce",
        "Other"
      ]
    },
    "GlobalWebhook": {
      "type": "object",
      "required": [
        "method",
        "url",
        "credentialHash"
      ],
      "properties": {
        "id": {
          "description": "The webhook identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "eventsFilter": {
          "description": "An array of System event type",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/definitions/GlobalWebhookEventType"
          }
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        },
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ]
        },
        "url": {
          "description": "URL that will be triggered when the given event occurs.",
          "type": "string",
          "format": "uri"
        },
        "headers": {
          "type": "object",
          "description": "Map of elements with header name - header value association"
        },
        "credentialHash": {
          "type": "string",
          "description": "Hash from Credentials which is used for authentication by the given URL"
        },
        "createdTime": {
          "description": "List created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "List updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "Links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "GlobalWebhookEventType": {
      "type": "string",
      "description": "Rebilly webhooks event type",
      "enum": [
        "gateway-account-requested",
        "subscription-trial-ended",
        "subscription-activated",
        "subscription-canceled",
        "subscription-renewed",
        "transaction-processed",
        "payment-card-expired",
        "payment-declined",
        "invoice-modified",
        "invoice-created",
        "dispute-created",
        "suspended-payment-completed"
      ]
    },
    "InvalidError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "type": "object",
          "properties": {
            "details": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Invoice": {
      "type": "object",
      "required": [
        "customerId",
        "websiteId",
        "currency"
      ],
      "properties": {
        "id": {
          "description": "The invoice identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "The website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "organizationId": {
          "description": "The organization's ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "subscriptionId": {
          "description": "The related Subscription's ID if available, otherwise null",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "amount": {
          "description": "The Invoice's amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "shippingAmount": {
          "description": "The Invoice's shipping amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "billingAddress": {
          "description": "Invoice's billing address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "deliveryAddress": {
          "description": "Invoice's delivery address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "notes": {
          "description": "Notes for the customer which will display on the invoice",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "Invoice items array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "taxes": {
          "type": "array",
          "description": "Taxes applied to this invoice",
          "readOnly": true,
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceTax"
              }
            ]
          }
        },
        "discounts": {
          "type": "array",
          "description": "Discounts applied",
          "readOnly": true,
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceDiscount"
              }
            ]
          }
        },
        "status": {
          "type": "string",
          "description": "Invoice status.",
          "readOnly": true,
          "enum": [
            "draft",
            "issued",
            "past-due",
            "paid",
            "abandoned",
            "voided"
          ]
        },
        "delinquentCollectionPeriod": {
          "type": "integer",
          "description": "Delinquent Collection Period - difference between paidTime and dueTime in days.",
          "readOnly": true
        },
        "collectionPeriod": {
          "type": "integer",
          "description": "Collection Period - difference between paidTime and issuedTime in days.",
          "readOnly": true
        },
        "abandonedTime": {
          "description": "Invoice abandoned time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "voidedTime": {
          "description": "Invoice voided time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "paidTime": {
          "description": "Invoice paid time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "dueTime": {
          "description": "Invoice due time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "issuedTime": {
          "description": "Invoice issued time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Invoice created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Invoice updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/OrganizationLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "InvoiceIssue": {
      "type": "object",
      "properties": {
        "issuedTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "InvoiceItem": {
      "type": "object",
      "required": [
        "type",
        "unitPrice"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "Invoice item's type",
          "type": "string",
          "enum": [
            "debit",
            "credit"
          ]
        },
        "unitPrice": {
          "description": "Invoice item's price",
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "description": "Invoice item's quantity",
          "type": "integer"
        },
        "productId": {
          "description": "The product's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "description": {
          "description": "Invoice item's description",
          "type": "string"
        },
        "discountAmount": {
          "description": "Invoice item discount amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "periodStartTime": {
          "description": "Start time",
          "type": "string",
          "format": "date-time"
        },
        "periodEndTime": {
          "description": "End time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/SubscriptionLink"
            }
          ]
        }
      }
    },
    "InvoiceTax": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "amount": {
          "description": "Tax amount",
          "type": "number",
          "format": "double"
        },
        "description": {
          "type": "string",
          "description": "Tax description"
        }
      }
    },
    "Layout": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "The layout identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The name of the layout string",
          "type": "string"
        },
        "items": {
          "description": "The array of layout items (planId and starred)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayoutItem"
          }
        },
        "createdTime": {
          "description": "Layout created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/ItemsLink"
            }
          ]
        }
      }
    },
    "LayoutItem": {
      "type": "object",
      "required": [
        "planId"
      ],
      "properties": {
        "planId": {
          "description": "The plan identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "starred": {
          "description": "Boolean if the plan should be starred (special callout presentation)",
          "type": "boolean"
        },
        "order": {
          "description": "Item's order in Layout",
          "type": "integer",
          "readOnly": true
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "LeadSource": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The lead source identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "medium": {
          "description": "Lead Source's medium (eg search, display)",
          "type": "string"
        },
        "source": {
          "description": "Lead Source's source (eg google, yahoo)",
          "type": "string"
        },
        "campaign": {
          "description": "Lead Source's campaign (eg go-big-123)",
          "type": "string"
        },
        "term": {
          "description": "Lead Source's term (eg salt shakers)",
          "type": "string"
        },
        "content": {
          "description": "Lead Source's content (eg smiley faces)",
          "type": "string"
        },
        "affiliate": {
          "description": "Lead Source's affiliate (eg 123, Bob Smith)",
          "type": "string"
        },
        "subAffiliate": {
          "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
          "type": "string"
        },
        "salesAgent": {
          "description": "Lead Source's sales agent (eg James Bond)",
          "type": "string"
        },
        "clickId": {
          "description": "Lead Source's click id (may come from an ad server)",
          "type": "string"
        },
        "path": {
          "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
          "type": "string"
        },
        "ipAddress": {
          "description": "Customer's IP Address",
          "type": "string"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 alpha code) (eg USD, EUR)",
          "type": "string"
        },
        "amount": {
          "description": "The amount that the lead cost",
          "type": "number",
          "format": "double"
        },
        "createdTime": {
          "description": "LeadSource created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "LeadSource updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "ApprovalUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "approvalUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "AttachmentResourceLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "BankAccountLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "bankAccount"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "CancelUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "cancelUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "CustomerLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "customer"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "DefaultPaymentInstrumentLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "defaultPaymentInstrument"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "DisputeLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "dispute"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "FileDownloadLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "download"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "FileLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "file"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "GatewayAccountLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "gatewayAccount"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "ItemsLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "items"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "LeadSourceLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "leadSource"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "NewLink": {
      "type": "object",
      "properties": {
        "href": {
          "description": "The link URL",
          "type": "string"
        }
      },
      "required": [
        "href"
      ]
    },
    "NotesLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "notes"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "OnBoardingUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "onBoardingUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "OrganizationLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "organization"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "ParentTransactionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "parentTransaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PaymentCardLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "paymentCard"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PaymentLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "payment"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PermalinkLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "permalink"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PlanLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "plan"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RefundUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "refundUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RetriedTransactionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "retriedTransaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RuleSetHistoryLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "history"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RuleSetVersionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "rules"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SelfLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "self"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SignedLinkLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "signedLink"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SubscriptionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "subscription"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "TransactionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "transaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "WebsiteLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "website"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "List": {
      "type": "object",
      "required": [
        "name",
        "values"
      ],
      "properties": {
        "id": {
          "description": "List ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "version": {
          "description": "List version",
          "type": "integer",
          "readOnly": true,
          "minimum": 1
        },
        "name": {
          "description": "List name",
          "type": "string"
        },
        "values": {
          "description": "List values",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdTime": {
          "description": "List created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "List updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "Links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Method": {
      "type": "string",
      "description": "The payment method",
      "enum": [
        "ach",
        "cash",
        "payment-card",
        "paypal",
        "Alipay",
        "China UnionPay",
        "Flexepin",
        "Gpaysafe",
        "Jeton",
        "OchaPay",
        "SMSVoucher",
        "UPayCard",
        "WeChat Pay",
        "AstroPay Card",
        "bank-transfer",
        "bitcoin",
        "Boleto",
        "cash-deposit",
        "echeck",
        "instant-bank-transfer",
        "invoice",
        "miscellaneous",
        "online-bank-transfer",
        "phone",
        "voucher"
      ]
    },
    "A1GatewayMpis": {
      "description": "A1Gateway Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      }
    },
    "DataCashMpi": {
      "description": "DataCash Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/DataCashMpis"
        }
      ]
    },
    "DataCashMpis": {
      "description": "DataCash Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "DataCashMpi"
          ]
        }
      }
    },
    "eMerchantPayMpis": {
      "description": "eMerchantPay Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      }
    },
    "GETMpis": {
      "description": "GET Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      }
    },
    "GlobalCollectMpi": {
      "description": "GlobalCollect Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/GlobalCollectMpis"
        }
      ]
    },
    "GlobalCollectMpis": {
      "description": "GlobalCollect Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "GlobalCollectMpi"
          ]
        }
      }
    },
    "IlixiumMpi": {
      "description": "Ilixium Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/IlixiumMpis"
        }
      ]
    },
    "IlixiumMpis": {
      "description": "IlixiumMpis Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "IlixiumMpi"
          ]
        }
      }
    },
    "NMIMpis": {
      "description": "NMI Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      }
    },
    "OptimalMpi": {
      "description": "Optimal Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/OptimalMpis"
        }
      ]
    },
    "OptimalMpis": {
      "description": "Optimal Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "OptimalMpi"
          ]
        }
      }
    },
    "Other": {
      "description": "Other",
      "allOf": [
        {
          "$ref": "#/definitions/A1GatewayMpis"
        },
        {
          "$ref": "#/definitions/eMerchantPayMpis"
        },
        {
          "$ref": "#/definitions/GETMpis"
        },
        {
          "$ref": "#/definitions/NMIMpis"
        },
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "$ref": "#/definitions/VantivLitleMpis"
        },
        {
          "$ref": "#/definitions/WalpayMpis"
        },
        {
          "$ref": "#/definitions/WorldpayMpis"
        }
      ]
    },
    "CardinalCommerce": {
      "description": "CardinalCommerce Mpi Credentials",
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "type": "object",
          "required": [
            "merchantId",
            "processorId",
            "transactionPwd"
          ],
          "properties": {
            "merchantId": {
              "type": "string",
              "description": "Cardinal MerchantId"
            },
            "processorId": {
              "type": "string",
              "description": "Cardinal ProcessorId"
            },
            "transactionPwd": {
              "type": "string",
              "format": "password",
              "description": "Cardinal TransactionPwd"
            }
          }
        }
      ]
    },
    "PayvisionMpi": {
      "description": "Payvision Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        }
      ]
    },
    "PayvisionMpis": {
      "description": "Payvision Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PayvisionMpi",
            "CardinalCommerce",
            "Other"
          ]
        }
      }
    },
    "RebillyProcessorMpi": {
      "description": "RebillyProcessor Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/RebillyProcessorMpis"
        }
      ]
    },
    "RebillyProcessorMpis": {
      "description": "RebillyProcessorMpis Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "RebillySandboxMpi"
          ]
        }
      }
    },
    "VantivLitleMpis": {
      "description": "VantivLitle Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      }
    },
    "WalpayMpis": {
      "description": "WalpayMpis Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      }
    },
    "WirecardMpi": {
      "description": "Wirecard Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/WirecardMpis"
        }
      ]
    },
    "WirecardMpis": {
      "description": "Wirecard Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "WirecardMpi"
          ]
        }
      }
    },
    "WorldpayMpis": {
      "description": "Worldpay Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      }
    },
    "Note": {
      "type": "object",
      "required": [
        "content",
        "relatedType",
        "relatedId"
      ],
      "properties": {
        "id": {
          "description": "The note identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdBy": {
          "description": "The note's creator",
          "type": "string",
          "readOnly": true
        },
        "content": {
          "description": "The note's name",
          "type": "string"
        },
        "archived": {
          "description": "Is the note archived (excluded from List method)",
          "type": "boolean"
        },
        "relatedType": {
          "description": "The note's related resource type",
          "type": "string",
          "enum": [
            "customer",
            "payment-card",
            "payment-gateway",
            "subscription",
            "transaction"
          ]
        },
        "relatedId": {
          "description": "The note's related resource ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdTime": {
          "description": "Note created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Note updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "archivedTime": {
          "description": "Note archived time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "OnOff": {
      "type": "string",
      "default": "active",
      "enum": [
        "active",
        "inactive"
      ]
    },
    "Organization": {
      "type": "object",
      "required": [
        "name",
        "country"
      ],
      "properties": {
        "id": {
          "description": "The organization identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdTime": {
          "description": "The organization created time",
          "$ref": "#/definitions/ServerTimestamp"
        },
        "updatedTime": {
          "description": "The organization updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "name": {
          "description": "The organization name",
          "type": "string",
          "maxLength": 60
        },
        "address": {
          "description": "The organization street address",
          "type": "string",
          "maxLength": 60
        },
        "address2": {
          "description": "The organization street address",
          "type": "string",
          "maxLength": 60
        },
        "city": {
          "description": "The organization city",
          "type": "string",
          "maxLength": 45
        },
        "region": {
          "description": "The organization region (state)",
          "type": "string",
          "maxLength": 45
        },
        "country": {
          "description": "The organization country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        },
        "postalCode": {
          "description": "The organization postal code",
          "type": "string",
          "maxLength": 10
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Payment": {
      "type": "object",
      "required": [
        "websiteId",
        "customerId",
        "currency",
        "amount"
      ],
      "properties": {
        "id": {
          "description": "The payment identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "The website identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The customer identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "currency": {
          "description": "The payment currency ISO Alpha code",
          "type": "string"
        },
        "amount": {
          "description": "The payment amount",
          "type": "integer",
          "format": "double"
        },
        "scheduledTime": {
          "description": "The time the payment is scheduled for collection",
          "type": "string",
          "format": "date-time"
        },
        "invoiceIds": {
          "description": "The array of invoice identifiers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceId"
          }
        },
        "description": {
          "description": "The payment description",
          "type": "string",
          "maxLength": 255
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "readOnly": true,
          "description": "The position in the sequence of retries",
          "type": "integer"
        },
        "retriedPaymentId": {
          "readOnly": true,
          "description": "The retried payment ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "billingAddress": {
          "description": "Billing Address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "createdBy": {
          "description": "The process that created this payment",
          "type": "string"
        },
        "updatedBy": {
          "description": "The process that updated this payment",
          "type": "string"
        },
        "status": {
          "description": "Payment status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "scheduled",
            "queued",
            "in-progress",
            "incomplete",
            "waiting-gateway",
            "suspended",
            "completed"
          ]
        },
        "result": {
          "description": "Payment result",
          "type": "string",
          "readOnly": true,
          "enum": [
            "approved",
            "declined",
            "canceled",
            "unknown"
          ]
        },
        "riskMetadata": {
          "description": "Risk metadata",
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ]
        },
        "createdTime": {
          "description": "Payment created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Payment updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/TransactionLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "PaymentCard": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The card identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID. Required if card is creating not from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "pan": {
          "description": "The card PAN (Primary Account Number). Required if card is creating not from Token",
          "type": "string"
        },
        "bin": {
          "description": "The card's bin (the PAN's first 6 digits)",
          "type": "string",
          "format": "bin",
          "readOnly": true
        },
        "last4": {
          "description": "The PAN's last 4 digits",
          "type": "string",
          "readOnly": true
        },
        "expYear": {
          "description": "Card's expiry year. Required if card is creating not from Token",
          "type": "integer"
        },
        "expMonth": {
          "description": "Card's expiry month. Required if card is creating not from Token",
          "type": "integer"
        },
        "cvv": {
          "description": "Card's cvv (card verification value). Required if card is creating not from Token",
          "type": "string"
        },
        "billingAddress": {
          "description": "The Billing Address. Required if card is creating not from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "token": {
          "description": "PaymentCardToken. Use without any other fields",
          "type": "string"
        },
        "safeHash": {
          "description": "The card's hash. Based on bin and last 4 digits of the PAN",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Payment Card status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "active",
            "expired",
            "inactive",
            "deactivated",
            "pending"
          ]
        },
        "brand": {
          "description": "Payment Card brand",
          "type": "string",
          "readOnly": true,
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Discover",
            "Maestro",
            "Solo",
            "Electron",
            "JCB",
            "Voyager",
            "Diners Club",
            "Switch",
            "Laser",
            "China UnionPay",
            "AstroPay Card"
          ]
        },
        "bankCountry": {
          "description": "Payment Card bank country",
          "type": "string",
          "readOnly": true
        },
        "bankName": {
          "description": "Payment Card bank name",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "Card created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Card updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "PaymentCardMigrationRequest": {
      "type": "object",
      "required": [
        "fromGatewayAccountId",
        "toGatewayAccountId",
        "paymentCardIds"
      ],
      "properties": {
        "fromGatewayAccountId": {
          "description": "An ID of Gateway Account cards should be migrated from",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "toGatewayAccountId": {
          "description": "An ID of Gateway Account cards should be migrated to",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "paymentCardIds": {
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "An array of payment card IDs",
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ]
          }
        }
      }
    },
    "PaymentCardMigrationResponse": {
      "type": "object",
      "properties": {
        "migratedCards": {
          "type": "integer",
          "description": "Amount of cards that were successfully migrated"
        }
      }
    },
    "PaymentInstrument": {
      "type": "object",
      "required": [
        "method"
      ],
      "discriminator": "method",
      "properties": {
        "method": {
          "$ref": "#/definitions/Method"
        }
      }
    },
    "ach": {
      "description": "ACH payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "bankAccountId"
          ],
          "properties": {
            "bankAccountId": {
              "description": "The bank account identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "cash": {
      "description": "Cash payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "properties": {
            "receivedBy": {
              "description": "The receiver's name",
              "type": "string"
            }
          }
        }
      ]
    },
    "payment-card": {
      "description": "Payment card payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "paymentCardId"
          ],
          "properties": {
            "paymentCardId": {
              "description": "The payment card identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "paypal": {
      "description": "PayPal payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "payPalAccountId"
          ],
          "properties": {
            "payPalAccountId": {
              "description": "The PayPal account identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "AmountAdjustment": {
      "type": "object",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "none",
            "partial",
            "discount"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "PaymentRetry": {
      "type": "object",
      "properties": {
        "attempts": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "scheduleInstruction": {
                "$ref": "#/definitions/CommonScheduleInstruction"
              },
              "paymentInstruction": {
                "$ref": "#/definitions/AmountAdjustment"
              }
            },
            "required": [
              "scheduleInstruction",
              "paymentInstruction"
            ]
          }
        },
        "afterAttemptPolicy": {
          "description": "The policy on the attempt finishes",
          "type": "string",
          "enum": [
            "none",
            "change-subscription-renewal-time"
          ]
        },
        "afterRetryEndPolicy": {
          "description": "The policy on the retry ends",
          "type": "string",
          "enum": [
            "none",
            "cancel-subscription"
          ]
        }
      },
      "required": [
        "attempts",
        "afterAttemptPolicy",
        "afterRetryEndPolicy"
      ]
    },
    "discount": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "The payment amount discount",
              "type": "number",
              "format": "float"
            },
            "type": {
              "description": "The payment amount discount type",
              "type": "string",
              "enum": [
                "percent",
                "fixed"
              ]
            }
          },
          "required": [
            "value",
            "type"
          ]
        }
      ]
    },
    "partial": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "The payment amount",
              "type": "number",
              "format": "float"
            },
            "type": {
              "description": "The payment amount type",
              "type": "string",
              "enum": [
                "percent",
                "fixed"
              ]
            }
          },
          "required": [
            "value",
            "type"
          ]
        }
      ]
    },
    "PaymentToken": {
      "type": "object",
      "required": [
        "method",
        "paymentInstrument"
      ],
      "properties": {
        "id": {
          "description": "The token identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentTokenInstrument"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "billingAddress": {
          "description": "The Address. Required if bank account is not created from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "PaymentTokenInstrument": {
      "type": "object",
      "description": "Payment Token instrument object",
      "properties": {
        "pan": {
          "description": "The card PAN (Primary Account Number)",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year",
          "type": "integer"
        },
        "cvv": {
          "description": "The CVV/CVC of the payment card",
          "type": "string"
        },
        "routingNumber": {
          "description": "Routing Number",
          "type": "integer"
        },
        "accountNumber": {
          "description": "AccountNumber",
          "type": "integer"
        },
        "accountType": {
          "description": "Account Type",
          "type": "string"
        },
        "bankName": {
          "description": "Bank name",
          "type": "string"
        }
      }
    },
    "PayPalAccount": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The PayPal identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID.",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "billingAddress": {
          "description": "The Customer's Billing Address.",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "username": {
          "description": "PayPal username.",
          "type": "string"
        },
        "status": {
          "description": "PayPal Account status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "inactive",
            "active",
            "deactivated"
          ]
        },
        "createdTime": {
          "description": "PayPal Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "PayPal Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            }
          ]
        }
      },
      "required": [
        "customerId",
        "billingAddress"
      ]
    },
    "Plan": {
      "type": "object",
      "required": [
        "name",
        "currency"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The plan name",
          "type": "string"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "currencySign": {
          "description": "Currency sign",
          "readOnly": true,
          "type": "string"
        },
        "isActive": {
          "description": "If the plan is not active, customers cannot subscribe to the plan (default to true)",
          "type": "boolean"
        },
        "description": {
          "description": "The plan description",
          "type": "string"
        },
        "richDescription": {
          "description": "The plan rich description - supports HTML",
          "type": "string"
        },
        "recurringAmount": {
          "description": "The amount that recurs according to the schedule",
          "type": "number",
          "format": "double"
        },
        "recurringPeriodUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "recurringPeriodLength": {
          "description": "The length of time (used with the recurringPeriodUnit)",
          "type": "integer"
        },
        "trialAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "trialPeriodUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "trialPeriodLength": {
          "description": "The length of time (used with the trialPeriodUnit)",
          "type": "integer"
        },
        "setupAmount": {
          "description": "The amount of a setup - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "expiredTime": {
          "description": "Time when the plan is not longer valid",
          "type": "string",
          "format": "date-time"
        },
        "contractTermUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "contractTermLength": {
          "description": "The length that corresponds with the contractTermUnit",
          "type": "integer"
        },
        "recurringPeriodLimit": {
          "description": "The number of times a subscription will rebill until the contract is over",
          "type": "integer"
        },
        "minQuantity": {
          "description": "Minimum quantity per order, defaults to 1",
          "type": "integer"
        },
        "maxQuantity": {
          "description": "Maximum quantity per order (NULL if no maximum)",
          "type": "integer"
        },
        "createdTime": {
          "description": "Plan created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Plan updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "PriceBasedShippingRate": {
      "type": "object",
      "required": [
        "name",
        "currency",
        "price"
      ],
      "properties": {
        "name": {
          "description": "The shipping rate name",
          "type": "string",
          "maxLength": 255
        },
        "minOrderSubtotal": {
          "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "maxOrderSubtotal": {
          "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "The shipping price - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "name"
      ],
      "description": "Your product includes digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.\n",
      "example": "{\n  \"id\": \"stringid\",\n  \"name\": \"Widget\",\n  \"description\": \"Fantastic widget\",\n  \"taxCategoryId\": null,\n  \"requiresShipping\": true,\n  \"accountingCode\": \"100\",\n  \"customFields\": [],\n  \"createdTime\": \"2015-08-27 13:45:12\",\n  \"updatedTime\": \"2015-08-27 13:45:12\",\n  \"_links\": [\n      {\n        \"rel\": \"self\",\n        \"href\": \"https://api.rebilly.com/v2.1/products/stringid\"\n      }\n  ]\n}\n",
      "properties": {
        "id": {
          "description": "The product identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The product name",
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "description": "The product description",
          "type": "string",
          "maxLength": 512
        },
        "taxCategoryId": {
          "description": "The product's tax category identifier string",
          "type": "string",
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ]
        },
        "requiresShipping": {
          "description": "If the product requires shipping, shipping calculations will be applied",
          "type": "boolean"
        },
        "accountingCode": {
          "description": "The product accounting code",
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "createdTime": {
          "description": "The product created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The product updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Profile": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The user identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "email": {
          "description": "The user email",
          "readOnly": true,
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "firstName": {
          "description": "User's first name",
          "readOnly": true,
          "type": "string"
        },
        "lastName": {
          "description": "User's last name",
          "readOnly": true,
          "type": "string"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "readOnly": true,
          "type": "string"
        },
        "mobilePhone": {
          "description": "The user mobile phone number",
          "readOnly": true,
          "type": "string"
        },
        "availableCurrencies": {
          "type": "array",
          "description": "An array of reporting currencies enabled for the merchant",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "reportingCurrency": {
          "description": "The user's ISO Alpha-3 code used for reports",
          "type": "string"
        },
        "totpRequired": {
          "description": "The user setting of two-factor authentification",
          "readOnly": true,
          "type": "boolean"
        },
        "totpSecret": {
          "description": "The user TOTP key for authentification app (if TOTP enabled)",
          "readOnly": true,
          "type": "string"
        },
        "totpUrl": {
          "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
          "readOnly": true,
          "type": "string",
          "format": "url"
        },
        "country": {
          "description": "The user country setting - two letter code",
          "readOnly": true,
          "type": "string"
        },
        "preferences": {
          "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
          "type": "object"
        }
      }
    },
    "ResetPassword": {
      "type": "object",
      "required": [
        "newPassword"
      ],
      "properties": {
        "newPassword": {
          "description": "New password",
          "type": "string",
          "format": "password"
        }
      }
    },
    "ResetPasswordToken": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "token": {
          "description": "The token's identifier string",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        },
        "password": {
          "description": "Token's password (only for POST)",
          "type": "string",
          "format": "password"
        },
        "credential": {
          "description": "Token's credential ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "Password expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ResourceCustomFields": {
      "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
      "type": "object"
    },
    "ResourceId": {
      "type": "string",
      "description": "The resource ID. Defaults to UUID v4",
      "maxLength": 50,
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
    },
    "RiskMetadata": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "The customer's IP",
          "type": "string",
          "format": "ipv4"
        },
        "isProxy": {
          "description": "True if customer's ip address is related to proxy",
          "type": "boolean",
          "readOnly": true
        },
        "isVpn": {
          "description": "True if customer's ip address is related to VPN",
          "type": "boolean",
          "readOnly": true
        },
        "isTor": {
          "description": "True if customer's ip address is related to TOR",
          "type": "boolean",
          "readOnly": true
        },
        "isHosting": {
          "description": "True if customer's ip address is related to hosting",
          "type": "boolean",
          "readOnly": true
        },
        "vpnServiceName": {
          "description": "VPN service name, if available",
          "type": "string",
          "readOnly": true
        },
        "isp": {
          "description": "Internet Service Provider name, if available",
          "type": "string",
          "readOnly": true
        },
        "country": {
          "description": "Country ISO Alpha-2 code for specified ipAddress",
          "maxLength": 2,
          "type": "string",
          "readOnly": true,
          "example": "US"
        },
        "city": {
          "description": "City for specified ipAddress",
          "type": "string",
          "readOnly": true,
          "example": "New York"
        },
        "latitude": {
          "description": "Latitude for specified ipAddress",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "longitude": {
          "description": "Longitude for specified ipAddress",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "postalCode": {
          "description": "Postal code for specified ipAddress",
          "type": "string",
          "maxLength": 10,
          "readOnly": true
        },
        "timeZone": {
          "description": "Time zone for specified ipAddress",
          "type": "string",
          "readOnly": true,
          "example": "America/New_York"
        },
        "accuracyRadius": {
          "description": "Accuracy radius for specified ipAddress (kilometers)",
          "type": "integer",
          "readOnly": true
        },
        "fingerprint": {
          "description": "The fingerprint",
          "type": "string"
        },
        "httpHeaders": {
          "description": "HTTP headers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "User-Agent": "Mozilla/5.0",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          }
        },
        "distance": {
          "description": "Distance between IP Address and Billing Address geolocation (kilometers)",
          "type": "integer",
          "readOnly": true
        },
        "score": {
          "description": "Risk score computed per all the factors",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "add-risk-score": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "type": "object",
          "description": "Add risk score",
          "properties": {
            "score": {
              "type": "integer",
              "default": 0
            }
          }
        }
      ]
    },
    "blacklist": {
      "description": "Add customer data to blacklist",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "customer-id",
                "email",
                "fingerprint",
                "ip-address",
                "payment-card-id"
              ]
            },
            "ttl": {
              "type": "integer",
              "description": "Blacklist TTL. Defaults to zero, meaning blacklist record won't expire ever.",
              "default": 0
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "cancel-scheduled-payments": {
      "description": "",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ]
    },
    "guess-payment-card-expiration": {
      "description": "",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ]
    },
    "pick-gateway-account": {
      "description": "",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "type": "object",
          "properties": {
            "pickInstruction": {
              "$ref": "#/definitions/GatewayAccountPickInstruction"
            }
          },
          "required": [
            "pickInstruction"
          ]
        }
      ]
    },
    "schedule-payment-retry": {
      "description": "",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/PaymentRetry"
        }
      ]
    },
    "schedule-payment": {
      "description": "",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "type": "object",
          "description": "The calculation instruction of scheduled time for payment",
          "properties": {
            "scheduleInstruction": {
              "$ref": "#/definitions/CommonScheduleInstruction"
            },
            "amountPolicy": {
              "type": "string",
              "enum": [
                "balance-outstanding",
                "invoice-total"
              ]
            }
          },
          "required": [
            "scheduleInstruction",
            "amountPolicy"
          ]
        }
      ]
    },
    "send-email": {
      "description": "",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/EmailNotification"
        }
      ]
    },
    "stop-subscriptions": {
      "description": "Stop active subscriptions",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ]
    },
    "trigger-webhook": {
      "description": "",
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/Webhook"
        }
      ]
    },
    "SendPreviewWebhook": {
      "description": "Trigger a test webhook",
      "allOf": [
        {
          "$ref": "#/definitions/Webhook"
        }
      ]
    },
    "SendTestEmail": {
      "description": "Send a test email",
      "allOf": [
        {
          "$ref": "#/definitions/EmailNotification"
        }
      ]
    },
    "EmailNotification": {
      "type": "object",
      "properties": {
        "credentialHash": {
          "type": "string",
          "description": "SMTP Credential identifier string."
        },
        "sender": {
          "type": "string",
          "description": "The sender address. The template palceholders are allowed."
        },
        "recipients": {
          "type": "array",
          "description": "The recipients addresses. The template palceholders are allowed.",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "cc": {
          "type": "array",
          "description": "The recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          }
        },
        "bcc": {
          "type": "array",
          "description": "The hidden recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          }
        },
        "subject": {
          "type": "string",
          "description": "The message subject. The template palceholders are allowed."
        },
        "bodyText": {
          "type": "string",
          "description": "Leave empty to use text from \"bodyHtml\" without tags.\nThe template palceholders are allowed.\n"
        },
        "bodyHtml": {
          "type": "string",
          "description": "Leave empty to recieve \"text/plain\" email.\nThe template palceholders are allowed.\n"
        }
      },
      "required": [
        "credentialHash",
        "sender",
        "recipients",
        "subject",
        "bodyText",
        "bodyHtml"
      ]
    },
    "GatewayAccountPickInstruction": {
      "type": "object",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "gateway-account-weights",
            "gateway-acquirer-weights"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "MatchedRule": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "id": {
          "description": "Event tracking id",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "event": {
          "$ref": "#/definitions/EventType"
        },
        "description": {
          "description": "Rule's description",
          "type": "string"
        },
        "rulesVersion": {
          "type": "integer",
          "description": "Rule version"
        },
        "occurredTime": {
          "description": "Time when event occurred.",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "context": {
          "type": "object",
          "description": "Event's context",
          "additionalProperties": {
            "type": "string"
          }
        },
        "processedRules": {
          "type": "object",
          "description": "Processed rules",
          "properties": {
            "name": {
              "type": "string",
              "description": "Rule name"
            },
            "actions": {
              "type": "array",
              "description": "Rule actions applied",
              "items": {
                "type": "string"
              }
            },
            "result": {
              "type": "string",
              "description": "Rule result"
            }
          }
        }
      }
    },
    "gateway-account-weights": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccountPickInstruction"
        },
        {
          "type": "object",
          "properties": {
            "weightedList": {
              "type": "array",
              "uniqueItems": true,
              "minimum": 0,
              "items": {
                "type": "object",
                "properties": {
                  "gatewayAccountId": {
                    "$ref": "#/definitions/ResourceId"
                  },
                  "weight": {
                    "type": "integer"
                  }
                },
                "required": [
                  "gatewayAccountId",
                  "weight"
                ]
              },
              "example": "[\n  {\"gatewayAccountId\": \"my_gateway_account_1\", \"weight\": 80},\n  {\"gatewayAccountId\": \"my_gateway_account_2\", \"weight\": 20}\n]\n"
            }
          },
          "required": [
            "weightedList"
          ]
        }
      ]
    },
    "gateway-acquirer-weights": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccountPickInstruction"
        },
        {
          "type": "object",
          "properties": {
            "weightedList": {
              "type": "array",
              "uniqueItems": true,
              "minimum": 0,
              "items": {
                "type": "object",
                "properties": {
                  "gatewayName": {
                    "$ref": "#/definitions/GatewayName"
                  },
                  "acquirerName": {
                    "$ref": "#/definitions/AcquirerName"
                  },
                  "weight": {
                    "type": "integer"
                  }
                },
                "required": [
                  "gatewayName",
                  "acquirerName",
                  "weight"
                ]
              },
              "example": "[\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"AIB\", \"weight\": 80},\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"B+S\", \"weight\": 20}\n"
            }
          },
          "required": [
            "weightedList"
          ]
        }
      ]
    },
    "Rule": {
      "type": "object",
      "description": "The rule",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        },
        "final": {
          "description": "Whether rule is final, meaning stop further matching rules if this is matched",
          "type": "boolean",
          "default": true
        },
        "criteria": {
          "$ref": "#/definitions/Condition"
        },
        "actions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/RuleAction"
          }
        }
      },
      "required": [
        "name",
        "actions"
      ]
    },
    "RuleAction": {
      "type": "object",
      "discriminator": "name",
      "properties": {
        "name": {
          "type": "string",
          "description": "The action name",
          "enum": [
            "blacklist",
            "cancel-scheduled-payments",
            "guess-payment-card-expiration",
            "pick-gateway-account",
            "schedule-payment-retry",
            "schedule-payment",
            "send-email",
            "trigger-webhook",
            "stop-subscriptions",
            "add-risk-score"
          ]
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        }
      },
      "required": [
        "name"
      ]
    },
    "RuleSet": {
      "type": "object",
      "description": "Set of rules for particular event",
      "properties": {
        "version": {
          "type": "integer",
          "readOnly": true
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        },
        "updatedTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      },
      "required": [
        "rules"
      ]
    },
    "RuleSetHistoryItem": {
      "type": "object",
      "description": "Version of rules",
      "readOnly": true,
      "properties": {
        "version": {
          "type": "integer"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "_links": {
          "type": "array",
          "description": "The links related to a resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/RuleSetHistoryLink"
            },
            {
              "$ref": "#/definitions/RuleSetVersionLink"
            }
          ]
        }
      }
    },
    "RuleSetVersion": {
      "type": "object",
      "description": "Version of rules",
      "readOnly": true,
      "properties": {
        "version": {
          "type": "integer"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Webhook": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ]
        },
        "url": {
          "type": "string",
          "format": "uri"
        },
        "query": {
          "type": "object",
          "description": "The URI parameters",
          "additionalProperties": {
            "type": "string",
            "example": {
              "param1": "value1",
              "param2": "value2"
            }
          }
        },
        "body": {
          "type": "string"
        },
        "credentialHash": {
          "type": "string",
          "description": "Webhook Credential identifier string."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookHeader"
          }
        }
      },
      "required": [
        "method",
        "url"
      ]
    },
    "WebhookHeader": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        },
        "value": {
          "type": "string",
          "example": {
            "Header1": "value1",
            "Header2": "value2;value3"
          }
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "CommonScheduleInstruction": {
      "type": "object",
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "auto",
            "immediately",
            "date-interval",
            "day-of-month",
            "day-of-week"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "CustomEventScheduleInstruction": {
      "type": "object",
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "date-interval",
            "day-of-month",
            "day-of-week"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "DayOfWeek": {
      "type": "string",
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    "auto": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        }
      ]
    },
    "date-interval": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "type": "object",
          "properties": {
            "duration": {
              "type": "integer",
              "description": "The number of the units",
              "minimum": 1
            },
            "unit": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "required": [
            "duration",
            "unit"
          ]
        }
      ]
    },
    "day-of-month": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "type": "object",
          "properties": {
            "day": {
              "type": "integer",
              "minimum": 1,
              "maximum": 31,
              "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n"
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ]
        }
      ]
    },
    "day-of-week": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "type": "object",
          "properties": {
            "day": {
              "$ref": "#/definitions/DayOfWeek"
            },
            "week": {
              "type": "string",
              "default": "next",
              "enum": [
                "next",
                "first-in-month",
                "last-in-month"
              ]
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ]
        }
      ]
    },
    "immediately": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        }
      ]
    },
    "Time": {
      "type": "string",
      "format": "date-time",
      "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z(\\+|\\-)([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])?$"
    },
    "TimeUnit": {
      "type": "string",
      "enum": [
        "second",
        "seconds",
        "minute",
        "minutes",
        "hour",
        "hours",
        "day",
        "days",
        "month",
        "months",
        "year",
        "years"
      ]
    },
    "ServerTimestamp": {
      "type": "string",
      "description": "Read-only timestamp, automatically assigned on back-end.",
      "format": "date-time",
      "readOnly": true
    },
    "Session": {
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "id": {
          "description": "The session identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "token": {
          "description": "The session's token used for authentication",
          "type": "string"
        },
        "permissions": {
          "description": "The session's permissions. See the format in example",
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ]
        },
        "userId": {
          "description": "The user identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdTime": {
          "description": "Session created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Session updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ShippingZone": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "The shipping zone identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The shipping zone name",
          "type": "string",
          "maxLength": 255
        },
        "countries": {
          "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
          "type": "array",
          "items": {
            "description": "Country ISO Alpha-2 code",
            "type": "string",
            "pattern": "^[A-Z]{2}$"
          }
        },
        "rates": {
          "description": "Price-based shipping rate instructions",
          "type": "array",
          "items": {
            "description": "Price based shipping rate instruction",
            "allOf": [
              {
                "$ref": "#/definitions/PriceBasedShippingRate"
              }
            ]
          }
        },
        "isDefault": {
          "description": "Is this Shipping Zone default",
          "readOnly": true
        },
        "createdTime": {
          "description": "The shipping zone created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The shipping zone updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Signin": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "description": "Email",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string",
          "format": "password"
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Signup": {
      "type": "object",
      "required": [
        "email",
        "company",
        "firstName",
        "lastName",
        "businessPhone",
        "password",
        "website"
      ],
      "properties": {
        "email": {
          "description": "The user email",
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "company": {
          "description": "The user's company name",
          "type": "string"
        },
        "firstName": {
          "description": "The user first name",
          "type": "string"
        },
        "lastName": {
          "description": "The user last name",
          "type": "string"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "password": {
          "description": "The user password",
          "type": "string",
          "format": "password"
        },
        "website": {
          "description": "The user's website address",
          "type": "string"
        },
        "currencies": {
          "description": "An array of currencies codes",
          "type": "array",
          "default": [
            "USD"
          ],
          "items": {
            "description": "3 letters ISO 4217 currency code",
            "type": "string"
          }
        },
        "merchantCategoryCode": {
          "description": "Merchant category code. Defaults to \"Computer Software Stores\"",
          "type": "integer",
          "default": 5734
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The API status. If everything is ok - value is 'ok'",
          "type": "string",
          "readOnly": true,
          "enum": [
            "ok"
          ]
        },
        "time": {
          "description": "Current time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "customerId",
        "planId",
        "websiteId"
      ],
      "properties": {
        "id": {
          "description": "The Subscription identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Unique id for each customer",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "planId": {
          "description": "Unique id for each plan",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Unique id for each website",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "initialInvoiceId": {
          "description": "Unique id for the initial invoice",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "deliveryAddress": {
          "description": "Delivery address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "billingAddress": {
          "description": "Billing address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "status": {
          "description": "Subscription status",
          "type": "string",
          "readOnly": true
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        },
        "autopay": {
          "description": "Autopay determines if a payment attempt will be automatic",
          "type": "boolean",
          "default": true
        },
        "inTrial": {
          "description": "True if the subscription is currently in a trial period",
          "type": "boolean",
          "readOnly": true
        },
        "rebillNumber": {
          "description": "The current period number",
          "type": "integer",
          "readOnly": true
        },
        "canceledBy": {
          "description": "Canceled by",
          "type": "string",
          "readOnly": true,
          "enum": [
            "merchant",
            "customer",
            "rebilly"
          ]
        },
        "cancelCategory": {
          "description": "Cancel category",
          "type": "string",
          "readOnly": true,
          "enum": [
            "billing-failure",
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "never-started",
            "switched-plan",
            "other"
          ]
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "riskMetadata": {
          "description": "Risk metadata",
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ]
        },
        "startTime": {
          "description": "Subscription start time",
          "type": "string",
          "format": "date-time"
        },
        "activationTime": {
          "description": "Subscription activation time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "endTime": {
          "description": "Subscription end time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "renewalTime": {
          "description": "Subscription renewal time",
          "type": "string",
          "format": "date-time"
        },
        "canceledTime": {
          "description": "Subscription canceled time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Subscription created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Subscription updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/PlanLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "SubscriptionCancel": {
      "type": "object",
      "required": [
        "policy",
        "canceledBy",
        "cancelCategory"
      ],
      "properties": {
        "policy": {
          "description": "Cancel policy",
          "type": "string",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ]
        },
        "canceledBy": {
          "description": "Canceled by",
          "type": "string",
          "enum": [
            "merchant",
            "customer"
          ]
        },
        "cancelCategory": {
          "description": "Cancel category",
          "type": "string",
          "enum": [
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "other"
          ]
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "SubscriptionSwitch": {
      "type": "object",
      "required": [
        "planId",
        "policy"
      ],
      "properties": {
        "planId": {
          "description": "The plan identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "policy": {
          "description": "Switch policy",
          "type": "string",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ]
        },
        "websiteId": {
          "description": "The website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        }
      }
    },
    "TaxCategory": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The tax category identifier string",
          "type": "string",
          "readOnly": true,
          "maxLength": 50,
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ]
        },
        "description": {
          "description": "The tax category description",
          "type": "string",
          "maxLength": 512
        },
        "taxProvider": {
          "description": "The tax category maps to a provider",
          "type": "string",
          "enum": [
            "tax-jar"
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ThreeDSecure": {
      "type": "object",
      "required": [
        "enrolled",
        "enrollmentEci",
        "customerId",
        "gatewayAccountId",
        "paymentCardId",
        "websiteId",
        "currency",
        "amount"
      ],
      "properties": {
        "id": {
          "description": "The 3D Secure entry identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Related customer ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "gatewayAccountId": {
          "description": "Related gateway account ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "paymentCardId": {
          "description": "Related payment card ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Related Website ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3DSecure",
          "type": "string",
          "enum": [
            "Y",
            "N",
            "U"
          ]
        },
        "enrollmentEci": {
          "description": "The 3D Secure entry enrollment eci",
          "type": "string"
        },
        "eci": {
          "description": "The 3D Secure entry electronic commerce indicator",
          "type": "integer"
        },
        "cavv": {
          "description": "The 3D Secure entry cardholder authentication verification value",
          "type": "string"
        },
        "xid": {
          "description": "The 3D Secure entry transaction Id",
          "type": "string"
        },
        "payerAuthResponseStatus": {
          "description": "The 3D Secure entry Auth Response Status",
          "type": "string",
          "enum": [
            "Y",
            "N",
            "U",
            "A"
          ]
        },
        "signatureVerification": {
          "description": "If signature was verified",
          "type": "string",
          "enum": [
            "Y",
            "N"
          ]
        },
        "amount": {
          "description": "Transaction amount",
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "createdTime": {
          "description": "The 3D Secure entry created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ApiTracking": {
      "type": "object",
      "description": "Tracking API Requests.",
      "readOnly": true,
      "properties": {
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "status": {
          "type": "integer",
          "description": "HTTP response code"
        },
        "url": {
          "type": "string",
          "description": "API request address"
        },
        "method": {
          "type": "string",
          "description": "HTTP method",
          "enum": [
            "HEAD",
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ]
        },
        "request": {
          "type": "string",
          "description": "Request JSON-string"
        },
        "response": {
          "type": "string",
          "description": "Response JSON-string"
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "User-Agent": "Mozilla/5.0",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          }
        },
        "responseHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "Rate-Limit-Limit": 5000,
            "Rate-Limit-Remaining": 4999,
            "Rate-Limit-Reset": "Mon, 31 Jul 2017 04:16:00 +0000"
          }
        },
        "user": {
          "type": "object",
          "description": "The user who has made a request",
          "readOnly": true,
          "properties": {
            "userId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "apiKeyId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "email": {
              "description": "The user email",
              "type": "string",
              "format": "email"
            },
            "firstName": {
              "description": "The user first name",
              "type": "string"
            },
            "lastName": {
              "description": "The user last name",
              "type": "string"
            },
            "ipAddress": {
              "type": "string",
              "description": "Client IP address",
              "format": "ipv4"
            },
            "userAgent": {
              "description": "The software that is acting on behalf of a user",
              "type": "string"
            },
            "fingerprint": {
              "description": "The user device fingerprint hash",
              "type": "string"
            },
            "isSupport": {
              "description": "If user from support",
              "type": "boolean"
            }
          }
        },
        "duration": {
          "type": "integer",
          "description": "Request duration in milliseconds"
        },
        "createdTime": {
          "description": "The log created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "SubscriptionTracking": {
      "type": "object",
      "description": "Tracking subscription log",
      "readOnly": true,
      "properties": {
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "subscriptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "invoiceItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "result": {
          "type": "string",
          "description": "Subscription's result",
          "enum": [
            "created",
            "postponed",
            "stopped",
            "error"
          ]
        },
        "message": {
          "type": "string",
          "description": "It contains the transaction number and renewal time"
        },
        "createdTime": {
          "description": "The log created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "WebhookTracking": {
      "type": "object",
      "description": "Webhook Tracking Requests.",
      "readOnly": true,
      "properties": {
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "eventType": {
          "$ref": "#/definitions/EventType"
        },
        "url": {
          "type": "string",
          "description": "Url where webhook was sent"
        },
        "method": {
          "type": "string",
          "description": "HTTP method which was used to send webhook",
          "example": "POST"
        },
        "headers": {
          "type": "object",
          "description": "HTTP headers which were used to send webhook",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "My-Header": "Cool-Value"
          }
        },
        "responseCode": {
          "type": "integer",
          "description": "HTTP code response"
        },
        "responseBody": {
          "type": "string",
          "description": "Response body received"
        },
        "payload": {
          "type": "string",
          "description": "Webhook's payload"
        },
        "source": {
          "type": "string",
          "description": "The Webhook's source",
          "enum": [
            "webhooks",
            "rules"
          ]
        },
        "attempt": {
          "type": "integer",
          "description": "The Webhook's attempt number"
        },
        "sentTime": {
          "description": "Sent time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "initiatedTime": {
          "description": "Initiated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "The log created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "WebsiteWebhookTracking": {
      "type": "object",
      "description": "Webhook Tracking Requests.",
      "readOnly": true,
      "properties": {
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "eventName": {
          "type": "string",
          "description": "Event name for which webhook was called"
        },
        "status": {
          "type": "string",
          "description": "Event's status",
          "enum": [
            "fail",
            "success"
          ]
        },
        "response": {
          "type": "integer",
          "description": "HTTP code response"
        },
        "pushData": {
          "type": "string",
          "description": "Event's data information JSON-string"
        },
        "sentTime": {
          "description": "Sent time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "nextSendTime": {
          "description": "Next send time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "The log created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "TransactionGatewayLog": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "headers": {
          "description": "The request headers",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "description": "The request URL",
          "type": "string"
        },
        "request": {
          "description": "The request body",
          "type": "string"
        },
        "response": {
          "description": "The response body",
          "type": "string"
        },
        "duration": {
          "description": "The request time, msec",
          "type": "integer"
        },
        "createdTime": {
          "description": "The log entry created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/TransactionLink"
            }
          ]
        }
      }
    },
    "TransactionRefund": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "Refund amount",
          "type": "number",
          "format": "double"
        }
      }
    },
    "RedirectUrls": {
      "type": "object",
      "description": "The redirect URIs",
      "required": [
        "error",
        "success",
        "decline",
        "cancel"
      ],
      "properties": {
        "error": {
          "type": "string",
          "format": "url"
        },
        "success": {
          "type": "string",
          "format": "url"
        },
        "decline": {
          "type": "string",
          "format": "url"
        },
        "cancel": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "ThreeDSecureResult": {
      "type": "object",
      "readOnly": true,
      "required": [
        "enrolled",
        "authenticated",
        "liability"
      ],
      "properties": {
        "enrolled": {
          "description": "Is the cardholder enrolled in 3D Secure",
          "type": "string",
          "enum": [
            "yes",
            "no",
            "invalid card/timeout",
            "unavailable"
          ]
        },
        "authenticated": {
          "description": "The 3D Secure entry Auth Response Status",
          "type": "string",
          "enum": [
            "yes",
            "no",
            "not applicable",
            "attempted"
          ]
        },
        "liability": {
          "type": "string",
          "enum": [
            "protected",
            "not protected",
            "protected (attempt)"
          ]
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The transaction identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "Transaction type",
          "type": "string",
          "readOnly": true,
          "enum": [
            "authorize",
            "capture",
            "credit",
            "refund",
            "sale",
            "void"
          ]
        },
        "status": {
          "description": "Transaction status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "completed",
            "connection-error",
            "never-sent",
            "pending",
            "sending",
            "suspended",
            "timeout",
            "waiting-capture",
            "waiting-refund"
          ]
        },
        "result": {
          "description": "Transaction result",
          "type": "string",
          "readOnly": true,
          "enum": [
            "approved",
            "canceled",
            "declined",
            "unknown"
          ]
        },
        "amount": {
          "description": "The transactions's amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "currency": {
          "description": "The transactions's currency",
          "type": "string",
          "readOnly": true
        },
        "parentTransactionId": {
          "description": "The transactions's parent ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "childTransactions": {
          "description": "The child transaction IDs",
          "readOnly": true,
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "invoiceIds": {
          "description": "The invoice IDs related to transaction",
          "readOnly": true,
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "subscriptionIds": {
          "description": "The subscription IDs related to transaction",
          "readOnly": true,
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "isRebill": {
          "type": "boolean",
          "readOnly": true
        },
        "rebillNumber": {
          "description": "The transactions's rebill number",
          "type": "integer",
          "readOnly": true
        },
        "gatewayAccountId": {
          "description": "The transactions's Gateway Account ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "gatewayTransactionId": {
          "description": "The gateway's transaction ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "gateway": {
          "type": "object",
          "description": "The related gateway information",
          "readOnly": true,
          "properties": {
            "response": {
              "description": "The gateway's response",
              "type": "object",
              "properties": {
                "code": {
                  "description": "The gateway's response code",
                  "type": "string"
                },
                "message": {
                  "description": "The gateway's response message",
                  "type": "string"
                },
                "type": {
                  "description": "The gateway's response type",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw, unmapped gateway's response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw, unmapped gateway's response message",
                  "type": "string"
                }
              }
            },
            "avsResponse": {
              "description": "The AVS gateway's response",
              "type": "object",
              "properties": {
                "code": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "message": {
                  "description": "The raw response message",
                  "type": "string"
                }
              }
            },
            "cvvResponse": {
              "description": "The CVV gateway's response",
              "type": "object",
              "properties": {
                "code": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "message": {
                  "description": "The raw response message",
                  "type": "string"
                }
              }
            }
          }
        },
        "gatewayName": {
          "description": "Payment Gateway name, available only when transaction use gateway, else null",
          "type": "string",
          "readOnly": true
        },
        "acquirerName": {
          "description": "Acquirer name, available only when transaction use gateway, else null",
          "type": "string",
          "readOnly": true
        },
        "websiteId": {
          "description": "Website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "customerId": {
          "description": "Customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "method": {
          "description": "Payment Method",
          "allOf": [
            {
              "$ref": "#/definitions/Method"
            }
          ]
        },
        "velocity": {
          "description": "The number of transactions by the same customer in the past 24 hours",
          "type": "integer"
        },
        "bin": {
          "description": "Payment Card BIN",
          "type": "string",
          "format": "bin",
          "readOnly": true
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "billingAddress": {
          "description": "Billing Address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "has3ds": {
          "type": "boolean",
          "readOnly": true
        },
        "3ds": {
          "allOf": [
            {
              "$ref": "#/definitions/ThreeDSecureResult"
            }
          ]
        },
        "hasDcc": {
          "description": "True if transaction has Dynamic Currency Conversion applied",
          "type": "boolean",
          "readOnly": true
        },
        "dcc": {
          "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false",
          "type": "object",
          "readOnly": true,
          "properties": {
            "base": {
              "type": "object",
              "description": "Initial amount and currency to convert from",
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "double"
                },
                "currency": {
                  "type": "string"
                }
              }
            },
            "quote": {
              "type": "object",
              "description": "Suggested amount and currency to convert to",
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "double"
                },
                "currency": {
                  "type": "string"
                }
              }
            },
            "usdMarkup": {
              "description": "The amount of markup translated to USD",
              "type": "number",
              "format": "double"
            },
            "outcome": {
              "type": "string",
              "description": "Dynamic Currency Conversion outcome",
              "enum": [
                "rejected",
                "selected",
                "unknown"
              ]
            }
          }
        },
        "riskScore": {
          "description": "The transactions's risk score",
          "type": "integer",
          "readOnly": true
        },
        "riskMetadata": {
          "description": "Risk metadata",
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ]
        },
        "redirectUrls": {
          "$ref": "#/definitions/RedirectUrls"
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "type": "integer",
          "readOnly": true,
          "description": "The position in the sequence of retries"
        },
        "retriedTransactionId": {
          "readOnly": true,
          "description": "The retried transaction ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "retriesResult": {
          "type": "string",
          "readOnly": true,
          "description": "Retries sequence result",
          "enum": [
            "approved",
            "canceled",
            "declined",
            "scheduled"
          ]
        },
        "isRetry": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if this transaction is retry."
        },
        "description": {
          "type": "string",
          "description": "The payment description",
          "maxLength": 255
        },
        "isDisputed": {
          "description": "True if transaction is disputed",
          "type": "boolean",
          "readOnly": true
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "scheduledTime": {
          "type": "string",
          "description": "The time the transaction is scheduled for collection",
          "format": "date-time"
        },
        "processedTime": {
          "description": "Transaction processed time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Transaction created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Transaction updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/GatewayAccountLink"
            },
            {
              "$ref": "#/definitions/PaymentCardLink"
            },
            {
              "$ref": "#/definitions/ParentTransactionLink"
            },
            {
              "$ref": "#/definitions/RetriedTransactionLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            },
            {
              "$ref": "#/definitions/CancelUrlLink"
            },
            {
              "$ref": "#/definitions/RefundUrlLink"
            },
            {
              "$ref": "#/definitions/DisputeLink"
            }
          ]
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "description": "Current user's password - used when requesting password change",
          "type": "string",
          "format": "password"
        },
        "newPassword": {
          "description": "New user's password - used when requesting password change",
          "type": "string",
          "format": "password"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "properties": {
        "id": {
          "description": "The user identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "email": {
          "description": "The user email",
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "firstName": {
          "description": "User's first name",
          "type": "string"
        },
        "lastName": {
          "description": "User's last name",
          "type": "string"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "mobilePhone": {
          "description": "The user mobile phone number",
          "type": "string"
        },
        "password": {
          "description": "User's password. If not provided, password reset email will be sent",
          "type": "string",
          "format": "password"
        },
        "permissions": {
          "description": "The user's permissions. See the format in example",
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ]
        },
        "createdTime": {
          "description": "The user created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The user updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "loginTime": {
          "description": "The user last login time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "reportingCurrency": {
          "description": "The user's ISO Alpha-3 code used for reports",
          "type": "string"
        },
        "availableCurrencies": {
          "type": "array",
          "description": "An array of reporting currencies enabled for the merchant",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "totpRequired": {
          "description": "The user setting of two-factor authentification",
          "type": "boolean"
        },
        "totpSecret": {
          "description": "The user TOTP key for authentification app (if TOTP enabled)",
          "type": "string"
        },
        "totpUrl": {
          "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
          "type": "string",
          "format": "url"
        },
        "status": {
          "description": "The user status",
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "pending-confirmation"
          ],
          "readOnly": true
        },
        "country": {
          "description": "The user country setting - two letter code",
          "type": "string"
        },
        "preferences": {
          "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
          "type": "object"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "UserPermissions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "resourceName": {
            "type": "string",
            "enum": [
              "3dsecure",
              "api-keys",
              "api-tracking",
              "authentication-options",
              "authentication-tokens",
              "bank-accounts",
              "blacklists",
              "checkout-pages",
              "contacts",
              "coupons",
              "coupons-redemptions",
              "credentials",
              "custom-events",
              "custom-fields",
              "customers",
              "disputes",
              "events",
              "gateway-accounts",
              "invoices",
              "layouts",
              "lead-sources",
              "lists",
              "matched-rules",
              "notes",
              "oct-batch",
              "organizations",
              "password-tokens",
              "payments",
              "payment-cards",
              "payment-cards-migrations",
              "paypal-accounts",
              "plans",
              "reports",
              "reset-sandbox",
              "rulesets",
              "sessions",
              "subscriptions",
              "subscription-tracking",
              "tokens",
              "transactions",
              "users",
              "webhook",
              "webhook-tracking",
              "websites"
            ]
          },
          "methods": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "HEAD",
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ]
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceId"
            }
          }
        }
      },
      "example": [
        {
          "resourceName": "plans",
          "methods": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "DELETE"
          ]
        },
        {
          "resourceName": "invoices",
          "methods": [
            "GET",
            "HEAD"
          ],
          "resourceIds": [
            "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
            "1586f35x-4f6c-483z-a0a9-2c4y21f77a21"
          ]
        },
        {
          "resourceName": null,
          "methods": null,
          "resourceIds": null
        }
      ]
    },
    "WebhookAuthorization": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "The authorization type",
          "enum": [
            "none",
            "basic",
            "digest",
            "oauth1"
          ],
          "default": "none"
        }
      },
      "required": [
        "type"
      ]
    },
    "basic": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string",
              "format": "password"
            }
          },
          "required": [
            "username",
            "password"
          ]
        }
      ]
    },
    "digest": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string",
              "format": "password"
            }
          },
          "required": [
            "username",
            "password"
          ]
        }
      ]
    },
    "oauth1": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "type": "object",
          "properties": {
            "consumerKey": {
              "type": "string"
            },
            "consumerSecret": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "tokenSecret": {
              "type": "string"
            }
          },
          "required": [
            "consumerKey",
            "consumerSecret",
            "token",
            "tokenSecret"
          ]
        }
      ]
    },
    "WebhookCredential": {
      "type": "object",
      "description": "Webhook credential",
      "properties": {
        "hash": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "host": {
          "type": "string",
          "description": "The host name"
        },
        "auth": {
          "$ref": "#/definitions/WebhookAuthorization"
        }
      },
      "required": [
        "host"
      ]
    },
    "Website": {
      "type": "object",
      "required": [
        "name",
        "url",
        "servicePhone",
        "serviceEmail"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The website's name",
          "type": "string"
        },
        "url": {
          "description": "The website's domain address",
          "type": "string"
        },
        "servicePhone": {
          "description": "The website's customer service phone number",
          "type": "string"
        },
        "serviceEmail": {
          "description": "The website's customer service email address",
          "type": "string",
          "format": "email"
        },
        "createdTime": {
          "description": "Website created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Website updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            }
          ]
        }
      }
    }
  }
}
