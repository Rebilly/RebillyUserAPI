{
  "openapi": "3.0.0",
  "info": {
    "version": "2.1",
    "title": "Rebilly User API",
    "contact": {
      "name": "Rebilly API Support",
      "url": "https://www.rebilly.com/contact/",
      "email": "integrations@rebilly.com"
    },
    "license": {
      "name": "Rebilly",
      "url": "https://www.rebilly.com/api-license/"
    },
    "termsOfService": "https://www.rebilly.com/terms/",
    "x-logo": {
      "url": "https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg",
      "backgroundColor": "#0033A0"
    },
    "description": "# Introduction\nThis document covers APIs mostly intended for consumption by Rebilly's\nFrontend GUI [app](https://app.rebilly.com).  However, any client is welcome\nto use these APIs.  Our main API docs can be [found here](https://rebilly.github.io/RebillyAPI/).\n\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nor [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).\n\n# Authentication\nWhen you sign up for an account, you are given your first API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.\n- [Secret API key](#section/Authentication/SecretApiKey): used for requests made from the server side. Never share these keys. Keep them guarded and secure\n- [Publishable API key](#section/Authentication/PublishableApiKey): used for requests from the client side. For now can only be used on the [Tokens resource](https://rebilly.github.io/RebillyAPI/#tag/Payment-Tokens/paths/~1tokens/post)\n- [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time\n\nNever share your secret keys. Keep them guarded and secure.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# PHP SDK\nFor all PHP SDK examples provided in this spec you will need to configure `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n\n# Using filter\nRebilly provides collections filtering. You can use `?filter` param on collection to define which records should be shown in the response.\n\nHere is filter format description:\n\n- Fields and values in filter are separated with `:`: `?filter=firstName:John`.\n\n- Fields in filter are separated with `;`: `?filter=firstName:John;lastName:Doe`.\n\n- You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`.\n\n- To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,Bob`. This filter rule will exclude all Johns and Bobs from the response.\n\n- You can use range filters like this: `?filter=amount:1..10`.\n\n- You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`.\n\n- You can create some [predefined values lists](https://rebilly.github.io/RebillyUserAPI/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`\n"
  },
  "tags": [
    {
      "name": "API Keys",
      "description": "Always keep your API Keys private. When creating your API keys,\nyou can restrict them to a given set of permissions.\nIn addition to your API Keys, you may use\nJSON Web Tokens (JWT) to authenticate to the API.  See\nour [Sessions](https://rebilly.github.io/RebillyUserAPI/#tag/JWT-Session) resource for more information.\n"
    },
    {
      "name": "Checkout Pages",
      "description": "Hosted checkout pages can be configured here.  You can customize the theme\nand content and more that appears on your hosted checkout pages.\n"
    },
    {
      "name": "Custom Events",
      "description": "If system events can't solve your problems, you are able to create a custom event\nthat can fit your requirements, and use it to solve your own business logic.\n\n\"Don't conform to the rules. Create the rules.\"\nRather than adapt your workflow and business, Rebilly can align with your business\nobjectives by giving you the power to automate certain behaviors when key events happen.\nYou can use this to your advantage to mitigate risk, maximize conversions and minimize costs.\nYou have the controls at your fingertips here. If you need more control,\nor help dialing in on a strategy, feel free to contact us.\n\nWhen an event happens, it triggers the evaluation of conditions (that you set up),\nin order from top to bottom. If the condition is met, the corresponding actions are executed.\nThe conditions continue to be checked until either all of the conditions have been executed,\nor a special \"stop\" action is executed.\n"
    },
    {
      "name": "Custom Event Rules",
      "description": "Custom Events Rules description\n"
    },
    {
      "name": "Email Credentials",
      "description": "Get and create SMTP credential hashes.\n"
    },
    {
      "name": "Scheduled Custom Events",
      "description": "Scheduled Custom Events description\n"
    },
    {
      "name": "Gateway Accounts",
      "description": "Gateway accounts connect payment request to third party networks and platforms.\n"
    },
    {
      "name": "Layouts",
      "description": "Layouts are used to hold collections of plans. A layout can be used to\npower a pricing page. You can make multiple layouts, and use rules to\ntarget them to different audiences.\n"
    },
    {
      "name": "Lists",
      "description": "Lists contain sets of values and may be referenced within Rules criteria.\n\nList order may not be maintained and duplicates may be removed.\n\nYou may grant permissions to edit Lists to different people than those who can edit Rules.\nIt may be useful if your workflow involves frequent updates to value sets used in criteria.\n"
    },
    {
      "name": "Payment Cards",
      "description": "Payment cards are a type of payment instrument used for credit and debit card sales.\n"
    },
    {
      "name": "Notes",
      "description": "Leave notes on a customer record to have a handy location to share with\nothers who may interface with the customer.  It's great for customer service.\n"
    },
    {
      "name": "Organizations",
      "description": "Organizations include the name and address of the entities related to your\naccount. An account may be multi-national, and support multiple\norganizations. Note: Organizations are share between \"Live\" and \"Sandbox\"\n"
    },
    {
      "name": "Profile",
      "description": "A Profile represents the person currently logged in to Rebilly.\n"
    },
    {
      "name": "Rebilly API",
      "description": "The Rebilly API is the main API commonly integrated by 3rd parties.  You may see\nthe [Rebilly API Documentation here](https://rebilly.github.io/RebillyAPI/).\n"
    },
    {
      "name": "Reports API",
      "description": "The Rebilly Reporting API is currently experimental.  You may see\nthe [Reports API Documentation here](https://rebilly.github.io/RebillyReportsAPI/).\n"
    },
    {
      "name": "Reset password",
      "description": "When a password reset is requested, an email with a token is sent. Upon receiving the email\nthe user then needs to click a link and choose a new password.\n"
    },
    {
      "name": "Rules",
      "description": "\"Don't conform to the rules. Create the rules.\"\nRather than adapt your workflow and business, Rebilly can align with your business\nobjectives by giving you the power to automate certain behaviors when key events happen.\nYou can use this to your advantage to mitigate risk, maximize conversions and minimize costs.\nYou have the controls at your fingertips here. If you need more control,\nor help dialing in on a strategy, feel free to contact us.\n\nWhen an event happens, it triggers the evaluation of conditions (that you set up),\nin order from top to bottom. If the condition is met, the corresponding actions are executed.\nThe conditions continue to be checked until either all of the conditions have been executed,\nor a special \"stop\" action is executed.\n"
    },
    {
      "name": "JWT Session",
      "description": "A session contains a token, which is a JSON Web Token.  The token is created\nwith a user's signin credentials.\n\nThis token can be used to authenticate to the API.  In addition, the session can be set to\nexpire at a particular time. Use the token to then authenticate for further requests to the Rebilly API.\n\nThe token should be kept private, but could be stored on the user's browser\nclient to simulate a \"session\".\n"
    },
    {
      "name": "Status",
      "description": "Check the status of the Rebilly API (no authentication required).\n"
    },
    {
      "name": "Tracking",
      "description": "Tracking is a layer for accessing all the activity (API requests,\nsubscriptions, webhooks, events, etc.), thus providing easier\ndebugging and issues auditing.\n"
    },
    {
      "name": "Users",
      "description": "A User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.\n"
    },
    {
      "name": "Websites",
      "description": "A Website represents the website/brand that customers interact with... You\ncould think of it like a brand.  For example, Nestle owns Perrier and Purina\nand PowerBar.\n\nWe recognize that some enterprises have more than one website (or brand).  The\nwebsite is related to each invoice and each payment gateway account.  This feature\nwould allow you to have gateway accounts that are related to multiple websites, or\nexclusive to particular websites.  And gives you more control over your business.\n"
    },
    {
      "name": "Webhook Credentials",
      "description": "Get and create Webhook credential hashes.\n"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks are designed to notify your systems when certain/all registered events happen in near real-time.\nThey allow you to collect information about those events. Rebilly can send these information via\nPOST to an URL of your choice.\n"
    },
    {
      "name": "Segments",
      "description": "Segments are grid UI settings that can be shared with other users. They are like a custom view.\nFor example, one may set up a transaction grid to show specific columns and sort a certain way, and share it with\nothers in their organization.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Security",
      "tags": [
        "JWT Session",
        "API Keys",
        "Reset password"
      ]
    },
    {
      "name": "Email",
      "tags": [
        "Email Credentials",
        "Email Messages"
      ]
    },
    {
      "name": "Rules",
      "tags": [
        "Rules",
        "Lists",
        "Custom Events",
        "Custom Event Rules",
        "Scheduled Custom Events"
      ]
    },
    {
      "name": "Users",
      "tags": [
        "Profile",
        "Users"
      ]
    },
    {
      "name": "Webhooks",
      "tags": [
        "Webhook Credentials",
        "Webhooks"
      ]
    },
    {
      "name": "Other",
      "tags": [
        "Checkout Pages",
        "Gateway Accounts",
        "Layouts",
        "Payment Cards",
        "Notes",
        "Organizations",
        "Segments",
        "Status",
        "Tracking",
        "Websites"
      ]
    },
    {
      "name": "Related docs",
      "tags": [
        "Rebilly API",
        "Reports API"
      ]
    }
  ],
  "security": [
    {
      "SecretApiKey": []
    },
    {
      "JWT": []
    }
  ],
  "servers": [
    {
      "url": "https://api.rebilly.com/v2.1",
      "description": "Live Server"
    },
    {
      "url": "https://api-sandbox.rebilly.com/v2.1",
      "description": "Sandbox Server"
    }
  ],
  "paths": {
    "/activation/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token string",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Activate",
        "description": "Sends a token to activate user account\n",
        "security": [],
        "responses": {
          "204": {
            "description": "User account was activated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "422": {
            "description": "Invalid token was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->users()->activate('token');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/api-keys": {
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Retrieve a list of api keys",
        "description": "Retrieve a list of api keys\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api keys was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeys = $client->apiKeys()->search([\n    'filter' => 'description:Test',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "API Keys"
        ],
        "summary": "Create an api key",
        "description": "Create an api key\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiKey"
        },
        "responses": {
          "201": {
            "description": "Api Key was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeyForm = new Rebilly\\Entities\\ApiKey();\n$apiKeyForm->setDescription('Test');\n$apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);\n\ntry {\n    $apiKey = $client->apiKeys()->create($apiKeyForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/api-keys/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Retrieve api key",
        "description": "Retrieve api key with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Api key was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeys = $client->apiKeys()->load('apiKeyID');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "API Keys"
        ],
        "summary": "Create or update api key with predefined ID",
        "description": "Create or update api key with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "ApiKey was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "201": {
            "description": "ApiKey was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiKey"
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeyForm = new Rebilly\\Entities\\ApiKey();\n$apiKeyForm->setDescription('TestPut');\n$apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);\n\ntry {\n    $apiKey = $client->apiKeys()->update('apiKeyID', $apiKeyForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "API Keys"
        ],
        "summary": "Delete api key",
        "description": "Delete api key with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ApiKey was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "ApiKey has related resources and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->apiKeys()->delete('apiKeyID');\n"
          }
        ]
      }
    },
    "/checkout-pages": {
      "get": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Browse a list of checkout pages",
        "description": "Browse a list of checkout pages\n",
        "responses": {
          "200": {
            "description": "A list of checkout pages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutPage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPages = $client->checkoutPages()->search([\n    'filter' => 'name:testCheckoutPage',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Add a Checkout Page",
        "description": "Add a Checkout Page\n",
        "responses": {
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckoutPage"
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPageForm = new Rebilly\\Entities\\CheckoutPage();\n$checkoutPageForm->setPlanId('planId');\n$checkoutPageForm->setWebsiteId('websiteId');\n$checkoutPageForm->setName('TestCheckoutPage');\n$checkoutPageForm->setUriPath('test-checkout-page');\n\ntry {\n    $checkoutPage = $client->checkoutPages()->create($checkoutPageForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/checkout-pages/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Read a Checkout Page",
        "description": "Retrieve a Checkout Page with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Checkout Page was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPage = $client->checkoutPages()->load('checkoutPageId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Edit a Checkout Page",
        "description": "Create or update a Checkout Page with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Checkout Page was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPage"
                }
              }
            }
          },
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckoutPage"
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPageForm = new Rebilly\\Entities\\CheckoutPage();\n$checkoutPageForm->setPlanId('planId');\n$checkoutPageForm->setWebsiteId('websiteId');\n$checkoutPageForm->setName('TestCheckoutPage');\n$checkoutPageForm->setUriPath('test-checkout-page');\n\ntry {\n    $checkoutPage = $client->checkoutPages()->update('checkoutPageId', $checkoutPageForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Delete a Checkout Page",
        "description": "Delete a Checkout Page with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "description": "Checkout Page was deleted"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Checkout page cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->checkoutPages()->delete('checkoutPageId');\n"
          }
        ]
      }
    },
    "/credential-hashes/aws-ses": {
      "post": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Create an AWS SES credential",
        "description": "Create an AWS SES credential\n",
        "responses": {
          "201": {
            "description": "AWS SES credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SESCredential"
                }
              }
            }
          },
          "303": {
            "description": "An existent AWS SES credential was retrieved",
            "headers": {
              "Location": {
                "description": "The location of the related resource",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1) when the current period will reset\n",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SESCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SESCredential"
              }
            }
          },
          "description": "AWS SES credential resource",
          "required": true
        }
      }
    },
    "/credential-hashes/aws-ses/{hash}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Retrieve an AWS SES credential",
        "description": "Retrieve an AWS SES credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "AWS SES credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SESCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Update an AWS SES credential",
        "description": "Update an AWS SES credential with specified token identifier string\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCredential"
              }
            }
          },
          "description": "AWS SES credential resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "AWS SES credential was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SESCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/emails": {
      "post": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Create an email credential",
        "description": "Create an email credential\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmtpCredential"
              }
            }
          },
          "description": "SMTP credential resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "SMTP credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpCredential"
                }
              }
            }
          },
          "303": {
            "description": "An existent SMTP credential was retrieved",
            "headers": {
              "Location": {
                "description": "The location of the related resource",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1) when the current period will reset\n",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/emails/{hash}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Retrieve an email credential",
        "description": "Retrieve an email credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Email credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Update an email credential",
        "description": "Update an email credential with specified token identifier string\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCredential"
              }
            }
          },
          "description": "Email credential resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Email credential was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/mailgun": {
      "post": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Create a mailgun credential",
        "description": "Create a mailgun credential\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailgunCredential"
              }
            }
          },
          "description": "Mailgun credential resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Mailgun credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailgunCredential"
                }
              }
            }
          },
          "303": {
            "description": "An existent Mailgun credential was retrieved",
            "headers": {
              "Location": {
                "description": "The location of the related resource",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1) when the current period will reset\n",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailgunCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/mailgun/{hash}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Retrieve a mailgun credential",
        "description": "Retrieve a mailgun credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Mailgun credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailgunCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Update a mailgun credential",
        "description": "Update a mailgun credential with specified token identifier string\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCredential"
              }
            }
          },
          "description": "Mailgun credential resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mailgun credential was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailgunCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/oauth2": {
      "get": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Retrieve a list of OAuth2 credentials",
        "description": "Retrieve a list of OAuth2 credentials\n",
        "responses": {
          "200": {
            "description": "A list of OAuth2 credentials was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuth2Credential"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Create OAuth2 credential",
        "description": "Begins the creation of an OAuth2 credential that can be re-used within\nwebhooks.  The result will be a `RedirectUrl` that the user must\nauthenticate and authorize Rebilly to receive the credentials.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/OAuth2Credential"
        },
        "responses": {
          "201": {
            "description": "OAuth2 credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/oauth2/{hash}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Retrieve an OAuth2 credential",
        "description": "Retrieve an OAuth2 credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "OAuth2 credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Update an OAuth2 credential with specified token identifier string",
        "description": "Update an OAuth2 credential with specified token identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/OAuth2Credential"
        },
        "responses": {
          "200": {
            "description": "OAuth2 credential was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/oauth2/{hash}/items": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Retrieve a list of root items available for specified credential",
        "description": "Retrieve a list of root items available for specified credential\n",
        "responses": {
          "200": {
            "description": "A list of root items available for specified credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GoogleSpreadsheet"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/credential-hashes/postmark": {
      "post": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Create a Postmark credential",
        "description": "Create a Postmark credential\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostmarkCredential"
              }
            }
          },
          "description": "Postmark credential resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Postmark credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostmarkCredential"
                }
              }
            }
          },
          "303": {
            "description": "An existent Postmark credential was retrieved",
            "headers": {
              "Location": {
                "description": "The location of the related resource",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1) when the current period will reset\n",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostmarkCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/postmark/{hash}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Retrieve a Postmark credential",
        "description": "Retrieve a Postmark credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Postmark credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostmarkCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Update a Postmark credential",
        "description": "Update a Postmark credential with specified token identifier string\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCredential"
              }
            }
          },
          "description": "Postmark credential resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Postmark credential was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostmarkCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/sendgrid": {
      "post": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Create a SendGrid credential",
        "description": "Create a SendGrid credential\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendGridCredential"
              }
            }
          },
          "description": "SendGrid credential resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "SendGrid credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendGridCredential"
                }
              }
            }
          },
          "303": {
            "description": "An existent SendGrid credential was retrieved",
            "headers": {
              "Location": {
                "description": "The location of the related resource",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1) when the current period will reset\n",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendGridCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/sendgrid/{hash}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Retrieve a SendGrid credential",
        "description": "Retrieve a SendGrid credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "SendGrid credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendGridCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Update a SendGrid credential",
        "description": "Update a SendGrid credential with specified token identifier string\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCredential"
              }
            }
          },
          "description": "SendGrid credential resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "SendGrid credential was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendGridCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/webhooks": {
      "post": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Create a webhook credential",
        "description": "Create a webhook credential\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCredential"
              }
            }
          },
          "description": "Credential resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Webhook credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCredential"
                }
              }
            }
          },
          "303": {
            "description": "An existent Webhook credential was retrieved",
            "headers": {
              "Location": {
                "description": "The location of the related resource",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1) when the current period will reset\n",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credential-hashes/webhooks/{hash}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Retrieve a webhook credential",
        "description": "Retrieve a webhook credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Webhook Credentials"
        ],
        "summary": "Update a webhook credential",
        "description": "Update a webhook credential with specified token identifier string\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCredential"
              }
            }
          },
          "description": "Webhook credential resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook credential was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCredential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/custom-events": {
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Retrieve a list of custom events",
        "description": "Retrieve a list of custom events\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdTime",
                  "-createdTime",
                  "handledTime",
                  "-handledTime",
                  "scheduledTime",
                  "-scheduledTime"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of custom events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomEvent"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Create a custom event",
        "description": "Create a custom event\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomEvent"
        },
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/custom-events/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Retrieve a custom event",
        "description": "Retrieve a custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Create a custom event with predefined ID",
        "description": "Create a custom event with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomEvent"
        },
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "description": "Custom event can't be modified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Delete a custom event",
        "description": "Delete a custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "description": "Custom event was deleted"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Custom event has related rules and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/custom-events/{id}/rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Event Rules"
        ],
        "summary": "Retrieve a list of rules for custom event",
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Custom Event Rules"
        ],
        "summary": "Update the rules for custom event",
        "responses": {
          "200": {
            "description": "Rules were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/RuleSet"
        }
      }
    },
    "/custom-events/{id}/rules/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Event Rules"
        ],
        "summary": "Retrieve the change history of the set of rules for a custom event",
        "description": "Retrieve the change history of the set of rules for the selected custom event.\nThe history is updated each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionSort"
          },
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RuleSetHistoryItem"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/custom-events/{id}/rules/history/{version}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Custom Event Rules"
        ],
        "summary": "Retrieve the record from the change history of the set of rules for a custom event",
        "description": "Retrieve the record from the change history of the set of rules for the selected custom event.\nA history record is created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSetHistoryItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/custom-events/{id}/rules/versions/{version}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Custom Event Rules"
        ],
        "summary": "Retrieve the version of the set of rules for a custom event",
        "description": "Retrieve the version of the selected set of rules for the selected custom event.\nThe versions are created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSetVersion"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/email-messages": {
      "get": {
        "tags": [
          "Email Messages"
        ],
        "summary": "Retrieve a list of email messages",
        "description": "Retrieve a list of email messages\n",
        "responses": {
          "200": {
            "description": "A list of email messages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Email Messages"
        ],
        "summary": "Create an email message",
        "description": "Create an email message\n",
        "responses": {
          "201": {
            "description": "Email message was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailMessage"
              }
            }
          },
          "description": "Email message resource",
          "required": true
        }
      }
    },
    "/email-messages/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Email Messages"
        ],
        "summary": "Retrieve an email message",
        "description": "Retrieve an email message\n",
        "responses": {
          "200": {
            "description": "Email message with specified identifier was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Email Messages"
        ],
        "summary": "Delete an email message",
        "description": "Delete an email message\n",
        "responses": {
          "204": {
            "description": "Email message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      },
      "patch": {
        "tags": [
          "Email Messages"
        ],
        "summary": "Send an email message",
        "description": "Send an email message\n",
        "responses": {
          "200": {
            "description": "Email message was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "description": "The email message's status",
                    "type": "string",
                    "enum": [
                      "outbox"
                    ]
                  }
                }
              }
            }
          },
          "description": "Email message status",
          "required": true
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve a list of existing events",
        "responses": {
          "200": {
            "description": "A list of System Events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemEvent"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/events/{eventType}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/systemEventType"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the event information",
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/events/{eventType}/rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/systemEventType"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve a list of rules for event",
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Rules"
        ],
        "summary": "Update the rules for event",
        "responses": {
          "200": {
            "description": "Rules were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/RuleSet"
        }
      }
    },
    "/events/{eventType}/rules/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/systemEventType"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the change history of the set of rules",
        "description": "Retrieve the change history of the selected set of rules.\nThe history is updated each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionSort"
          },
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RuleSetHistoryItem"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/events/{eventType}/rules/history/{version}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/systemEventType"
        },
        {
          "$ref": "#/components/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the record from the change history of the set of rules",
        "description": "Retrieve the record from the change history of the selected set of rules.\nA history record is created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History record was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSetHistoryItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/events/{eventType}/rules/versions/{version}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/systemEventType"
        },
        {
          "$ref": "#/components/parameters/rulesVersion"
        }
      ],
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Retrieve the version of the set of rules",
        "description": "Retrieve the version of the selected set of rules.\nThe versions are created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSetVersion"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/forgot-password": {
      "post": {
        "tags": [
          "Reset password"
        ],
        "summary": "Request password reset",
        "description": "Sends an email with a link containing a token to reset user password\n",
        "responses": {
          "204": {
            "description": "Email sent successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPassword"
              }
            }
          },
          "description": "Forgot password resource",
          "required": true
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$forgotPasswordForm = new Rebilly\\Entities\\ForgotPassword();\n$forgotPasswordForm->setEmail('johndoe@test.com');\n\ntry {\n    $client->users()->forgotPassword($forgotPasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts": {
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a list of gateway accounts",
        "description": "Retrieve a list of gateway accounts\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Gateway Accounts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GatewayAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccounts = $client->$gatewayAccounts()->search([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create a Gateway Account",
        "description": "Create a Gateway Account\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/GatewayAccount"
        },
        "responses": {
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccountForm = new Rebilly\\Entities\\GatewayAccount();\n\n$gatewayAccountForm->setGatewayName('A1Gateway');\n$gatewayAccountForm->setAcquirerName('Bank of Rebilly');\n$gatewayAccountForm->setOrganizationId('organizationId');\n$gatewayAccountForm->setMerchantCategoryCode(5734);\n$gatewayAccountForm->setWebsites([\n    'websiteId1',\n    'websiteId2',\n]);\n$gatewayAccountForm->setPaymentCardSchemes([\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_VISA,\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_MASTERCARD,\n]);\n$gatewayAccountForm->setMethod(Rebilly\\Entities\\PaymentMethod::METHOD_CASH);\n\n$gatewayConfig = [\n    'accountId' => 'test',\n    'password' => '123',\n];\n\n$gatewayAccountForm->setGatewayConfig($gatewayConfig);\n\ntry {\n    $gatewayAccount = $client->gatewayAccounts()->create($gatewayAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a Gateway Account",
        "description": "Retrieve a Gateway Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Gateway Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccount = $client->gatewayAccounts()->load('gatewayAccountId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create or update a Gateway Account with predefined ID",
        "description": "Create or update a GatewayAccount with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/GatewayAccount"
        },
        "responses": {
          "200": {
            "description": "Gateway Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccountForm = new Rebilly\\Entities\\GatewayAccount();\n\n$gatewayAccountForm->setGatewayName('A1Gateway');\n$gatewayAccountForm->setAcquirerName('Bank of Rebilly');\n$gatewayAccountForm->setOrganizationId('organizationId');\n$gatewayAccountForm->setMerchantCategoryCode(5734);\n$gatewayAccountForm->setWebsites([\n    'websiteId1',\n    'websiteId2',\n]);\n$gatewayAccountForm->setPaymentCardSchemes([\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_VISA,\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_MASTERCARD,\n]);\n$gatewayAccountForm->setMethod(Rebilly\\Entities\\PaymentMethod::METHOD_CASH);\n\n$gatewayConfig = [\n    'accountId' => 'test',\n    'password' => '123',\n];\n\n$gatewayAccountForm->setGatewayConfig($gatewayConfig);\n\ntry {\n    $gatewayAccount = $client->gatewayAccounts()->update('gatewayAccountId', $gatewayAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Update a Gateway Account with predefined ID",
        "description": "Update a GatewayAccount with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/GatewayAccount"
        },
        "responses": {
          "200": {
            "description": "Gateway Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Delete a Gateway Account",
        "description": "Delete a Gateway Account with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Gateway Account was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->gatewayAccounts()->delete('gatewayAccountId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts/{id}/close": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Close a Gateway Account",
        "description": "Close a gateway account with specified identifier string.\nAlso known as archiving. Closing a Gateway Account cannot be undone, so use with caution. It will no longer be able\nto process transactions. The \"status\" attribute will be set to \"closed\".\n",
        "responses": {
          "201": {
            "description": "Closed successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/gateway-accounts/{id}/disable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Disable a Gateway Account",
        "description": "Disable a gateway account with specified identifier string.\nDisabled gateway accounts have their \"status\" attribute set to \"inactive\" and cannot process transactions.\n",
        "responses": {
          "201": {
            "description": "Disabled successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Gateway account is pending activation and cannot be disabled."
          }
        }
      }
    },
    "/gateway-accounts/{id}/downtime-schedules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a list of gateway account downtime schedules",
        "description": "Retrieve a list of gateway account downtime schedules\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Gateway Account downtime schedules was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GatewayAccountDowntimeSchedule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create a Gateway Account downtime schedule.",
        "description": "Create a Gateway Account downtime schedule\n",
        "responses": {
          "201": {
            "description": "Gateway Account downtime schedule was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccountDowntimeSchedule"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/GatewayAccountDowntimeSchedule"
        }
      }
    },
    "/gateway-accounts/{id}/downtime-schedules/{downtimeId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "downtimeId",
          "in": "path",
          "description": "The Gateway Account downtime schedule ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a Gateway Downtime schedule",
        "description": "Retrieve a Gateway Downtime schedule with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Gateway Downtime schedule was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccountDowntimeSchedule"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Update a Gateway Account downtime schedule",
        "description": "Update a Gateway Account downtime schedule with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Gateway Account downtime schedule was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccountDowntimeSchedule"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/GatewayAccountDowntimeSchedule"
        }
      },
      "delete": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Delete a Gateway Account downtime schedule",
        "description": "Delete a Gateway Account downtime schedule\n",
        "responses": {
          "204": {
            "description": "Gateway Account downtime schedule was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/gateway-accounts/{id}/enable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Enable a Gateway Account",
        "description": "Enable a gateway account with specified identifier string.\nEnabled gateway accounts have their \"status\" attribute set to \"active\" and can process transactions.\n",
        "responses": {
          "201": {
            "description": "Enabled successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Gateway account is pending activation and cannot be enabled."
          }
        }
      }
    },
    "/gateway-accounts/{id}/timeline": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a list of gateway account timeline messages",
        "description": "Retrieve a list of gateway account timeline messages\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Gateway Account timeline messages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GatewayAccountTimeline"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create a Gateway Account Timeline comment",
        "description": "Create a Gateway Account Timeline comment\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayAccountTimeline"
              }
            }
          },
          "description": "Gateway Account Timeline resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Gateway Account Timeline comment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccountTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/gateway-accounts/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "messageId",
          "in": "path",
          "description": "The Gateway Account Timeline message ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a Gateway Timeline message",
        "description": "Retrieve a Gateway Timeline message with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Gateway Timeline message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayAccountTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Delete a Gateway Timeline message",
        "description": "Delete a Gateway Timeline message with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Gateway Account Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/grid-segments": {
      "get": {
        "tags": [
          "Segments"
        ],
        "summary": "Retrieve a user's Segments",
        "operationId": "getSegments",
        "description": "Retrieve a user's UI Segments\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Segments were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit",
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Segment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Segments"
        ],
        "summary": "Create a new UI Segment",
        "operationId": "createSegment",
        "description": "Create a new Segment for oneself or to share with others within the\norganization\n",
        "responses": {
          "201": {
            "description": "Segment was created successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit",
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Segment"
        }
      }
    },
    "/grid-segments/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Segments"
        ],
        "summary": "Retrieve a specific Segment",
        "operationId": "getSegment",
        "description": "Retrieve a specific UI Segment\n",
        "responses": {
          "200": {
            "description": "Segment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Segments"
        ],
        "summary": "Update a Segment's visibility",
        "operationId": "toggleSegmentsVisibility",
        "description": "Toggle the visibility of the current Segment for the authenticated user\n",
        "responses": {
          "200": {
            "description": "Segment was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchSegment"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Segments"
        ],
        "summary": "Update a Segment",
        "operationId": "updateSegment",
        "description": "Update a Segment\n",
        "responses": {
          "200": {
            "description": "Segment was updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "403": {
            "description": "This will be sent if the user is not the owner.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Segment"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Segments"
        ],
        "summary": "Delete a Segment",
        "operationId": "deleteSegment",
        "description": "Delete a Segment. This will also remove all shares. Only the owner may perform this.\n",
        "responses": {
          "204": {
            "description": "Segment was deleted successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "403": {
            "description": "This will be sent if the user is not the owner.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/integrations": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Retrieve a list of integrations",
        "description": "Retrieve a list of integrations\n",
        "responses": {
          "200": {
            "description": "A list of integrations was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/integrations/{label}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/integrationLabel"
        }
      ],
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Retrieve an integration for specific label",
        "description": "Retrieve an integration for specific label\n",
        "responses": {
          "200": {
            "description": "An integration with specific label was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/layouts": {
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "Retrieve a layout list",
        "description": "Retrieve a layout list\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Layout list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Layout"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layouts = $client->layouts()->search([\n    'filter' => 'name:TestLayout',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Layouts"
        ],
        "summary": "Create a layout",
        "description": "Create a layout\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Layout"
        },
        "responses": {
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layoutForm = new Rebilly\\Entities\\Layout();\n$layoutItemForm = new Rebilly\\Entities\\LayoutItem();\n\n$layoutItemForm->setPlanId('planId');\n$layoutItemForm->setStarred(false);\n\n$layoutForm->setName('TestLayout');\n$layoutForm->setLayoutItems([\n    $layoutItemForm,\n]);\n\ntry {\n    $layout = $client->layouts()->create($layoutForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/layouts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "Retrieve a layout",
        "description": "Retrieve a layout with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Layout was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layout = $client->layouts()->load('layoutId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Layouts"
        ],
        "summary": "Create or update a layout with predefined ID",
        "description": "Create or update a layout with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Layout"
        },
        "responses": {
          "200": {
            "description": "Layout was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          },
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layoutForm = new Rebilly\\Entities\\Layout();\n$layoutItemForm = new Rebilly\\Entities\\LayoutItem();\n\n$layoutItemForm->setPlanId('planId');\n$layoutItemForm->setStarred(false);\n\n$layoutForm->setName('TestLayout');\n$layoutForm->setLayoutItems([\n    $layoutItemForm,\n]);\n\ntry {\n    $layout = $client->layouts()->update('layoutId', $layoutForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Layouts"
        ],
        "summary": "Delete a layout",
        "description": "Delete a layout with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Layout was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->layouts()->delete('layoutId');\n"
          }
        ]
      }
    },
    "/lists": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Retrieve a collection of Lists (latest version of each List)",
        "description": "Retrieve a collection of Lists\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Lists was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/List"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Lists"
        ],
        "summary": "Create a List",
        "description": "Create a List\n",
        "responses": {
          "201": {
            "description": "List was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/List"
        }
      }
    },
    "/lists/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Retrieve list's latest version",
        "description": "Retrieve latest version of List with specified identifier string\n",
        "responses": {
          "200": {
            "description": "List was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Lists"
        ],
        "summary": "Create or update a list with predefined ID",
        "description": "Create or update a list with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/List"
        },
        "responses": {
          "200": {
            "description": "List was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          },
          "201": {
            "description": "List was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Lists"
        ],
        "summary": "Delete a list",
        "description": "Delete a list with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "List was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "List is used in Rules and cannot be deleted"
          }
        }
      }
    },
    "/lists/{id}/{version}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "version",
          "in": "path",
          "required": true,
          "description": "List version",
          "schema": {
            "type": "integer",
            "minimum": 1
          }
        }
      ],
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Retrieve List's exact version",
        "responses": {
          "200": {
            "description": "List's exact version was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "JWT Session"
        ],
        "summary": "Destroys the user's current session",
        "description": "Destroys the user's current session. Endpoint must be accessed with valid JWT Authorization header.\n",
        "responses": {
          "204": {
            "description": "Session was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieve a list of notes",
        "description": "Retrieve a list of notes\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Notes was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$notes = $client->notes()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Create a note",
        "description": "Create a note\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Note"
        },
        "responses": {
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$noteForm = new Rebilly\\Entities\\Note();\n$noteForm->setRelatedId('customerId');\n$noteForm->setRelatedType(Rebilly\\Entities\\ResourceType::TYPE_CUSTOMER);\n$noteForm->setContent('Test Note');\n\ntry {\n    $note = $client->notes()->create($noteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/notes/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieve a note with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Note was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$note = $client->notes()->load('noteId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Notes"
        ],
        "summary": "Create or update a note with predefined ID",
        "description": "Create or update a note with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Note"
        },
        "responses": {
          "200": {
            "description": "Note was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$noteForm = new Rebilly\\Entities\\Note();\n$noteForm->setRelatedId('customerId');\n$noteForm->setRelatedType(Rebilly\\Entities\\ResourceType::TYPE_CUSTOMER);\n$noteForm->setContent('Test Note');\n\ntry {\n    $note = $client->notes()->update('noteId', $noteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Retrieve a list of organizations",
        "description": "Retrieve a list of organizations\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of organizations was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizations = $client->organizations()->search([\n    'filter' => 'city:Test',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create a organization",
        "description": "Create a organization\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Organization"
        },
        "responses": {
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "description": "The similar organization already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizationForm = new Rebilly\\Entities\\Organization();\n$organizationForm->setName('Test Organization');\n$organizationForm->setCountry('US');\n\ntry {\n    $organization = $client->organizations()->create($organizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/organizations/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Retrieve a organization",
        "description": "Retrieve a organization with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Organization was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organization = $client->organizations()->load('organizationId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create or update a organization with predefined ID",
        "description": "Create or update a organization with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Organization"
        },
        "responses": {
          "200": {
            "description": "Organization was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "description": "The similar organization already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizationForm = new Rebilly\\Entities\\Organization();\n$organizationForm->setName('Test Organization');\n$organizationForm->setCountry('US');\n\ntry {\n    $organization = $client->organizations()->update('organizationId', $organizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete a organization",
        "description": "Delete a organization with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Organization was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Organization has related resources and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment-cards-bank-names": {
      "get": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Retrieve a list of payment card issuing bank names",
        "operationId": "getBankNames",
        "description": "Retrieve a list of payment card issuing bank names\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of payment card issuing bank names was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Bank Name",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/payment-cards-migrations": {
      "post": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Migrate payment cards to another gateway account",
        "operationId": "migratePaymentCards",
        "description": "Migrate payment cards to another gateway account\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCardMigration"
              }
            }
          },
          "description": "Payment card migration attributes",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Migration command was accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCardMigration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/previews/rule-actions/send-email": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Send a test email",
        "description": "Send a test email\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTestEmail"
              }
            }
          },
          "description": "Test email resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Test email was sent",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendTestEmail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/previews/rule-actions/trigger-webhook": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Trigger a test webhook",
        "description": "Trigger a test webhook\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPreviewWebhook"
              }
            }
          },
          "description": "Test webhook resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Test webhook was triggered",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendPreviewWebhook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/previews/webhooks": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Trigger a test webhook",
        "description": "Trigger a test webhook\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/GlobalWebhook"
        },
        "responses": {
          "204": {
            "description": "Test webhook was triggered",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Retrieve user's profile",
        "description": "Retrieve user's profile\n",
        "responses": {
          "200": {
            "description": "Profile was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update user's profile",
        "description": "Update user's profile\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Profile"
              }
            }
          },
          "description": "Profile resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/profile/password": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Change password",
        "description": "Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdatePassword"
        },
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/profile/totp-reset": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Reset (renew) totpSecret",
        "description": "Reset (renew) totpSecret\n",
        "responses": {
          "201": {
            "description": "totpSecret reset (renewed) successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/queue/custom-events": {
      "get": {
        "tags": [
          "Scheduled Custom Events"
        ],
        "summary": "Retrieve a list of scheduled custom events",
        "description": "Retrieve a list of scheduled custom events\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scheduled custom events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomEvent"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/queue/custom-events/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Scheduled Custom Events"
        ],
        "summary": "Retrieve a scheduled custom event",
        "description": "Retrieve a scheduled custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Scheduled custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEvent"
                }
              }
            }
          },
          "303": {
            "description": "Custom event was successfully processed and moved out from queue",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Scheduled Custom Events"
        ],
        "summary": "Delete a scheduled custom event",
        "description": "Delete a scheduled custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "description": "Scheduled custom event was deleted"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/reset-password/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token string",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Reset password"
        ],
        "summary": "Read token information",
        "responses": {
          "200": {
            "description": "Token was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordTokenInfo"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Reset password"
        ],
        "summary": "Finish password reset",
        "description": "Reset user password\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "description": "ResetPassword resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Password was reseted successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$resetPasswordForm = new Rebilly\\Entities\\ResetPassword();\n$resetPasswordForm->setNewPassword('1234');\n\ntry {\n    $user = $client->users()->resetPassword('token', $resetPasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/signin": {
      "post": {
        "tags": [
          "JWT Session"
        ],
        "summary": "Create a session with email and password",
        "description": "Create a session with email and password\n",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signin"
              }
            }
          },
          "description": "Signin resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$loginForm = new Rebilly\\Entities\\Login();\n$loginForm->setEmail('test@test.com');\n$loginForm->setPassword('1234');\n\ntry {\n    $user = $client->users()->signin($loginForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Register and create new profile",
        "description": "Creates a new user and sends an email confirmation\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signup"
              }
            }
          },
          "description": "Signup resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$signupForm = new Rebilly\\Entities\\Signup();\n$signupForm->setFirstName('John');\n$signupForm->setLastName('Doe');\n$signupForm->setEmail('johndoe@test.com');\n$signupForm->setBusinessPhone('+123456789');\n$signupForm->setPassword('1234');\n\ntry {\n    $client->users()->signup($signupForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Retrieve API current status",
        "description": "Retrieve API current status\n",
        "security": [],
        "responses": {
          "200": {
            "description": "Status was received",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/tracking/api": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking API logs",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "text/csv"
              ],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking API logs was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTracking"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiTrackingLog = $client->apiTracking()->search([\n    'filter' => 'status:200',\n]);\n"
          }
        ]
      }
    },
    "/tracking/api/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking API log with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking API log was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTracking"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiTrackingLog = $client->apiTracking()->load('apiLogId');\n"
          }
        ]
      }
    },
    "/tracking/lists": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve Lists changes history",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists changes history was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/List"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/subscriptions": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking subscription logs",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking subscription logs was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionTracking"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/subscriptions/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking subscription log with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking subscription log was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionTracking"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/tracking/webhooks": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking webhook notifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionSort"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking webhook notifications was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookTracking"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/webhooks/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking webhook notification with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking webhook notification was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookTracking"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/tracking/webhooks/{id}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve related webhook attempts for specified webhook tracking.",
        "responses": {
          "200": {
            "description": "Webhook tracking related attempts were retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookTracking"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/webhooks/{id}/resend": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Tracking"
        ],
        "summary": "Schedules webhook resend attempt for specified webhook tracking.",
        "responses": {
          "204": {
            "description": "Webhook resend attempt was scheduled",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a list of users",
        "description": "Retrieve a list of users\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$users = $client->users()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create an user",
        "description": "Create an user\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$userForm = new Rebilly\\Entities\\User();\n$userForm->setFirstName('John');\n$userForm->setLastName('Doe');\n$userForm->setEmail('johndoe@test.com');\n\ntry {\n    $user = $client->users()->create($userForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve user",
        "description": "Retrieve user with specified identifier string\n",
        "responses": {
          "200": {
            "description": "User was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$user = $client->users()->load('userId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Create or update user with predefined ID",
        "description": "Create or update user with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "responses": {
          "200": {
            "description": "User was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$userForm = new Rebilly\\Entities\\User();\n$userForm->setFirstName('John');\n$userForm->setLastName('Doe');\n$userForm->setEmail('johndoe@test.com');\n\ntry {\n    $user = $client->users()->update('userId', $userForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete user with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "User was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "User has related resources and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->users()->delete('userId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}/password": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Change a user's password",
        "description": "Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdatePassword"
        },
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$updatePasswordForm = new Rebilly\\Entities\\UpdatePassword();\n$updatePasswordForm->setCurrentPassword('1234');\n$updatePasswordForm->setNewPassword('5678');\n\ntry {\n    $user = $client->users()->updatePassword('userId', $updatePasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}/totp-reset": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset (renew) totpSecret",
        "description": "Reset (renew) totpSecret\n",
        "responses": {
          "201": {
            "description": "totpSecret reset (renewed) successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$user = $client->users()->resetTotp('userId');\n"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve a list of webhooks",
        "description": "Retrieve a list of webhooks\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Webhooks was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalWebhook"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "description": "Create a webhook\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/GlobalWebhook"
        },
        "responses": {
          "201": {
            "description": "Webhook was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalWebhook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve a webhook",
        "description": "Retrieve a webhook with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalWebhook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create or update a webhook with predefined ID",
        "description": "Create or update a webhook with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/GlobalWebhook"
        },
        "responses": {
          "200": {
            "description": "Webhook was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalWebhook"
                }
              }
            }
          },
          "201": {
            "description": "Webhook was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalWebhook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/websites": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Retrieve a list of websites",
        "description": "Retrieve a list of websites\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "text/csv"
              ],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Websites was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Website"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Website"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websites = $client->websites()->search([\n    'filter' => 'name:TestWebsite',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Websites"
        ],
        "summary": "Create a website",
        "description": "Create a website\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Website"
        },
        "responses": {
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteForm = new Rebilly\\Entities\\Website();\n$websiteForm->setName('TestWebsite');\n$websiteForm->setUrl('http://testwebsite.com');\n$websiteForm->setServicePhone('+0123456789');\n$websiteForm->setServiceEmail('test@testwebsite.com');\n\ntry {\n    $website = $client->websites()->create($websiteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/websites/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Retrieve a website",
        "description": "Retrieve a website with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Website was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$website = $client->websites()->load('websiteId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Websites"
        ],
        "summary": "Create or update a website with predefined ID",
        "description": "Create or update a website with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Website"
        },
        "responses": {
          "200": {
            "description": "Website was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteForm = new Rebilly\\Entities\\Website();\n$websiteForm->setName('TestWebsite');\n$websiteForm->setUrl('http://testwebsite.com');\n$websiteForm->setServicePhone('+0123456789');\n$websiteForm->setServiceEmail('test@testwebsite.com');\n\ntry {\n    $website = $client->websites()->update('websiteId', $websiteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Websites"
        ],
        "summary": "Delete a website",
        "description": "Delete a website with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Website was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Website has related resources and cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->websites()->delete('websiteId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AclPermissions": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "resourceName",
            "methods"
          ],
          "properties": {
            "resourceName": {
              "description": "The ACL resource name. Send `null` to match all resources.",
              "type": "string",
              "enum": [
                "3dsecure",
                "activity-feed",
                "api-keys",
                "api-tracking",
                "attachments",
                "authentication-options",
                "authentication-tokens",
                "aws-ses-credentials",
                "bank-accounts",
                "blacklists",
                "checkout-pages",
                "contacts",
                "coupons",
                "coupons-redemptions",
                "credentials",
                "custom-events",
                "custom-fields",
                "customer-timeline",
                "customers",
                "data-exports",
                "disputes",
                "email-messages",
                "email-notifications",
                "email-notifications-tracking",
                "events",
                "files",
                "gateway-account-downtimes",
                "gateway-account-timeline",
                "gateway-accounts",
                "histograms",
                "integrations",
                "invoices",
                "kyc",
                "layouts",
                "lead-sources",
                "lists",
                "lists-tracking",
                "mailgun-credentials",
                "matched-rules",
                "mgs",
                "momentum",
                "nmi",
                "notes",
                "oauth2-credentials",
                "organizations",
                "password-tokens",
                "payment-cards",
                "payment-cards-migrations",
                "payment-instrument-validation",
                "payments",
                "paypal-accounts",
                "plans",
                "postmark-credentials",
                "products",
                "profile",
                "reports",
                "reset-sandbox",
                "rulesets",
                "search",
                "send-preview-email",
                "send-preview-webhook",
                "sendgrid-credentials",
                "shipping-zones",
                "smtp-credentials",
                "subscription-tracking",
                "subscriptions",
                "tags",
                "tokens",
                "transaction-timeline",
                "transactions",
                "users",
                "webhook-credentials",
                "webhooks",
                "webhooks-tracking",
                "websites",
                "websites-webhook"
              ]
            },
            "methods": {
              "description": "The HTTP methods allowed for this resource. Send `null` to match all methods.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ]
              }
            }
          }
        },
        "example": [
          {
            "resourceName": "plans",
            "methods": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ]
          },
          {
            "resourceName": "invoices",
            "methods": null
          }
        ]
      },
      "AmountRestrictions": {
        "type": "object",
        "required": [
          "currency",
          "min"
        ],
        "properties": {
          "currency": {
            "description": "Currency (three letter ISO 4217 code)",
            "type": "string"
          },
          "min": {
            "description": "The minimum amount allowed",
            "type": "number",
            "format": "double",
            "minimum": 0
          },
          "max": {
            "description": "The maximum amount allowed",
            "type": "number",
            "format": "double",
            "minimum": 0
          }
        }
      },
      "ApiKey": {
        "type": "object",
        "description": "API secret Key.",
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "description": {
            "description": "API key description",
            "type": "string"
          },
          "datetimeFormat": {
            "description": "Date time format",
            "type": "string",
            "default": "iso8601",
            "enum": [
              "mysql",
              "iso8601"
            ]
          },
          "type": {
            "description": "Type of API key",
            "type": "string",
            "default": "secret",
            "enum": [
              "secret",
              "publishable"
            ]
          },
          "permissions": {
            "description": "Specify individual permissions here if creating a restricted API key. Send `null` to allow all permissions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AclPermissions"
              }
            ]
          },
          "apiUser": {
            "description": "API user name",
            "type": "string",
            "readOnly": true
          },
          "secretKey": {
            "description": "API secret key's value",
            "type": "string",
            "readOnly": true
          },
          "createdTime": {
            "description": "The API key created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "AstroPayBanks": {
        "type": "string",
        "enum": [
          "CU",
          "SE",
          "BV",
          "BM",
          "SM",
          "OX",
          "BQ",
          "EN",
          "FA",
          "BW",
          "SS",
          "SU",
          "WA",
          "FB",
          "TC",
          "I",
          "BB",
          "B",
          "CA",
          "SB",
          "BL",
          "NB",
          "UI"
        ]
      },
      "CheckoutPage": {
        "type": "object",
        "required": [
          "planId",
          "websiteId",
          "urlPathSegment",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Checkout page identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "planId": {
            "description": "Checkout page plan ID.  If the plan is deactivated, the submit button on the checkout page will be deactivated and the page will display \"Sold Out.\"",
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websiteId": {
            "description": "Checkout page website ID",
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "urlPathSegment": {
            "description": "Your own custom url path segment for this Checkout Page. It will be appended to checkout url https://checkout.rebilly.com/checkout/`urlPathSegment`",
            "type": "string",
            "minLength": 5,
            "maxLength": 50
          },
          "name": {
            "description": "Checkout page name, used for internal display to help you organize your various checkout pages.",
            "type": "string",
            "maxLength": 100
          },
          "redirect": {
            "type": "object",
            "description": "After a successful checkout, the customer can optionally be redirected to a url of your choice.",
            "properties": {
              "url": {
                "description": "After a successful checkout, the customer can be redirected to a url of your choice.  If left empty, the customer will remain on the thank you page.",
                "type": "string"
              },
              "timeout": {
                "description": "The time (in seconds) that the customer will remain on the thank you page before being redirected to the corresponding `url`.",
                "type": "integer",
                "default": 5
              }
            }
          },
          "isCustomCustomerIdAllowed": {
            "description": "Set to true if you want to supply your own customer ID's in a querystring parameter on your checkout page.",
            "type": "boolean",
            "default": false
          },
          "isBillingAddressHidden": {
            "description": "Set to true if you want to hide billing address on your checkout page.",
            "type": "boolean",
            "default": false
          },
          "isPlanSummaryHidden": {
            "description": "Set to true if you want to hide plan summary on your checkout page.",
            "type": "boolean",
            "default": false
          },
          "isPreCheckedTerms": {
            "description": "Set to true if you want to pre-checked checkbox of terms on your checkout page.",
            "type": "boolean",
            "default": false
          },
          "oneTimeOffer": {
            "type": "object",
            "description": "One time offer for checkout page.",
            "properties": {
              "planId": {
                "description": "Reference to Plan ID.",
                "type": "string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "isTiedToQuantity": {
                "description": "Set to true if you want to tie one time offer to quantity on your checkout page.",
                "type": "boolean",
                "default": false
              }
            }
          },
          "thankYouOneTimeOffer": {
            "type": "object",
            "description": "One time offer for thank you page.",
            "properties": {
              "planId": {
                "description": "Reference to Plan ID.",
                "type": "string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "isTiedToQuantity": {
                "description": "Set to true if you want to tie one time offer to quantity on your checkout page.",
                "type": "boolean",
                "default": false
              }
            }
          },
          "suggestedUpgrade": {
            "type": "object",
            "description": "Suggested upgrade for checkout page.",
            "properties": {
              "planId": {
                "description": "Reference to Plan ID.",
                "type": "string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "hasProration": {
                "description": "Set to true if you want to pro rata credits given due change a subscription's plan.",
                "type": "boolean",
                "default": false
              }
            }
          },
          "theme": {
            "description": "Select from pre-designed themes for your checkout page.",
            "type": "string",
            "default": "classic",
            "enum": [
              "classic",
              "long-copy"
            ]
          },
          "logoAlignment": {
            "description": "Checkout page logo position.",
            "type": "string",
            "enum": [
              "left",
              "center",
              "right"
            ],
            "default": "left"
          },
          "quantityLabel": {
            "description": "Checkout page quantity label, used in case you want to customize the quantity field label.",
            "type": "string",
            "maxLength": 255
          },
          "quantityType": {
            "description": "Checkout page quantity type, used in case you want to customize the quantity field type.",
            "type": "string",
            "enum": [
              "selectbox",
              "textinput"
            ],
            "default": "selectbox"
          },
          "quantityMin": {
            "description": "Checkout page quantity min, used in case you want to set the minimun quantity.",
            "type": "integer",
            "minimum": 1,
            "maximum": 255
          },
          "markup": {
            "description": "Sections of styled content that will display within the page body, keyed by \"section.\"\nThe themes rely on specific \"section\" key values, for example \"header\", \"button\", \"footer\", \"body\", \"thank-you\", \"terms\".\n",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          },
          "fields": {
            "description": "Take granular control over the default field settings.  You can make specific fields hidden, optional, or required.  You can specify labels and default values.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/FieldConfig"
            }
          },
          "taxes": {
            "type": "object",
            "description": "Taxes, you can specify description and list of name-value items.",
            "properties": {
              "description": {
                "description": "Taxes description.",
                "type": "string"
              },
              "items": {
                "description": "Taxes values.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Taxes"
                }
              }
            }
          },
          "status": {
            "description": "If `inactive`, the checkout page url will result in a 404.",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "default": "active"
          },
          "createdTime": {
            "description": "Checkout page created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Checkout page updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "FieldConfig": {
        "type": "object",
        "description": "A configuration for a field.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The name of the field, as defined in our APIs. You can also include custom fields.\n",
            "type": "string",
            "enum": [
              "companyName",
              "phoneNumber",
              "address",
              "addressLine2",
              "city",
              "region",
              "country",
              "postalCode",
              "couponCode",
              "quantity"
            ]
          },
          "setting": {
            "description": "If you want the field hidden, optional, or required.  Some fields may be required by a specific theme, and these settings will not override that.\nDefaults are that most fields are shown.  You may wish to hide `couponCode`, if you don't use coupons.  You may wish to require specific fields\nthat are optional (eg `phoneNumber`).\n",
            "type": "string",
            "enum": [
              "hidden",
              "optional",
              "required"
            ]
          },
          "label": {
            "description": "If you want to override the default label, you can set a value here (eg, instead of \"First Name\", you can set \"Given Name\").",
            "type": "string"
          },
          "default": {
            "description": "Set a default value for the field.  It will default to being empty, or 1 for `quantity`.",
            "type": "string"
          }
        }
      },
      "Section": {
        "type": "object",
        "required": [
          "section",
          "content",
          "style",
          "enabled"
        ],
        "properties": {
          "section": {
            "description": "A key for this section of content.\n",
            "type": "string",
            "enum": [
              "header",
              "body",
              "order-summary",
              "button",
              "footer",
              "thank-you",
              "terms"
            ]
          },
          "style": {
            "description": "Control the font and background colors.",
            "$ref": "#/components/schemas/Style"
          },
          "content": {
            "description": "The text you want to appear in the section, can be styled in html markup.  You can include image references.",
            "type": "string"
          },
          "enabled": {
            "description": "Set to false if you want to disable this markup section on checkout page.",
            "type": "boolean",
            "default": true
          }
        }
      },
      "Style": {
        "type": "object",
        "properties": {
          "background": {
            "description": "Background color for the section in hexadecimal format.",
            "type": "string",
            "maxLength": 6,
            "default": "ffffff"
          },
          "color": {
            "description": "Font color for the section in hexadecimal format.",
            "type": "string",
            "maxLength": 6,
            "default": "cccccc"
          }
        }
      },
      "Taxes": {
        "type": "object",
        "description": "A configuration for a tax.",
        "required": [
          "label",
          "value"
        ],
        "properties": {
          "label": {
            "description": "Tax name",
            "type": "string",
            "example": "VAT"
          },
          "value": {
            "description": "Value of tax.",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "exclusiveMinimum": true,
            "example": 0.5
          }
        }
      },
      "ContactEmails": {
        "description": "The list of emails",
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "label",
            "value"
          ],
          "properties": {
            "label": {
              "description": "The email label",
              "type": "string"
            },
            "value": {
              "description": "The email value",
              "type": "string"
            },
            "primary": {
              "description": "True if email is primary",
              "type": "boolean"
            }
          }
        }
      },
      "ContactObject": {
        "type": "object",
        "properties": {
          "firstName": {
            "description": "The contact first name",
            "type": "string"
          },
          "lastName": {
            "description": "The contact last name",
            "type": "string"
          },
          "organization": {
            "description": "The contact organization",
            "type": "string"
          },
          "address": {
            "description": "The contact street address",
            "type": "string",
            "maxLength": 60
          },
          "address2": {
            "description": "The contact street address (second line)",
            "type": "string",
            "maxLength": 60
          },
          "city": {
            "description": "The contact city",
            "type": "string",
            "maxLength": 45
          },
          "region": {
            "description": "The contact region (state)",
            "type": "string",
            "maxLength": 45
          },
          "country": {
            "description": "The contact country ISO Alpha-2 code",
            "type": "string",
            "pattern": "^[A-Z]{2}$"
          },
          "postalCode": {
            "description": "The contact postal code",
            "type": "string",
            "maxLength": 10
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/ContactPhoneNumbers"
          },
          "emails": {
            "$ref": "#/components/schemas/ContactEmails"
          },
          "hash": {
            "description": "A hash that can be used to compare multiple contacts for identical attribute values",
            "type": "string",
            "maxLength": 40,
            "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
            "readOnly": true
          }
        }
      },
      "ContactPhoneNumbers": {
        "description": "The list of phone numbers",
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "label",
            "value"
          ],
          "properties": {
            "label": {
              "description": "The phone label",
              "type": "string"
            },
            "value": {
              "description": "The phone value",
              "type": "string"
            },
            "primary": {
              "description": "True if phone is primary",
              "type": "boolean"
            }
          }
        }
      },
      "Credential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          }
        }
      },
      "PatchCredential": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "deactivated"
            ]
          }
        }
      },
      "Condition": {
        "type": "object",
        "discriminator": {
          "propertyName": "op"
        },
        "properties": {
          "op": {
            "type": "string",
            "description": "The condition operation",
            "enum": [
              "and",
              "or",
              "not",
              "between",
              "equals",
              "in",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          }
        },
        "required": [
          "op"
        ]
      },
      "and": {
        "type": "object",
        "description": "Logical AND",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/logical"
          }
        ]
      },
      "between": {
        "type": "object",
        "description": "Between condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "min": {
                "type": "string"
              },
              "max": {
                "type": "string"
              }
            },
            "required": [
              "path",
              "min",
              "max"
            ]
          }
        ]
      },
      "compare": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "value"
        ]
      },
      "equals": {
        "type": "object",
        "description": "Equals condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "gt": {
        "type": "object",
        "description": "Greater than condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "gte": {
        "type": "object",
        "description": "Greater than or equals condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "in": {
        "type": "object",
        "description": "In condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "path",
              "values"
            ]
          }
        ]
      },
      "logical-not": {
        "type": "object",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/Condition"
          }
        },
        "required": [
          "condition"
        ],
        "example": {
          "operation": "not",
          "condition": {
            "operation": "equals",
            "path": "/name",
            "value": "John Dou"
          }
        }
      },
      "logical": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "minItems": 2,
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "conditions"
        ]
      },
      "lt": {
        "type": "object",
        "description": "Less than condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "lte": {
        "type": "object",
        "description": "Less than or equals condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "not": {
        "type": "object",
        "description": "Logical NOT",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/logical-not"
          }
        ]
      },
      "or": {
        "type": "object",
        "description": "Logical OR",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/logical"
          }
        ]
      },
      "CustomEvent": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The custom event identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "The system event type",
            "enum": [
              "subscription-ended",
              "subscription-trial-ended",
              "subscription-renewed",
              "payment-card-expired",
              "invoice-past-due"
            ]
          },
          "title": {
            "type": "string",
            "description": "The custom event title"
          },
          "description": {
            "type": "string",
            "description": "The custom event description"
          },
          "chronology": {
            "type": "string",
            "description": "The emitting time of the custom event relatively to the system event",
            "enum": [
              "before",
              "after"
            ]
          },
          "scheduleInstruction": {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          "createdTime": {
            "$ref": "#/components/schemas/ServerTimestamp"
          },
          "rulesCount": {
            "type": "integer",
            "readOnly": true
          },
          "bindsCount": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "eventType",
          "title",
          "chronology",
          "scheduleInstruction"
        ]
      },
      "SmtpAuthorization": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "none": "#/components/schemas/SmtpAuthorizationNone"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "none",
              "plain",
              "login",
              "cram-md5"
            ],
            "default": "none"
          }
        }
      },
      "cram-md5": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SmtpAuthorization"
          },
          {
            "$ref": "#/components/schemas/UserPasswordAuthorization"
          }
        ]
      },
      "login": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SmtpAuthorization"
          },
          {
            "$ref": "#/components/schemas/UserPasswordAuthorization"
          }
        ]
      },
      "plain": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SmtpAuthorization"
          },
          {
            "$ref": "#/components/schemas/UserPasswordAuthorization"
          }
        ]
      },
      "SmtpAuthorizationNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SmtpAuthorization"
          }
        ]
      },
      "SmtpCredential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "host": {
            "type": "string",
            "description": "The host name"
          },
          "port": {
            "type": "integer",
            "description": "The port value",
            "minimum": 1,
            "maximum": 65535,
            "default": 25
          },
          "encryption": {
            "type": "string",
            "description": "The encryption value",
            "enum": [
              "none",
              "tls",
              "ssl"
            ],
            "default": "none"
          },
          "auth": {
            "$ref": "#/components/schemas/SmtpAuthorization"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        },
        "description": "SMTP Credential",
        "required": [
          "host"
        ]
      },
      "UserPasswordAuthorization": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "EmailMessage": {
        "type": "object",
        "required": [
          "from",
          "to",
          "subject",
          "text",
          "html"
        ],
        "properties": {
          "id": {
            "description": "The email message's identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The email message's status",
            "type": "string",
            "enum": [
              "draft",
              "outbox",
              "sending",
              "sent",
              "failed"
            ],
            "default": "draft"
          },
          "metadata": {
            "description": "The email message's metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "eventType": "subscription-canceled"
            }
          },
          "credentialHash": {
            "type": "string",
            "description": "SMTP or any Email Service Provider credential identifier string.",
            "example": "b120c2ca-6c2b-4690-9dff-3b0d87852dc7"
          },
          "from": {
            "description": "The email message's sender address",
            "type": "string",
            "format": "email",
            "maxLength": 254,
            "example": "from-example@rebilly.com"
          },
          "to": {
            "description": "The email message's recipients address list",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "format": "email",
              "maxLength": 254
            },
            "example": [
              "to-example@rebilly.com"
            ]
          },
          "cc": {
            "description": "The email message's CC address list",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "maxLength": 254
            },
            "example": [
              "сс-example@rebilly.com"
            ]
          },
          "bcc": {
            "description": "The email message's BCC address list",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "maxLength": 254
            },
            "example": [
              "сс-example@rebilly.com"
            ]
          },
          "subject": {
            "description": "The email message's subject",
            "type": "string",
            "maxLength": 998,
            "example": "Welcome dear customer!"
          },
          "text": {
            "description": "The email message's text body",
            "type": "string",
            "example": "Email message text body"
          },
          "html": {
            "description": "The email message's html body",
            "type": "string",
            "example": "<p>Email message html body</p>"
          },
          "attachments": {
            "description": "The email message's attachemnts",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "resourceType",
                "resourceId"
              ],
              "properties": {
                "resourceType": {
                  "description": "The attachment's resource type",
                  "type": "string",
                  "example": "invoice"
                },
                "resourceId": {
                  "description": "The attachment's resource identifier string",
                  "example": "INV-1",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                }
              }
            }
          },
          "createdTime": {
            "description": "The email message's created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The email message's updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to the resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "minimum": 100,
            "maximum": 600,
            "description": "The HTTP status code."
          },
          "error": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\"."
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
          }
        }
      },
      "SystemEvent": {
        "type": "object",
        "description": "The application event",
        "readOnly": true,
        "properties": {
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "rulesCount": {
            "type": "integer",
            "readOnly": true
          },
          "bindsCount": {
            "type": "integer",
            "readOnly": true
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "EventType": {
        "type": "string",
        "description": "Rebilly event type",
        "readOnly": true,
        "enum": [
          "dispute-created",
          "gateway-account-requested",
          "transaction-processed",
          "subscription-activated",
          "subscription-canceled",
          "subscription-created",
          "subscription-renewed",
          "payment-card-expired",
          "invoice-past-due",
          "invoice-paid",
          "transaction-declined",
          "transaction-process-requested",
          "risk-score-changed",
          "transaction-discrepancy-found",
          "transaction-amount-discrepancy-found",
          "renewal-invoice-payment-declined"
        ]
      },
      "ForgotPassword": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "Email",
            "type": "string",
            "format": "email"
          }
        }
      },
      "GatewayAccount": {
        "type": "object",
        "required": [
          "gatewayName",
          "acquirerName",
          "merchantCategoryCode",
          "websites",
          "acceptedCurrencies",
          "organizationId"
        ],
        "discriminator": {
          "propertyName": "gatewayName"
        },
        "properties": {
          "id": {
            "description": "The gateway identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The gateway account's status",
            "readOnly": true,
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "pending",
              "closed"
            ]
          },
          "gatewayName": {
            "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/gateway-name.json"
          },
          "acquirerName": {
            "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/acquirer-name.json"
          },
          "merchantCategoryCode": {
            "description": "The gateway account's merchant category code",
            "type": "integer",
            "minimum": 742,
            "maximum": 9950
          },
          "dccMarkup": {
            "description": "Dynamic currency conversion markup in basis points",
            "type": "integer",
            "minimum": -10000,
            "maximum": 10000
          },
          "dccForceCurrency": {
            "type": "string",
            "description": "Force dynamic currency conversion to the specified currency on each sale.\nLeave it empty to disable force DCC.\n"
          },
          "descriptor": {
            "description": "The gateway account's descriptor",
            "type": "string"
          },
          "cityField": {
            "description": "The gateway account's city field (also known as line 2 descriptor)",
            "type": "string"
          },
          "organizationId": {
            "description": "Organization ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websites": {
            "description": "Websites IDs",
            "type": "array",
            "items": {
              "description": "Website ID",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          },
          "excludedDccQuoteCurrencies": {
            "description": "Excluded Dynamic Currency Conversion Quote Currencies",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "monthlyLimit": {
            "description": "Monthly Limit",
            "type": "number",
            "format": "double",
            "minimum": 0
          },
          "approvalWindowTtl": {
            "description": "The time window (in seconds) allotted for approving a suspended transaction before it is automatically canceled",
            "type": "integer",
            "default": 3600,
            "minimum": 300,
            "maximum": 16777215
          },
          "threeDSecure": {
            "description": "True, if Gateway Account allows 3DSecure",
            "type": "boolean"
          },
          "dynamicDescriptor": {
            "description": "True, if Gateway Account allows dynamic descriptor",
            "type": "boolean"
          },
          "acceptedCurrencies": {
            "description": "Accepted currencies (array of the currency three letter code)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "method": {
            "$ref": "#/components/schemas/Method"
          },
          "paymentCardSchemes": {
            "description": "Accepted payment card brands",
            "type": "array",
            "items": {
              "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-instruments/payment-card-brands.json"
            }
          },
          "isDown": {
            "description": "True if gateway is currently in downtime period.",
            "type": "boolean",
            "readOnly": true
          },
          "amountRestrictions": {
            "description": "Set restrictions on allowed amounts per currency",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmountRestrictions"
            }
          },
          "restriction": {
            "description": "Set restriction conditions on transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/Condition"
              }
            ]
          },
          "timeout": {
            "description": "Gateway Account request timeout in seconds",
            "type": "integer",
            "nullable": true,
            "minimum": 10,
            "maximum": 120
          },
          "token": {
            "description": "Gateway Account token",
            "type": "string",
            "readOnly": true,
            "example": "TwiX3f92k4AiBE27BzTbQ38hHjicBz_w"
          },
          "createdTime": {
            "description": "Gateway Account created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Gateway Account updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/OnBoardingUrlLink"
                }
              ]
            }
          }
        }
      },
      "A1Gateway": {
        "description": "A1Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "A1Gateway credentials object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "A1Gateway account ID"
                  },
                  "password": {
                    "type": "string",
                    "description": "A1Gateway password",
                    "format": "password"
                  }
                },
                "required": [
                  "accountId",
                  "password"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/A1GatewayMpis"
              }
            }
          }
        ]
      },
      "AmexVPC": {
        "description": "AmexVPC config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "AmexVPC credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Merchant ID"
                  },
                  "accessCode": {
                    "type": "string",
                    "description": "Access Code",
                    "format": "password"
                  },
                  "user": {
                    "type": "string",
                    "description": "User (used for refund, void and capture)"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password (used for refund, void and capture)",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "accessCode",
                  "user",
                  "password"
                ]
              },
              "settings": {
                "type": "object",
                "description": "AmexVPC settings object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "Virtual Payment Client URL"
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        ]
      },
      "ApcoPay": {
        "description": "ApcoPay config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "ApcoPay credentials object",
                "properties": {
                  "profileID": {
                    "type": "string",
                    "description": "ApcoPay profile ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "ApcoPay secret word",
                    "format": "password"
                  },
                  "MerchantID": {
                    "type": "string",
                    "description": "ApcoPay merchant ID"
                  },
                  "MerchantPassword": {
                    "type": "string",
                    "description": "ApcoPay merchant password",
                    "format": "password"
                  }
                },
                "required": [
                  "profileID",
                  "secretWord",
                  "MerchantID",
                  "MerchantPassword"
                ]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "ApcoPay's method",
                    "enum": [
                      "AFTERPAY",
                      "IDEAL",
                      "CREDITCLICK",
                      "BANCONTACT",
                      "ONLINEUBERWEISEN"
                    ]
                  }
                },
                "required": [
                  "method"
                ]
              }
            }
          }
        ]
      },
      "AstroPay": {
        "description": "AstroPay config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "AstroPay credentials object",
                "properties": {
                  "x_login": {
                    "type": "string",
                    "description": "AstroPay login"
                  },
                  "x_tran_key": {
                    "type": "string",
                    "description": "AstroPay transaction key",
                    "format": "password"
                  },
                  "secret_key": {
                    "type": "string",
                    "description": "AstroPay secret key",
                    "format": "password"
                  },
                  "web_pay_login": {
                    "type": "string",
                    "description": "AstroPay web pay status login"
                  },
                  "web_pay_tran_key": {
                    "type": "string",
                    "description": "AstroPay web pay status password",
                    "format": "password"
                  }
                },
                "required": [
                  "x_login",
                  "x_tran_key",
                  "secret_key",
                  "web_pay_login",
                  "web_pay_tran_key"
                ]
              },
              "settings": {
                "type": "object",
                "description": "AstroPay settings object",
                "properties": {
                  "banks": {
                    "type": "array",
                    "description": "list of banks which will show on hook page",
                    "items": {
                      "$ref": "#/components/schemas/AstroPayBanks"
                    }
                  },
                  "skipStep": {
                    "type": "boolean",
                    "description": "Skip step for user to enter their personal information."
                  }
                }
              }
            }
          }
        ]
      },
      "AstroPayCard": {
        "description": "AstroPay Card config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "AstroPay Card credentials object",
                "properties": {
                  "x_login": {
                    "type": "string",
                    "description": "AstroPay Card login"
                  },
                  "x_tran_key": {
                    "type": "string",
                    "description": "AstroPay Card transaction key",
                    "format": "password"
                  },
                  "secret_key": {
                    "type": "string",
                    "description": "AstroPay Card secret key",
                    "format": "password"
                  }
                },
                "required": [
                  "x_login",
                  "x_tran_key",
                  "secret_key"
                ]
              }
            }
          }
        ]
      },
      "AuthorizeNet": {
        "description": "AuthorizeNet Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiLoginId": {
                    "type": "string",
                    "description": "AuthorizeNet Gateway api login ID"
                  },
                  "transactionKey": {
                    "description": "AuthorizeNet Gateway Transaction Key",
                    "type": "string",
                    "format": "password"
                  }
                },
                "required": [
                  "apiLoginId",
                  "transactionKey"
                ]
              }
            }
          }
        ]
      },
      "Bambora": {
        "description": "Bambora Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Bambora Gateway merchant ID"
                  },
                  "apiPasscode": {
                    "type": "string",
                    "description": "Bambora Gateway API Passcode",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "apiPasscode"
                ]
              }
            }
          }
        ]
      },
      "BitPay": {
        "description": "BitPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "BitPay credentials object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "BitPay merchant API token",
                    "format": "password"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        ]
      },
      "BlueSnap": {
        "description": "BlueSnap config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "BlueSnap credentials object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "BlueSnap merchant's api username."
                  },
                  "password": {
                    "type": "string",
                    "description": "BlueSnap merchant's api password.",
                    "format": "password"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        ]
      },
      "BraintreePayments": {
        "description": "BraintreePayments Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "BraintreePayments Public Key"
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "BraintreePayments Private Key",
                    "format": "password"
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "BraintreePayments merchant ID",
                    "format": "password"
                  },
                  "merchantAccountId": {
                    "type": "string",
                    "description": "BraintreePayments merchant account ID",
                    "format": "password"
                  }
                },
                "required": [
                  "publicKey",
                  "privateKey",
                  "merchantId",
                  "merchantAccountId"
                ]
              }
            }
          }
        ]
      },
      "Cardknox": {
        "description": "Cardknox Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "xKey": {
                    "type": "string",
                    "description": "Cardknox xKey",
                    "format": "password"
                  }
                },
                "required": [
                  "xKey"
                ]
              }
            }
          }
        ]
      },
      "Cashflows": {
        "description": "Cashflows Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "authId": {
                    "type": "string",
                    "description": "Cashflows Gateway auth ID"
                  },
                  "authPassword": {
                    "type": "string",
                    "description": "Cashflows Gateway auth password",
                    "format": "password"
                  }
                },
                "required": [
                  "authPassword",
                  "authId"
                ]
              }
            }
          }
        ]
      },
      "CASHlib": {
        "description": "CASHlib config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "CASHlib credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "CASHlib API Key",
                    "format": "password"
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "CASHlib merchant id"
                  }
                },
                "required": [
                  "apiKey",
                  "merchantId"
                ]
              }
            }
          }
        ]
      },
      "CashToCode": {
        "description": "CashToCode config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "CashToCode credentials object",
                "properties": {
                  "cashToCodeUsername": {
                    "type": "string",
                    "description": "CashToCode credentials Username"
                  },
                  "cashToCodePassword": {
                    "type": "string",
                    "description": "CashToCode credentials password",
                    "format": "password"
                  },
                  "merchantUsername": {
                    "type": "string",
                    "description": "Merchant credentials Username"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "Merchant credentials password",
                    "format": "password"
                  }
                },
                "required": [
                  "cashToCodeUsername",
                  "cashToCodePassword",
                  "merchantUsername",
                  "merchantPassword"
                ]
              }
            }
          }
        ]
      },
      "CauriPayment": {
        "description": "CauriPayment config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "CauriPayment credentials object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "CauriPayment merchant's public key."
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "CauriPayment merchant's private key.",
                    "format": "password"
                  }
                },
                "required": [
                  "publicKey",
                  "privateKey"
                ]
              }
            }
          }
        ]
      },
      "Cayan": {
        "description": "Cayan Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantSiteId": {
                    "type": "string",
                    "description": "Cayan Gateway merchant site ID"
                  },
                  "merchantName": {
                    "type": "string",
                    "description": "Cayan Gateway merchant name"
                  },
                  "merchantKey": {
                    "type": "string",
                    "description": "Cayan Gateway merchant key",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantSiteId",
                  "merchantName",
                  "merchantKey"
                ]
              }
            }
          }
        ]
      },
      "Chase": {
        "description": "Chase Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Chase Gateway Net Connect username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Chase Gateway Net Connect password",
                    "format": "password"
                  },
                  "coNumber": {
                    "type": "string",
                    "description": "Chase Gateway CO Number used for delimited file reports"
                  },
                  "divisionId": {
                    "type": "string",
                    "description": "Chase Gateway division ID"
                  },
                  "partialAuth": {
                    "type": "boolean",
                    "description": "Support for Partial Auths",
                    "default": false
                  }
                },
                "required": [
                  "username",
                  "password",
                  "coNumber",
                  "divisionId",
                  "partialAuth"
                ]
              }
            }
          }
        ]
      },
      "Credorax": {
        "description": "Credorax Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Credorax Gateway merchant ID"
                  },
                  "merchantMd5Signature": {
                    "type": "string",
                    "description": "Credorax Gateway md5 signature",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "merchantMd5Signature"
                ]
              }
            }
          }
        ]
      },
      "Cryptonator": {
        "description": "Cryptonator config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Cryptonator credentials object",
                "properties": {
                  "merchant_id": {
                    "type": "string",
                    "description": "Cryptonator merchant ID"
                  },
                  "secret": {
                    "type": "string",
                    "description": "Cryptonator secret",
                    "format": "password"
                  }
                },
                "required": [
                  "merchant_id",
                  "secret"
                ]
              }
            }
          }
        ]
      },
      "DataCash": {
        "description": "DataCash Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "client": {
                    "type": "string",
                    "description": "DataCash Gateway client"
                  },
                  "password": {
                    "type": "string",
                    "description": "DataCash Gateway password",
                    "format": "password"
                  },
                  "reportGroup": {
                    "type": "string",
                    "description": "DataCash report group"
                  },
                  "reportUser": {
                    "type": "string",
                    "description": "DataCash report user"
                  },
                  "reportPassword": {
                    "type": "string",
                    "description": "DataCash report password",
                    "format": "password"
                  },
                  "visaPayoutsClient": {
                    "type": "string",
                    "description": "DataCash Gateway client for Visa payouts (OCT)"
                  },
                  "visaPayoutsPassword": {
                    "type": "string",
                    "description": "DataCash Gateway password for Visa payouts (OCT)",
                    "format": "password"
                  },
                  "masterCardPayoutsClient": {
                    "type": "string",
                    "description": "DataCash Gateway client for MasterCard payouts (OCT)"
                  },
                  "masterCardPayoutsPassword": {
                    "type": "string",
                    "description": "DataCash Gateway password for MasterCard payouts (OCT)",
                    "format": "password"
                  }
                },
                "required": [
                  "client",
                  "password"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Datacash settings object",
                "properties": {
                  "policy": {
                    "type": "integer",
                    "description": "Policy",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 2
                  },
                  "delay": {
                    "type": "integer",
                    "description": "Auto Capture delay (in hours)",
                    "minimum": 0,
                    "default": 0
                  }
                }
              },
              "mpi": {
                "$ref": "#/components/schemas/DataCashMpis"
              }
            }
          }
        ]
      },
      "Dengi": {
        "description": "Dengi Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string",
                    "description": "Dengi Gateway project ID"
                  },
                  "publicKey": {
                    "type": "string",
                    "description": "Dengi Gateway public key",
                    "format": "password"
                  },
                  "refundKey": {
                    "type": "string",
                    "description": "Dengi Gateway refund key",
                    "format": "password"
                  }
                },
                "required": [
                  "projectId",
                  "publicKey",
                  "refundKey"
                ]
              }
            }
          }
        ]
      },
      "ecoPayz": {
        "description": "ecoPayz config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "ecoPayz credentials object",
                "properties": {
                  "paymentPageId": {
                    "type": "string",
                    "description": "ecoPayz payment page ID"
                  },
                  "merchantAccountNumber": {
                    "type": "string",
                    "description": "ecoPayz merchant account number"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "ecoPayz merchant password",
                    "format": "password"
                  }
                },
                "required": [
                  "paymentPageId",
                  "merchantAccountNumber",
                  "merchantPassword"
                ]
              },
              "settings": {
                "type": "object",
                "description": "ecoPayz settings object",
                "properties": {
                  "validCurrency": {
                    "type": "string",
                    "description": "Three letter currency code",
                    "enum": [
                      "CAD",
                      "EUR",
                      "GBP",
                      "USD"
                    ]
                  }
                },
                "required": [
                  "validCurrency"
                ]
              }
            }
          }
        ]
      },
      "EcorePay": {
        "description": "EcorePay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "EcorePay Account ID"
                  },
                  "accountAuth": {
                    "type": "string",
                    "description": "EcorePay Account Auth",
                    "format": "password"
                  }
                },
                "required": [
                  "accountId",
                  "accountAuth"
                ]
              }
            }
          }
        ]
      },
      "Elavon": {
        "description": "Elavon config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Elavon credentials object",
                "properties": {
                  "ssl_merchant_id": {
                    "type": "string",
                    "description": "Elavon merchant ID"
                  },
                  "ssl_user_id": {
                    "type": "string",
                    "description": "Elavon user ID"
                  },
                  "ssl_pin": {
                    "type": "string",
                    "description": "Elavon pin",
                    "format": "password"
                  }
                },
                "required": [
                  "ssl_merchant_id",
                  "ssl_user_id",
                  "ssl_pin"
                ]
              }
            }
          }
        ]
      },
      "eMerchantPay": {
        "description": "eMerchantPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "eMerchantPay Gateway client ID"
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "eMerchantPay Gateway api key",
                    "format": "password"
                  },
                  "username": {
                    "type": "string",
                    "description": "eMerchantPay username for Genesis platform"
                  },
                  "token": {
                    "type": "string",
                    "description": "eMerchantPay token for Genesis platform"
                  },
                  "password": {
                    "type": "string",
                    "description": "eMerchantPay password for Genesis platform",
                    "format": "password"
                  }
                }
              },
              "settings": {
                "type": "object",
                "description": "eMerchantPay settings object",
                "properties": {
                  "platform": {
                    "type": "string",
                    "description": "eMerchantPay platform to process payment. default to IPG",
                    "enum": [
                      "IPG",
                      "Genesis"
                    ]
                  }
                }
              },
              "mpi": {
                "$ref": "#/components/schemas/eMerchantPayMpis"
              }
            }
          }
        ]
      },
      "FinTecSystems": {
        "description": "FinTecSystems config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "FinTecSystems credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "FinTecSystems api key",
                    "format": "password"
                  },
                  "recipientIBAN": {
                    "type": "string",
                    "description": "IBAN of the recipient account"
                  },
                  "recipientBIC": {
                    "type": "string",
                    "description": "BIC of the recipient account"
                  }
                },
                "required": [
                  "apiKey",
                  "recipientIBAN",
                  "recipientBIC"
                ]
              },
              "settings": {
                "type": "object",
                "description": "FinTecSystems settings object",
                "properties": {
                  "recipientCountry": {
                    "type": "string",
                    "description": "Two letter country code",
                    "enum": [
                      "AT",
                      "CH",
                      "DE"
                    ]
                  },
                  "recipientHolder": {
                    "type": "string",
                    "description": "Account holder of the recipient account"
                  }
                },
                "required": [
                  "recipientHolder",
                  "recipientCountry"
                ]
              }
            }
          }
        ]
      },
      "Flexepin": {
        "description": "Flexepin Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Flexepin API Key"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "Flexepin API Secret",
                    "format": "password"
                  }
                },
                "required": [
                  "apiKey",
                  "apiSecret"
                ]
              }
            }
          }
        ]
      },
      "Forte": {
        "description": "Forte Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "Forte Gateway account ID"
                  },
                  "locationId": {
                    "type": "string",
                    "description": "Forte Gateway location ID"
                  },
                  "apiAccessId": {
                    "type": "string",
                    "description": "Forte Gateway api access ID",
                    "format": "password"
                  },
                  "apiSecretKey": {
                    "type": "string",
                    "description": "Forte Gateway api secret key",
                    "format": "password"
                  }
                },
                "required": [
                  "accountId",
                  "locationId",
                  "apiAccessId",
                  "apiSecretKey"
                ]
              }
            }
          }
        ]
      },
      "FundSend": {
        "description": "FundSend Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "FundSend Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "FundSend Gateway secret word",
                    "format": "password"
                  }
                },
                "required": [
                  "clientId",
                  "secretWord"
                ]
              }
            }
          }
        ]
      },
      "GET": {
        "description": "GET Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "GET Gateway account ID"
                  }
                },
                "required": [
                  "accountId"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/GETMpis"
              }
            }
          }
        ]
      },
      "Gigadat": {
        "description": "Gigadat config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Gigadat credentials object",
                "properties": {
                  "campaignId": {
                    "type": "string",
                    "description": "Gigadat campaign ID"
                  },
                  "accessToken": {
                    "type": "string",
                    "description": "Gigadat access token",
                    "format": "password"
                  },
                  "securityToken": {
                    "type": "string",
                    "description": "Gigadat security token",
                    "format": "password"
                  }
                },
                "required": [
                  "campaignId",
                  "accessToken",
                  "securityToken"
                ]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "payoutMethod": {
                    "type": "string",
                    "description": "Payout method",
                    "enum": [
                      "e-transfer",
                      "ACH"
                    ]
                  },
                  "sandbox": {
                    "type": "boolean",
                    "description": "True if gateway account is in sandbox mode",
                    "default": false
                  }
                },
                "required": [
                  "payoutMethod",
                  "sandbox"
                ]
              }
            }
          }
        ]
      },
      "GlobalOne": {
        "description": "GlobalOne Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "terminalId": {
                    "type": "string",
                    "description": "GlobalOne Gateway terminal ID"
                  },
                  "sharedSecret": {
                    "type": "string",
                    "description": "GlobalOne Gateway shared secret",
                    "format": "password"
                  }
                },
                "required": [
                  "terminalId",
                  "sharedSecret"
                ]
              }
            }
          }
        ]
      },
      "Gpaysafe": {
        "description": "Gpaysafe Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Gpaysafe apiKey"
                  }
                },
                "required": [
                  "apiKey"
                ]
              }
            }
          }
        ]
      },
      "Greenbox": {
        "description": "Greenbox config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Greenbox credentials object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Greenbox client ID"
                  },
                  "locationId": {
                    "type": "string",
                    "description": "Greenbox location ID"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "Greenbox client secret",
                    "format": "password"
                  }
                },
                "required": [
                  "clientId",
                  "clientSecret",
                  "locationId"
                ]
              }
            }
          }
        ]
      },
      "iCheque": {
        "description": "iCheque Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "iCheque Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "iCheque Gateway secret word",
                    "format": "password"
                  },
                  "apiUserId": {
                    "type": "string",
                    "description": "Username for the Alliance API (transaction reporting)"
                  },
                  "apiSecurityToken": {
                    "type": "string",
                    "description": "Hash of the password for the Alliance API (transaction reporting)",
                    "format": "password"
                  }
                },
                "required": [
                  "clientId",
                  "secretWord"
                ]
              }
            }
          }
        ]
      },
      "iDebit": {
        "description": "iDebit config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "iDebit credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "iDebit merchant account number"
                  },
                  "password": {
                    "type": "string",
                    "description": "iDebit merchant account password",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "password"
                ]
              }
            }
          }
        ]
      },
      "Ilixium": {
        "description": "Ilixium Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Ilixium credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Ilixium Gateway merchant ID"
                  },
                  "accountId": {
                    "type": "string",
                    "description": "Ilixium Gateway account ID"
                  },
                  "digestPassword": {
                    "type": "string",
                    "description": "Ilixium Gateway digest password",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "accountId",
                  "digestPassword"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Ilixium settings object",
                "properties": {
                  "useIpFrame": {
                    "type": "boolean",
                    "description": "Force Ilixium to process via Ip Frame"
                  }
                }
              },
              "mpi": {
                "$ref": "#/components/schemas/IlixiumMpis"
              }
            }
          }
        ]
      },
      "Ingenico": {
        "description": "Ingenico Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Ingenico Gateway merchant ID"
                  },
                  "apiKeyId": {
                    "type": "string",
                    "description": "Ingenico Gateway api key ID"
                  },
                  "apiSecretKey": {
                    "type": "string",
                    "description": "Ingenico Gateway api secret key",
                    "format": "password"
                  },
                  "skipFraudService": {
                    "type": "boolean",
                    "description": "Ingenico skip fraud service"
                  }
                },
                "required": [
                  "merchantId",
                  "apiKeyId",
                  "apiSecretKey"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/IngenicoMpis"
              }
            }
          }
        ]
      },
      "INOVAPAY": {
        "description": "INOVAPAY config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "INOVAPAY credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "INOVAPAY API key"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "INOVAPAY API secret",
                    "format": "password"
                  }
                },
                "required": [
                  "apiKey",
                  "apiSecret"
                ]
              }
            }
          }
        ]
      },
      "Inovio": {
        "description": "Inovio config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Inovio credentials object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Inovio username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Inovio password",
                    "format": "password"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Inovio settings object",
                "properties": {
                  "websiteId": {
                    "type": "string",
                    "description": "Inovio website ID"
                  },
                  "merchantAccountId": {
                    "type": "string",
                    "description": "Inovio merchant account ID"
                  },
                  "productId": {
                    "type": "string",
                    "description": "Inovio product ID"
                  }
                },
                "required": [
                  "websiteId",
                  "merchantAccountId",
                  "productId"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/InovioMpis"
              }
            }
          }
        ]
      },
      "InstaDebit": {
        "description": "InstaDebit config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "InstaDebit credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "InstaDebit merchant account number"
                  },
                  "password": {
                    "type": "string",
                    "description": "InstaDebit merchant account password",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "password"
                ]
              }
            }
          }
        ]
      },
      "Intuit": {
        "description": "Intuit Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "The Intuit client_id key"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "The Intuit client_secret key",
                    "format": "password"
                  }
                },
                "required": [
                  "clientId",
                  "clientSecret"
                ]
              }
            }
          }
        ]
      },
      "IpayOptions": {
        "description": "Ipay Options config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Ipay Options credentials object",
                "properties": {
                  "sid": {
                    "type": "string",
                    "description": "Ipay Options website ID"
                  },
                  "rcode": {
                    "type": "string",
                    "description": "Ipay Options rcode",
                    "format": "password"
                  }
                },
                "required": [
                  "sid",
                  "rcode"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Ipay Options settings object",
                "properties": {
                  "extraStep": {
                    "type": "boolean",
                    "description": "Show extra step for user to enter their email and DNI number"
                  }
                },
                "required": [
                  "extraStep"
                ]
              }
            }
          }
        ]
      },
      "Jeton": {
        "description": "Jeton Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Jeton apiKey",
                    "format": "password"
                  }
                },
                "required": [
                  "apiKey"
                ]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "Jeton's method",
                    "enum": [
                      "CHECKOUT",
                      "DIRECT",
                      "QR",
                      "JETGO"
                    ]
                  }
                },
                "required": [
                  "method"
                ]
              }
            }
          }
        ]
      },
      "JetPay": {
        "description": "JetPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "TerminalID": {
                    "type": "string",
                    "description": "JetPay Gateway terminal ID"
                  }
                },
                "required": [
                  "TerminalID"
                ]
              }
            }
          }
        ]
      },
      "Moneris": {
        "description": "Moneris Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiToken": {
                    "type": "string",
                    "description": "Moneris Gateway api token",
                    "format": "password"
                  },
                  "storeId": {
                    "type": "string",
                    "description": "Moneris Gateway store ID"
                  }
                },
                "required": [
                  "storeId",
                  "apiToken"
                ]
              }
            }
          }
        ]
      },
      "MtaPay": {
        "description": "MTA Pay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "MTA Pay Gateway account ID"
                  },
                  "partyId": {
                    "type": "string",
                    "description": "MTA Pay Gateway party ID"
                  },
                  "md5key": {
                    "type": "string",
                    "description": "MTA Pay Gateway md5key",
                    "format": "password"
                  }
                },
                "required": [
                  "accountId",
                  "partyId",
                  "md5key"
                ]
              },
              "settings": {
                "type": "object",
                "description": "MTA Pay settings object",
                "properties": {
                  "goods": {
                    "type": "string",
                    "description": "MTA Pay Gateway goods"
                  },
                  "mobilePay": {
                    "type": "string",
                    "description": "MTA Pay Gateway mobile pay param"
                  }
                },
                "required": [
                  "mobilePay",
                  "goods"
                ]
              }
            }
          }
        ]
      },
      "Neteller": {
        "description": "Neteller Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Neteller credentials object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Neteller App Client ID"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "Neteller App Client Secret",
                    "format": "password"
                  },
                  "webhookSecretKey": {
                    "type": "string",
                    "description": "Neteller Webhook Secret Key",
                    "format": "password"
                  }
                },
                "required": [
                  "clientId",
                  "clientSecret",
                  "webhookSecretKey"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Neteller settings object",
                "properties": {
                  "netellerGo": {
                    "type": "boolean",
                    "description": "Enable NETELLERgo! payment flow"
                  }
                }
              }
            }
          }
        ]
      },
      "NinjaWallet": {
        "description": "NinjaWallet config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "NinjaWallet credentials object",
                "properties": {
                  "authorizationToken": {
                    "type": "string",
                    "description": "NinjaWallet authorization token",
                    "format": "password"
                  }
                },
                "required": [
                  "authorizationToken"
                ]
              }
            }
          }
        ]
      },
      "NMI": {
        "description": "NMI Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "NMI Gateway api token"
                  },
                  "password": {
                    "type": "string",
                    "description": "NMI Gateway store ID",
                    "format": "password"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/NMIMpis"
              }
            }
          }
        ]
      },
      "OchaPay": {
        "description": "OchaPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiUsername": {
                    "type": "string",
                    "description": "OchaPay Gateway username"
                  },
                  "apiPassword": {
                    "type": "string",
                    "description": "OchaPay Gateway api password",
                    "format": "password"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "OchaPay Gateway secret word",
                    "format": "password"
                  }
                },
                "required": [
                  "apiUsername",
                  "apiPassword",
                  "secretWord"
                ]
              }
            }
          }
        ]
      },
      "Onlineueberweisen": {
        "description": "Onlineueberweisen config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Onlineueberweisen credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Onlineueberweisen API Key"
                  }
                },
                "required": [
                  "apiKey"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Onlineueberweisen settings object",
                "properties": {
                  "payformCode": {
                    "type": "string",
                    "description": "Onlineueberweisen payform code to use customized Payform template",
                    "default": "default"
                  }
                }
              }
            }
          }
        ]
      },
      "Optimal": {
        "description": "Optimal Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "storeId": {
                    "type": "string",
                    "description": "Optimal Gateway store ID"
                  },
                  "storePwd": {
                    "type": "string",
                    "description": "Optimal Gateway store password",
                    "format": "password"
                  },
                  "accountNum": {
                    "type": "string",
                    "description": "Optimal Gateway account number"
                  }
                },
                "required": [
                  "storeId",
                  "storePwd",
                  "accountNum"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/OptimalMpis"
              }
            }
          }
        ]
      },
      "Pagsmile": {
        "description": "Pagsmile Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Pagsmile merchant ID"
                  },
                  "appId": {
                    "type": "string",
                    "description": "Pagsmile app ID"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "Pagsmile secret key",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "appId",
                  "secretKey"
                ]
              }
            }
          }
        ]
      },
      "Panamerican": {
        "description": "Panamerican config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Panamerican credentials object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Panamerican's key"
                  },
                  "password": {
                    "type": "string",
                    "description": "Panamerican's Password",
                    "format": "password"
                  }
                },
                "required": [
                  "key",
                  "password"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/PanamericanMpis"
              },
              "settings": {
                "type": "object",
                "description": "Panamerican settings object",
                "properties": {
                  "extraStep": {
                    "type": "boolean",
                    "description": "Show extra step for user to enter their ID number"
                  },
                  "convertToAscii": {
                    "type": "boolean",
                    "description": "Will convert all chars to ascii"
                  }
                },
                "required": [
                  "extraStep"
                ]
              }
            }
          }
        ]
      },
      "PandaGateway": {
        "description": "Panda Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantCode": {
                    "type": "string",
                    "description": "Panda Gateway merchant code"
                  },
                  "apiCode": {
                    "type": "string",
                    "description": "Panda Gateway api code"
                  },
                  "signKey": {
                    "type": "string",
                    "description": "Panda Gateway sign key",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantCode",
                  "apiCode",
                  "signKey"
                ]
              }
            }
          }
        ]
      },
      "ParamountEft": {
        "description": "Paramount config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Paramount credentials object",
                "properties": {
                  "merchant_id": {
                    "type": "string",
                    "description": "Merchant account ID"
                  },
                  "merchant_pass": {
                    "type": "string",
                    "description": "Merchant account password",
                    "format": "password"
                  },
                  "payee": {
                    "type": "string",
                    "description": "Merchant name/descriptor"
                  }
                },
                "required": [
                  "merchant_id",
                  "merchant_pass",
                  "payee"
                ]
              }
            }
          }
        ]
      },
      "Pay4Fun": {
        "description": "Pay4Fun config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Pay4Fun credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Pay4Fun merchant ID"
                  },
                  "merchantSecret": {
                    "type": "string",
                    "description": "Pay4Fun merchant secret",
                    "format": "password"
                  },
                  "merchantKey": {
                    "type": "string",
                    "description": "Pay4Fun merchant key",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "merchantSecret",
                  "merchantKey"
                ]
              }
            }
          }
        ]
      },
      "Payeezy": {
        "description": "Payeezy Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Payeezy Merchant ID"
                  },
                  "merchantToken": {
                    "type": "string",
                    "description": "Merchant Token",
                    "format": "password"
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "API Key"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "API Secret",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "merchantToken",
                  "apiKey",
                  "apiSecret"
                ]
              }
            }
          }
        ]
      },
      "Payflow": {
        "description": "Payflow config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Payflow credentials object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR"
                  },
                  "vendor": {
                    "type": "string",
                    "description": "Your merchant login ID created when you registered for the account."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password you defined while registering for the account.",
                    "format": "password"
                  }
                },
                "required": [
                  "user",
                  "vendor",
                  "password"
                ]
              }
            }
          }
        ]
      },
      "PayPal": {
        "description": "PayPal Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantIdInPayPal": {
                    "type": "string",
                    "description": "PayPal Gateway merchant id"
                  }
                },
                "required": [
                  "merchantIdInPayPal"
                ]
              },
              "settings": {
                "type": "object",
                "description": "PayPal settings object",
                "properties": {
                  "redirectUrl": {
                    "type": "string",
                    "description": "PayPal Gateway redirect url",
                    "format": "url"
                  }
                },
                "required": [
                  "redirectUrl"
                ]
              }
            }
          }
        ]
      },
      "Payr": {
        "description": "Payr Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Payr Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "Payr Gateway secret word",
                    "format": "password"
                  },
                  "apiUserId": {
                    "type": "string",
                    "description": "Username for the Alliance API (transaction reporting)"
                  },
                  "apiSecurityToken": {
                    "type": "string",
                    "description": "Hash of the password for the Alliance API (transaction reporting)",
                    "format": "password"
                  }
                },
                "required": [
                  "clientId",
                  "secretWord"
                ]
              }
            }
          }
        ]
      },
      "Paysafe": {
        "description": "Paysafe Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "storeId": {
                    "type": "string",
                    "description": "Paysafe Gateway store ID"
                  },
                  "storePwd": {
                    "type": "string",
                    "description": "Paysafe Gateway store password",
                    "format": "password"
                  },
                  "accountNum": {
                    "type": "string",
                    "description": "Paysafe Gateway account number"
                  }
                },
                "required": [
                  "storeId",
                  "storePwd",
                  "accountNum"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/PaysafeMpis"
              }
            }
          }
        ]
      },
      "Paysafecash": {
        "description": "Paysafecash Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Paysafecash API key",
                    "format": "password"
                  }
                },
                "required": [
                  "apiKey"
                ]
              }
            }
          }
        ]
      },
      "Payvision": {
        "description": "Payvision Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "memberId": {
                    "type": "string",
                    "description": "Payvision Gateway member id"
                  },
                  "memberGuid": {
                    "type": "string",
                    "description": "Payvision Gateway member guid",
                    "format": "password"
                  }
                },
                "required": [
                  "memberId",
                  "memberGuid"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Payvision settings object",
                "properties": {
                  "avs": {
                    "type": "boolean",
                    "description": "Payvision Gateway avs"
                  },
                  "delay": {
                    "type": "integer",
                    "description": "Payvision Gateway delay"
                  },
                  "merchantAccountType": {
                    "type": "integer",
                    "description": "Payvision merchant account type"
                  }
                }
              },
              "mpi": {
                "$ref": "#/components/schemas/PayvisionMpis"
              }
            }
          }
        ]
      },
      "Plugnpay": {
        "description": "Plugnpay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "publisher-name": {
                    "type": "string",
                    "description": "Plugnpay Gateway member id"
                  },
                  "publisher-password": {
                    "type": "string",
                    "description": "Plugnpay Gateway avs",
                    "format": "password"
                  }
                },
                "required": [
                  "publisher-name",
                  "publisher-password"
                ]
              }
            }
          }
        ]
      },
      "Realex": {
        "description": "Realex Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Realex Gateway merchant id"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "Realex Gateway secret key",
                    "format": "password"
                  },
                  "rebatePassword": {
                    "type": "string",
                    "description": "Realex Gateway rebate password",
                    "format": "password"
                  },
                  "account": {
                    "type": "string",
                    "description": "Realex Gateway account"
                  }
                },
                "required": [
                  "merchantId",
                  "secretKey",
                  "rebatePassword",
                  "account"
                ]
              }
            }
          }
        ]
      },
      "Realtime": {
        "description": "Realtime Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Realtime Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "Realtime Gateway secret word",
                    "format": "password"
                  }
                },
                "required": [
                  "clientId",
                  "secretWord"
                ]
              }
            }
          }
        ]
      },
      "RebillyProcessor": {
        "description": "RebillyProcessor Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "properties": {
              "mpi": {
                "$ref": "#/components/schemas/RebillyProcessorMpis"
              }
            }
          }
        ]
      },
      "Redsys": {
        "description": "Redsys Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantCode": {
                    "type": "string",
                    "description": "Redsys Gateway merchant code",
                    "format": "password"
                  },
                  "secretCode": {
                    "type": "string",
                    "description": "Redsys Gateway secret code",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantCode",
                  "secretCode"
                ]
              }
            }
          }
        ]
      },
      "Rotessa": {
        "description": "Rotessa config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials",
              "settings"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Rotessa credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Rotessa api key",
                    "format": "password"
                  }
                },
                "required": [
                  "apiKey"
                ]
              },
              "settings": {
                "type": "object",
                "description": "Rotessa settings object",
                "properties": {
                  "delay": {
                    "type": "integer",
                    "description": "Rotessa Gateway time delay for them to process transaction"
                  }
                },
                "required": [
                  "delay"
                ]
              }
            }
          }
        ]
      },
      "RPN": {
        "description": "RPN Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "mid": {
                    "type": "string",
                    "description": "RPN MID"
                  },
                  "key": {
                    "type": "string",
                    "description": "RPN Key",
                    "format": "password"
                  }
                },
                "required": [
                  "mid",
                  "key"
                ]
              }
            }
          }
        ]
      },
      "Sagepay": {
        "description": "Sagepay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "M_ID": {
                    "type": "string",
                    "description": "Sagepay Gateway merchant ID"
                  },
                  "M_KEY": {
                    "type": "string",
                    "description": "Sagepay Gateway merchant key",
                    "format": "password"
                  }
                },
                "required": [
                  "M_ID",
                  "M_KEY"
                ]
              }
            }
          }
        ]
      },
      "SeamlessChex": {
        "description": "SeamlessChex config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "SeamlessChex credentials object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "SeamlessChex publishable key"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "SeamlessChex secret key",
                    "format": "password"
                  }
                },
                "required": [
                  "publicKey",
                  "secretKey"
                ]
              }
            }
          }
        ]
      },
      "Skrill": {
        "description": "Skrill config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Skrill credentials object",
                "properties": {
                  "accountEmail": {
                    "type": "string",
                    "description": "Email address of your Skrill merchant account"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "Secret word used for MD5 signature verifications",
                    "format": "password"
                  },
                  "mqiPassword": {
                    "type": "string",
                    "description": "Password used during MQI/API requests",
                    "format": "password"
                  }
                },
                "required": [
                  "accountEmail",
                  "secretWord"
                ]
              }
            }
          }
        ]
      },
      "SmartInvoice": {
        "description": "SmartInvoice config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "SmartInvoice credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "SmartInvoice merchant account UID"
                  },
                  "applicationId": {
                    "type": "string",
                    "description": "SmartInvoice application UID",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantId",
                  "applicationId"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/SmartInvoiceMpis"
              }
            }
          }
        ]
      },
      "SMSVoucher": {
        "description": "SMSVoucher Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "AppId": {
                    "type": "string",
                    "description": "SMSVoucher AppId"
                  }
                },
                "required": [
                  "AppId"
                ]
              }
            }
          }
        ]
      },
      "SparkPay": {
        "description": "SparkPay config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "SparkPay credentials object",
                "properties": {
                  "shopId": {
                    "type": "string",
                    "description": "SparkPay shop ID"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "SparkPay secret key",
                    "format": "password"
                  }
                },
                "required": [
                  "shopId",
                  "secretKey"
                ]
              }
            }
          }
        ]
      },
      "StaticGateway": {
        "description": "StaticGateway Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object"
          }
        ]
      },
      "Stripe": {
        "description": "Stripe Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "redirectUrl": {
                    "type": "string",
                    "description": "Stripe Gateway redirect url",
                    "format": "url"
                  }
                },
                "required": [
                  "redirectUrl"
                ]
              }
            }
          }
        ]
      },
      "UPayCard": {
        "description": "UPayCard Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "receiver_account": {
                    "type": "string",
                    "description": "merchant receiver account"
                  },
                  "key": {
                    "type": "string",
                    "description": "merchant key",
                    "format": "password"
                  },
                  "secret": {
                    "type": "string",
                    "description": "merchant secret",
                    "format": "password"
                  }
                },
                "required": [
                  "receiver_account",
                  "key",
                  "secret"
                ]
              },
              "settings": {
                "type": "object",
                "description": "UpayCard settings object",
                "properties": {
                  "tolerancePercentage": {
                    "type": "string",
                    "description": "Tolerance paercentage for settled amount"
                  }
                }
              }
            }
          }
        ]
      },
      "USAePay": {
        "description": "USAePay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "sourceKey": {
                    "type": "string",
                    "description": "USAePay Gateway source key",
                    "format": "password"
                  },
                  "pin": {
                    "type": "string",
                    "description": "USAePay Gateway pin",
                    "format": "password"
                  }
                },
                "required": [
                  "sourceKey",
                  "pin"
                ]
              }
            }
          }
        ]
      },
      "VantivLitle": {
        "description": "VantivLitle Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "VantivLitle Gateway username"
                  },
                  "password": {
                    "type": "string",
                    "description": "VantivLitle Gateway password",
                    "format": "password"
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "VantivLitle Gateway merchant ID"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "merchantId"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/VantivLitleMpis"
              }
            }
          }
        ]
      },
      "vegaaH": {
        "description": "vegaaH Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "terminalId": {
                    "type": "string",
                    "description": "vegaaH Gateway terminal ID"
                  },
                  "password": {
                    "type": "string",
                    "description": "vegaaH Gateway password",
                    "format": "password"
                  }
                },
                "required": [
                  "terminalId",
                  "password"
                ]
              }
            }
          }
        ]
      },
      "Walpay": {
        "description": "Walpay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantName": {
                    "type": "string",
                    "description": "Walpay Gateway merchant name"
                  },
                  "merchantPin": {
                    "type": "string",
                    "description": "Walpay Gateway merchant pin",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantName",
                  "merchantPin"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/WalpayMpis"
              }
            }
          }
        ]
      },
      "Wirecard": {
        "description": "Wirecard Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantUsername": {
                    "type": "string",
                    "description": "Wirecard Gateway merchant username"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "Wirecard Gateway merchant password",
                    "format": "password"
                  },
                  "businessSignature": {
                    "type": "string",
                    "description": "Wirecard Gateway merchant business case signature",
                    "format": "password"
                  },
                  "delay": {
                    "type": "integer",
                    "description": "Wirecard Gateway delay"
                  },
                  "sftpUsername": {
                    "type": "string",
                    "description": "Wirecard sftp username."
                  },
                  "sftpPrivateKey": {
                    "type": "string",
                    "description": "Wirecard sftp private key.",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantUsername",
                  "merchantPassword",
                  "businessSignature",
                  "delay"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/WirecardMpis"
              }
            }
          }
        ]
      },
      "Worldpay": {
        "description": "Worldpay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantCode": {
                    "type": "string",
                    "description": "Worldpay Gateway merchant code",
                    "format": "password"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "Worldpay Gateway merchant password",
                    "format": "password"
                  }
                },
                "required": [
                  "merchantCode",
                  "merchantPassword"
                ]
              },
              "mpi": {
                "$ref": "#/components/schemas/WorldpayMpis"
              }
            }
          }
        ]
      },
      "Zotapay": {
        "description": "Zotapay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": [
              "credentials"
            ],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "endpointId": {
                    "type": "string",
                    "description": "Zotapay's endpoint ID"
                  },
                  "controlKey": {
                    "type": "string",
                    "description": "Zotapay's merchant control key",
                    "format": "password"
                  }
                },
                "required": [
                  "endpointId",
                  "controlKey"
                ]
              }
            }
          }
        ]
      },
      "GatewayAccountDowntimeSchedule": {
        "type": "object",
        "required": [
          "startTime",
          "endTime"
        ],
        "properties": {
          "id": {
            "description": "The Gateway Account downtime schedule identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The Gateway Account downtime schedule status",
            "readOnly": true,
            "type": "string",
            "enum": [
              "pending",
              "ongoing",
              "finished"
            ]
          },
          "reason": {
            "description": "The Gateway Account downtime schedule reason",
            "readOnly": true,
            "type": "string",
            "enum": [
              "scheduled-maintenance"
            ]
          },
          "startTime": {
            "description": "The Gateway Account scheduled downtime start time.",
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "description": "The Gateway Account scheduled downtime end time.",
            "type": "string",
            "format": "date-time"
          },
          "createdTime": {
            "description": "Gateway downtime schedule created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Gateway downtime schedule updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "MpiName": {
        "description": "The Merchant plug-in Name",
        "type": "string",
        "enum": [
          "PayvisionMpi",
          "WirecardMpi",
          "IlixiumMpi",
          "DataCashMpi",
          "OptimalMpi",
          "PaysafeMpi",
          "IngenicoMpi",
          "CardinalCommerce",
          "PaayMpi",
          "Panamerican",
          "eMerchantPayMpi",
          "Other"
        ]
      },
      "GlobalWebhook": {
        "type": "object",
        "required": [
          "method",
          "url",
          "credentialHash"
        ],
        "properties": {
          "id": {
            "description": "The webhook identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "eventsFilter": {
            "description": "An array of System event type",
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/GlobalWebhookEventType"
            }
          },
          "status": {
            "$ref": "#/components/schemas/OnOff"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          },
          "url": {
            "description": "URL that will be triggered when the given event occurs.",
            "type": "string",
            "format": "uri"
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeader"
            }
          },
          "credentialHash": {
            "type": "string",
            "description": "Hash from Credentials which is used for authentication by the given URL"
          },
          "createdTime": {
            "description": "List created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "List updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "Links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "GlobalWebhookEventType": {
        "type": "string",
        "description": "Rebilly webhooks event type",
        "enum": [
          "customer-merged",
          "customer-created",
          "customer-updated",
          "dispute-created",
          "gateway-account-requested",
          "invoice-modified",
          "invoice-created",
          "invoice-abandoned",
          "invoice-paid",
          "invoice-voided",
          "invoice-issued",
          "invoice-past-due",
          "offsite-payment-completed",
          "payment-card-expired",
          "renewal-invoice-payment-declined",
          "subscription-trial-ended",
          "subscription-activated",
          "subscription-canceled",
          "subscription-renewed",
          "transaction-processed",
          "transaction-timeout-resolved",
          "transaction-declined",
          "transaction-discrepancy-found",
          "transaction-amount-discrepancy-found"
        ]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "service": {
            "readOnly": true,
            "description": "The integration service",
            "allOf": [
              {
                "$ref": "#/components/schemas/OAuth2CredentialService"
              }
            ]
          },
          "count": {
            "readOnly": true,
            "type": "integer",
            "minimum": 1,
            "description": "The number of available rule sets"
          },
          "configurations": {
            "readOnly": true,
            "type": "array",
            "minItems": 1,
            "description": "The list of configurations",
            "items": {
              "type": "object",
              "properties": {
                "labels": {
                  "description": "The configuration labels",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string"
                  }
                },
                "eventType": {
                  "description": "The configuration event type",
                  "allOf": [
                    {
                      "$ref": "#/components/parameters/systemEventType"
                    }
                  ]
                },
                "title": {
                  "type": "string",
                  "description": "The configuration title"
                }
              }
            }
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/OAuth2ConnectLink"
                }
              ]
            }
          }
        }
      },
      "InvalidError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "invalidFields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "description": "The field name. Dot notation is used for nested object field names."
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": [
                  {
                    "field": "field1",
                    "message": "field1 is invalid"
                  },
                  {
                    "field": "subObject.field2",
                    "message": "field2 is invalid"
                  },
                  {
                    "field": "subObject.field2",
                    "message": "another error in the field2"
                  }
                ]
              }
            }
          }
        ]
      },
      "InvoiceIssue": {
        "type": "object",
        "properties": {
          "issuedTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InvoiceItem": {
        "type": "object",
        "required": [
          "type",
          "unitPrice"
        ],
        "properties": {
          "id": {
            "description": "The website identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Invoice item's type",
            "type": "string",
            "enum": [
              "debit",
              "credit"
            ]
          },
          "unitPrice": {
            "description": "Invoice item's price",
            "type": "number",
            "format": "double"
          },
          "quantity": {
            "description": "Invoice item's quantity",
            "type": "integer"
          },
          "price": {
            "description": "Invoice item's total price",
            "type": "number",
            "format": "double"
          },
          "productId": {
            "description": "The product's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "description": {
            "description": "Invoice item's description",
            "type": "string"
          },
          "discountAmount": {
            "description": "Invoice item discount amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "periodStartTime": {
            "description": "Start time",
            "type": "string",
            "format": "date-time"
          },
          "periodEndTime": {
            "description": "End time",
            "type": "string",
            "format": "date-time"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/SubscriptionLink"
                }
              ]
            }
          }
        }
      },
      "Layout": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "The layout identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "The name of the layout string",
            "type": "string"
          },
          "items": {
            "description": "The array of layout items (planId and starred)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LayoutItem"
            }
          },
          "createdTime": {
            "description": "Layout created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 2,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/ItemsLink"
                }
              ]
            }
          }
        }
      },
      "LayoutItem": {
        "type": "object",
        "required": [
          "planId"
        ],
        "properties": {
          "planId": {
            "description": "The plan identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "starred": {
            "description": "Boolean if the plan should be starred (special callout presentation)",
            "type": "boolean"
          },
          "order": {
            "description": "Item's order in Layout",
            "type": "integer",
            "readOnly": true
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "ApprovalUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "approvalUrl"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "CancelUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "cancelUrl"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "CustomerLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "customer"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "DefaultPaymentInstrumentLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "defaultPaymentInstrument"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "DisputeLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "dispute"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "FileDownloadLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "download"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "FileLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "file"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "GatewayAccountLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "gatewayAccount"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "ItemsLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "items"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "LeadSourceLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "leadSource"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "description": "The link URL",
            "type": "string"
          }
        },
        "required": [
          "href"
        ]
      },
      "NotesLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "notes"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "OAuth2ConnectLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "oauth2Connect"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "OnBoardingUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "onBoardingUrl"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "OrganizationLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "organization"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "ParentTransactionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "parentTransaction"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "PaymentCardLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "paymentCard"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "PaymentLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "payment"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "PermalinkLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "permalink"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "PlanLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "plan"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "RedirectLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The authentication URL where the merchant should be redirected to grant the requested access",
            "type": "string",
            "enum": [
              "redirect"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "RefundUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "refundUrl"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "RetriedTransactionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "retriedTransaction"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "RuleSetHistoryLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "history"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "RuleSetVersionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "rules"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "SelfLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "self"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "SignedLinkLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "signedLink"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "SubscriptionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "subscription"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "TransactionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "transaction"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "WebsiteLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "website"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "List": {
        "type": "object",
        "required": [
          "description",
          "values"
        ],
        "properties": {
          "id": {
            "description": "List ID",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "version": {
            "description": "List version",
            "type": "integer",
            "readOnly": true,
            "minimum": 1
          },
          "description": {
            "description": "List description",
            "type": "string"
          },
          "values": {
            "description": "List values",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdTime": {
            "description": "List created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "List updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "Links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "MailgunCredential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "emailFrom": {
            "type": "string",
            "format": "email",
            "description": "The from email address"
          },
          "apiKey": {
            "type": "string",
            "description": "The mailgun api key"
          },
          "domain": {
            "type": "string",
            "description": "The mailgun domain"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        },
        "description": "Mailgun Credential",
        "required": [
          "emailFrom",
          "apiKey",
          "domain"
        ]
      },
      "Method": {
        "type": "string",
        "description": "The payment method",
        "enum": [
          "payment-card",
          "ach",
          "bank-account",
          "cash",
          "paypal",
          "Alipay",
          "AstroPay-Card",
          "bank-transfer",
          "bitcoin",
          "Boleto",
          "cash-deposit",
          "CASHlib",
          "CashToCode",
          "China-UnionPay",
          "domestic-cards",
          "echeck",
          "ecoPayz",
          "ecoVoucher",
          "EPS",
          "ePay-bg",
          "Flexepin",
          "Giropay",
          "Gpaysafe",
          "iDebit",
          "iDEAL",
          "INOVAPAY-pin",
          "INOVAPAY-wallet",
          "InstaDebit",
          "instant-bank-transfer",
          "Interac",
          "Interac-online",
          "Interac-eTransfer",
          "invoice",
          "Jeton",
          "Klarna",
          "miscellaneous",
          "Neteller",
          "Nordea-Solo",
          "OchaPay",
          "online-bank-transfer",
          "Onlineueberweisen",
          "Paysafecard",
          "Pay4Fun",
          "PinPay",
          "phone",
          "POLi",
          "Przelewy24",
          "QQPay",
          "Resurs",
          "SEPA",
          "Skrill",
          "Skrill-Rapid-Transfer",
          "SMSVoucher",
          "SparkPay",
          "Trustly",
          "UPayCard",
          "voucher",
          "WeChat-Pay"
        ]
      },
      "A1GatewayMpis": {
        "description": "A1Gateway Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaayMpi",
              "Other"
            ]
          }
        }
      },
      "DataCashMpi": {
        "description": "DataCash Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataCashMpis"
          }
        ]
      },
      "DataCashMpis": {
        "description": "DataCash Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "DataCashMpi"
            ]
          }
        }
      },
      "eMerchantPayMpis": {
        "description": "eMerchantPay Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaayMpi",
              "eMerchantPayMpi",
              "Other"
            ]
          }
        }
      },
      "GETMpis": {
        "description": "GET Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaayMpi",
              "Other"
            ]
          }
        }
      },
      "IlixiumMpi": {
        "description": "Ilixium Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/IlixiumMpis"
          }
        ]
      },
      "IlixiumMpis": {
        "description": "IlixiumMpis Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "IlixiumMpi"
            ]
          }
        }
      },
      "IngenicoMpi": {
        "description": "Ingenico Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/IngenicoMpis"
          }
        ]
      },
      "IngenicoMpis": {
        "description": "Ingenico Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "IngenicoMpi"
            ]
          }
        }
      },
      "InovioMpi": {
        "description": "Inovio Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/InovioMpis"
          }
        ]
      },
      "InovioMpis": {
        "description": "Inovio Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "InovioMpi"
            ]
          }
        }
      },
      "NMIMpis": {
        "description": "NMI Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaayMpi",
              "Other"
            ]
          }
        }
      },
      "OptimalMpi": {
        "description": "Optimal Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/OptimalMpis"
          }
        ]
      },
      "OptimalMpis": {
        "description": "Optimal Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "OptimalMpi"
            ]
          }
        }
      },
      "Other": {
        "description": "Other",
        "allOf": [
          {
            "$ref": "#/components/schemas/A1GatewayMpis"
          },
          {
            "$ref": "#/components/schemas/eMerchantPayMpis"
          },
          {
            "$ref": "#/components/schemas/GETMpis"
          },
          {
            "$ref": "#/components/schemas/NMIMpis"
          },
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          },
          {
            "$ref": "#/components/schemas/VantivLitleMpis"
          },
          {
            "$ref": "#/components/schemas/WalpayMpis"
          },
          {
            "$ref": "#/components/schemas/WorldpayMpis"
          }
        ]
      },
      "PaayMpi": {
        "description": "Paay",
        "allOf": [
          {
            "$ref": "#/components/schemas/A1GatewayMpis"
          },
          {
            "$ref": "#/components/schemas/eMerchantPayMpis"
          },
          {
            "$ref": "#/components/schemas/GETMpis"
          },
          {
            "$ref": "#/components/schemas/NMIMpis"
          },
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          },
          {
            "$ref": "#/components/schemas/VantivLitleMpis"
          },
          {
            "$ref": "#/components/schemas/WalpayMpis"
          },
          {
            "$ref": "#/components/schemas/WorldpayMpis"
          },
          {
            "type": "object",
            "required": [
              "apiKey",
              "secret",
              "mpiUrl",
              "sandboxMpiUrl"
            ],
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Paay ApiKey"
              },
              "secret": {
                "type": "string",
                "format": "password",
                "description": "Paay secret"
              },
              "mpiUrl": {
                "type": "string",
                "description": "Paay MPI url"
              },
              "sandboxMpiUrl": {
                "type": "string",
                "description": "Paay sandbox MPI url"
              }
            }
          }
        ]
      },
      "PanamericanMpis": {
        "description": "Panamerican Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "Panamerican"
            ]
          }
        }
      },
      "PanmericanMpi": {
        "description": "Panmerican Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/PanamericanMpis"
          }
        ]
      },
      "PaysafeMpi": {
        "description": "Paysafe Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaysafeMpis"
          }
        ]
      },
      "PaysafeMpis": {
        "description": "Paysafe Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaysafeMpi"
            ]
          }
        }
      },
      "CardinalCommerce": {
        "description": "CardinalCommerce Mpi Credentials",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          },
          {
            "type": "object",
            "required": [
              "merchantId",
              "processorId",
              "transactionPwd"
            ],
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Cardinal MerchantId"
              },
              "processorId": {
                "type": "string",
                "description": "Cardinal ProcessorId"
              },
              "transactionPwd": {
                "type": "string",
                "format": "password",
                "description": "Cardinal TransactionPwd"
              }
            }
          }
        ]
      },
      "PayvisionMpi": {
        "description": "Payvision Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          }
        ]
      },
      "PayvisionMpis": {
        "description": "Payvision Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PayvisionMpi",
              "CardinalCommerce",
              "PaayMpi",
              "Other"
            ]
          }
        }
      },
      "RebillyProcessorMpi": {
        "description": "RebillyProcessor Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/RebillyProcessorMpis"
          }
        ]
      },
      "RebillyProcessorMpis": {
        "description": "RebillyProcessorMpis Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "RebillySandboxMpi"
            ]
          }
        }
      },
      "SmartInvoiceMpi": {
        "description": "SmartInvoice Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmartInvoiceMpis"
          }
        ]
      },
      "SmartInvoiceMpis": {
        "description": "SmartInvoice Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "SmartInvoiceMpi"
            ]
          }
        }
      },
      "VantivLitleMpis": {
        "description": "VantivLitle Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaayMpi",
              "Other"
            ]
          }
        }
      },
      "WalpayMpis": {
        "description": "WalpayMpis Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaayMpi",
              "Other"
            ]
          }
        }
      },
      "WirecardMpi": {
        "description": "Wirecard Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/WirecardMpis"
          }
        ]
      },
      "WirecardMpis": {
        "description": "Wirecard Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "WirecardMpi"
            ]
          }
        }
      },
      "WorldpayMpis": {
        "description": "Worldpay Mpis",
        "discriminator": {
          "propertyName": "name"
        },
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": [
              "PaayMpi",
              "Other"
            ]
          }
        }
      },
      "Note": {
        "type": "object",
        "required": [
          "content",
          "relatedType",
          "relatedId"
        ],
        "properties": {
          "id": {
            "description": "The note identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "createdBy": {
            "description": "The note's creator",
            "type": "string",
            "readOnly": true
          },
          "fromSupport": {
            "description": "Indicates that note was ceated by support user",
            "type": "boolean",
            "readOnly": true
          },
          "content": {
            "description": "The note's name",
            "type": "string"
          },
          "archived": {
            "description": "Is the note archived (excluded from List method)",
            "type": "boolean"
          },
          "relatedType": {
            "description": "The note's related resource type",
            "type": "string",
            "enum": [
              "customer"
            ]
          },
          "relatedId": {
            "description": "The note's related resource ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "createdTime": {
            "description": "Note created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Note updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "archivedTime": {
            "description": "Note archived time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "GoogleSpreadsheet": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The google spreadsheet indentifier string",
            "readOnly": true,
            "type": "string",
            "example": "2ytkMntAC2Ke7aIgpaOBjz9IORRlNRjwFqO7KvyNam3B"
          },
          "name": {
            "readOnly": true,
            "description": "The google spreadsheet name",
            "type": "string",
            "example": "Spreadsheet 1"
          }
        }
      },
      "OAuth2Credential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "service": {
            "description": "The name of service that the OAuth2 credential belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/OAuth2CredentialService"
              }
            ]
          },
          "code": {
            "description": "The OAuth2 code provided by the authentication server",
            "type": "string",
            "example": "2/smAHUUr9jOxw_IOp47Y_dH1r2Y"
          },
          "accessToken": {
            "description": "The OAuth2 access token",
            "readOnly": true,
            "type": "string",
            "example": "zw34.PltIPtJZHmEgZS9R4RoGpzaRrJd5MYjZIONQ2MjWSCj7N7Iqp9BXXFIbkhDRfAPs6cB1pKtTjLUgb3ofzgHUprJfnRiMDTnB_yPMK7vtgobCX4SUs7fhrR6bdApq"
          },
          "refreshToken": {
            "description": "The OAuth2 refresh token",
            "readOnly": true,
            "type": "string",
            "example": "2/4DPERp2EiySF6JUIOTS4jM5f0JmLG2gPcpGaWYTGU94"
          },
          "scopes": {
            "description": "The OAuth2 granted list access",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "https://www.googleapis.com/auth/drive.metadata.readonly"
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                }
              ]
            }
          }
        },
        "description": "OAuth2 credential",
        "required": [
          "code",
          "scopes",
          "service"
        ]
      },
      "OAuth2CredentialService": {
        "type": "string",
        "enum": [
          "google-sheets"
        ]
      },
      "OnOff": {
        "type": "string",
        "default": "active",
        "enum": [
          "active",
          "inactive"
        ]
      },
      "Organization": {
        "type": "object",
        "required": [
          "name",
          "country"
        ],
        "properties": {
          "id": {
            "description": "The organization identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "createdTime": {
            "description": "The organization created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The organization updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "name": {
            "description": "The organization name",
            "type": "string",
            "maxLength": 60
          },
          "address": {
            "description": "The organization street address",
            "type": "string",
            "maxLength": 60
          },
          "address2": {
            "description": "The organization street address",
            "type": "string",
            "maxLength": 60
          },
          "city": {
            "description": "The organization city",
            "type": "string",
            "maxLength": 45
          },
          "region": {
            "description": "The organization region (state)",
            "type": "string",
            "maxLength": 45
          },
          "country": {
            "description": "The organization country ISO Alpha-2 code",
            "type": "string",
            "pattern": "^[A-Z]{2}$"
          },
          "postalCode": {
            "description": "The organization postal code",
            "type": "string",
            "maxLength": 10
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/ContactPhoneNumbers"
          },
          "emails": {
            "$ref": "#/components/schemas/ContactEmails"
          },
          "taxDescriptor": {
            "description": "The organization's tax label. This will be displayed on the invoice.",
            "type": "string",
            "maxLength": 255
          },
          "invoiceTimeZone": {
            "description": "Invoice will use this time zone to display time otherwise UTC will be used. Example \"America/New_York\"",
            "type": "string",
            "maxLength": 50
          },
          "isPrimary": {
            "description": "True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false)",
            "type": "boolean"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "PaymentCardMigration": {
        "type": "object",
        "required": [
          "fromGatewayAccountId",
          "toGatewayAccountId",
          "paymentCardIds"
        ],
        "properties": {
          "fromGatewayAccountId": {
            "description": "An ID of Gateway Account cards should be migrated from",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "toGatewayAccountId": {
            "description": "An ID of Gateway Account cards should be migrated to",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "paymentCardIds": {
            "type": "array",
            "minItems": 1,
            "items": {
              "description": "An array of payment card IDs",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          },
          "migratedCards": {
            "type": "integer",
            "description": "Number of cards that were successfully migrated",
            "readOnly": true
          }
        }
      },
      "PaymentInstrument": {
        "type": "object",
        "required": [
          "method"
        ],
        "discriminator": {
          "propertyName": "method"
        },
        "properties": {
          "method": {
            "$ref": "#/components/schemas/Method"
          }
        }
      },
      "ach": {
        "description": "ACH payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "required": [
              "bankAccountId"
            ],
            "properties": {
              "bankAccountId": {
                "description": "The bank account identifier string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "cash": {
        "description": "Cash payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "properties": {
              "receivedBy": {
                "description": "The receiver's name",
                "type": "string"
              }
            }
          }
        ]
      },
      "payment-card": {
        "description": "Payment card payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "required": [
              "paymentCardId"
            ],
            "properties": {
              "paymentCardId": {
                "description": "The payment card identifier string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "paypal": {
        "description": "PayPal payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "required": [
              "payPalAccountId"
            ],
            "properties": {
              "payPalAccountId": {
                "description": "The PayPal account identifier string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "AmountAdjustment": {
        "type": "object",
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "none": "#/components/schemas/AmountAdjustmentNone"
          }
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "none",
              "partial",
              "discount"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "PaymentRetry": {
        "type": "object",
        "properties": {
          "attempts": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "scheduleInstruction": {
                  "$ref": "#/components/schemas/CommonScheduleInstruction"
                },
                "paymentInstruction": {
                  "$ref": "#/components/schemas/AmountAdjustment"
                }
              },
              "required": [
                "scheduleInstruction",
                "paymentInstruction"
              ]
            }
          },
          "afterAttemptPolicy": {
            "description": "The policy on the attempt finishes",
            "type": "string",
            "enum": [
              "none",
              "change-subscription-renewal-time"
            ]
          },
          "afterRetryEndPolicy": {
            "description": "The policy on the retry ends",
            "type": "string",
            "enum": [
              "none",
              "cancel-subscription"
            ]
          }
        },
        "required": [
          "attempts",
          "afterAttemptPolicy",
          "afterRetryEndPolicy"
        ]
      },
      "AmountAdjustmentNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountAdjustment"
          }
        ]
      },
      "discount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountAdjustment"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "description": "The payment amount discount",
                "type": "number",
                "format": "float"
              },
              "type": {
                "description": "The payment amount discount type",
                "type": "string",
                "enum": [
                  "percent",
                  "fixed"
                ]
              }
            },
            "required": [
              "value",
              "type"
            ]
          }
        ]
      },
      "partial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountAdjustment"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "description": "The payment amount",
                "type": "number",
                "format": "float"
              },
              "type": {
                "description": "The payment amount type",
                "type": "string",
                "enum": [
                  "percent",
                  "fixed"
                ]
              }
            },
            "required": [
              "value",
              "type"
            ]
          }
        ]
      },
      "PostmarkCredential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "serverApiToken": {
            "type": "string",
            "description": "The Postmark server API token",
            "example": "dd0508z9-2291-6794-3376-z0a70g12eqm9"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        },
        "description": "Postmark Credential",
        "required": [
          "serverApiToken"
        ]
      },
      "PriceBasedShippingRate": {
        "type": "object",
        "required": [
          "name",
          "currency",
          "price"
        ],
        "properties": {
          "name": {
            "description": "The shipping rate name",
            "type": "string",
            "maxLength": 255
          },
          "minOrderSubtotal": {
            "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
            "type": "number",
            "format": "double",
            "default": 0
          },
          "maxOrderSubtotal": {
            "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
            "type": "number",
            "format": "double"
          },
          "price": {
            "description": "The shipping price - 0 is a valid value (for free)",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "description": "Currency (three letter ISO 4217 code)",
            "type": "string"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The user identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "email": {
            "description": "The user email",
            "readOnly": true,
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "firstName": {
            "description": "User's first name",
            "readOnly": true,
            "type": "string"
          },
          "lastName": {
            "description": "User's last name",
            "readOnly": true,
            "type": "string"
          },
          "businessPhone": {
            "description": "The user business phone number",
            "readOnly": true,
            "type": "string"
          },
          "mobilePhone": {
            "description": "The user mobile phone number",
            "readOnly": true,
            "type": "string"
          },
          "availableCurrencies": {
            "type": "array",
            "description": "An array of reporting currencies enabled for the merchant",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "reportingCurrency": {
            "description": "The user's ISO Alpha-3 code used for reports",
            "type": "string"
          },
          "totpRequired": {
            "description": "The user setting of two-factor authentification",
            "type": "boolean"
          },
          "totpSecret": {
            "description": "The user TOTP key for authentification app (if TOTP enabled)",
            "readOnly": true,
            "type": "string"
          },
          "totpUrl": {
            "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
            "readOnly": true,
            "type": "string",
            "format": "url"
          },
          "oneTimePassword": {
            "description": "The one time password generated by Google Authenticator (required when enabling/disabling 2FA).\nShould contain digits only.\n",
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "example": "123456"
          },
          "country": {
            "description": "The user country setting - two letter code",
            "readOnly": true,
            "type": "string"
          },
          "preferences": {
            "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
            "type": "object"
          }
        }
      },
      "ResetPassword": {
        "type": "object",
        "required": [
          "newPassword"
        ],
        "properties": {
          "newPassword": {
            "description": "New password",
            "type": "string",
            "format": "password"
          }
        }
      },
      "ResetPasswordTokenInfo": {
        "type": "object",
        "properties": {
          "token": {
            "description": "Token",
            "type": "string",
            "readOnly": true
          },
          "sentTime": {
            "description": "Creation date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "ResourceCustomFields": {
        "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
        "type": "object"
      },
      "ResourceId": {
        "type": "string",
        "description": "The resource ID. Defaults to UUID v4",
        "maxLength": 50,
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      },
      "add-risk-score": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "description": "Add risk score",
            "properties": {
              "score": {
                "type": "integer",
                "default": 0
              }
            }
          }
        ]
      },
      "blacklist": {
        "description": "Add customer data to blacklist",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "customer-id",
                  "email",
                  "fingerprint",
                  "ip-address",
                  "payment-card"
                ]
              },
              "ttl": {
                "type": "integer",
                "description": "Blacklist TTL. Defaults to zero, meaning blacklist record won't expire ever.",
                "default": 0
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "cancel-scheduled-payments": {
        "description": "",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          }
        ]
      },
      "display-other-choices": {
        "description": "Display Other Choices",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "choices": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "langIso": {
                      "description": "Language (two letter ISO 639-1 code)",
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "langIso",
                    "content"
                  ]
                }
              }
            },
            "required": [
              "choices"
            ]
          }
        ]
      },
      "guess-payment-card-expiration": {
        "description": "",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          }
        ]
      },
      "offer-purchase-bump": {
        "description": "Offer Purchase Bump",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "bumpOffers": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Bump offer name",
                      "type": "string"
                    },
                    "weight": {
                      "description": "Bump offer weight",
                      "type": "string"
                    },
                    "bumpAmount": {
                      "description": "Bump amount offer",
                      "type": "number"
                    },
                    "bonusAmount": {
                      "description": "Bonus amount offer",
                      "type": "number"
                    },
                    "choices": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "langIso": {
                            "description": "Language (two letter ISO 639-1 code)",
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "langIso",
                          "content"
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "weight",
                    "bumpAmount",
                    "bonusAmount",
                    "choices"
                  ]
                }
              }
            },
            "required": [
              "bumpOffers"
            ]
          }
        ]
      },
      "pick-gateway-account": {
        "description": "",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "pickInstruction": {
                "$ref": "#/components/schemas/GatewayAccountPickInstruction"
              }
            },
            "required": [
              "pickInstruction"
            ]
          }
        ]
      },
      "request-kyc": {
        "description": "Request KYC page to verify customer identity",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "excludePolicy": {
                "type": "string",
                "description": "Who should be excluded from the verification",
                "enum": [
                  "customers-with-accepted-document",
                  "customers-with-document",
                  "none"
                ],
                "default": "customers-with-accepted-document"
              },
              "isMandatory": {
                "type": "boolean",
                "description": "Is the verification mandatory",
                "default": true
              },
              "promptPolicy": {
                "type": "string",
                "description": "When to prompt, before or after processing the transaction",
                "enum": [
                  "before-transaction-process",
                  "after-transaction-process"
                ],
                "default": "before-transaction-process"
              },
              "rejectedBeforeTransactionProcessPolicy": {
                "type": "string",
                "description": "What to do if verification is before transaction processing, and is rejected",
                "enum": [
                  "process-transaction",
                  "decline",
                  "use-alternate-gateway"
                ],
                "default": "decline"
              },
              "alternateGatewayAccountIfRejected": {
                "type": "string",
                "description": "Gateway account to use if use-alternate-gateway is selected for rejectedBeforeTransactionProcessPolicy"
              },
              "rejectedAfterTransactionProcessPolicy": {
                "type": "string",
                "description": "What to do if verification is after transaction processing, and is rejected",
                "enum": [
                  "proceed"
                ],
                "default": "proceed"
              },
              "optionalPolicy": {
                "type": "string",
                "description": "What to do if verification is optional",
                "enum": [
                  "allow-bypass",
                  "allow-use-alternate-gateway"
                ],
                "default": "allow-bypass"
              },
              "alternateGatewayAccountIfOptional": {
                "type": "string",
                "description": "Gateway account to use if allow-use-alternate-gateway is selected for optionalPolicy"
              },
              "bypassCurrencyToDisplay": {
                "description": "The currency three letter code to display on the bypass link, if optional",
                "type": "string",
                "default": "USD"
              }
            },
            "required": [
              "excludePolicy",
              "isMandatory",
              "promptPolicy",
              "rejectedBeforeTransactionProcessPolicy",
              "rejectedAfterTransactionProcessPolicy",
              "optionalPolicy"
            ]
          }
        ]
      },
      "schedule-invoice-retry": {
        "description": "Schedule an invoice retry",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "attempts": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "scheduleInstruction": {
                      "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
                    }
                  },
                  "required": [
                    "scheduleInstruction"
                  ]
                }
              },
              "afterAttemptPolicies": {
                "description": "The policy on the attempt finishes",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "change-subscription-renewal-time"
                  ]
                }
              },
              "afterRetryEndPolicies": {
                "description": "The policy on the retry ends",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "abandon-invoice",
                    "cancel-subscription"
                  ]
                }
              },
              "overrideRetryInstruction": {
                "description": "Whether to replace the existing retry or not",
                "type": "boolean"
              }
            },
            "required": [
              "attempts",
              "afterAttemptPolicies",
              "afterRetryEndPolicies",
              "overrideRetryInstruction"
            ]
          }
        ]
      },
      "schedule-payment-retry": {
        "description": "",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "$ref": "#/components/schemas/PaymentRetry"
          }
        ]
      },
      "schedule-payment": {
        "description": "",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "description": "The calculation instruction of scheduled time for payment",
            "properties": {
              "scheduleInstruction": {
                "$ref": "#/components/schemas/CommonScheduleInstruction"
              },
              "amountPolicy": {
                "type": "string",
                "enum": [
                  "invoice-amount-due"
                ]
              }
            },
            "required": [
              "scheduleInstruction",
              "amountPolicy"
            ]
          }
        ]
      },
      "send-email": {
        "description": "",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the messages. (This title will appear in reports.)"
              },
              "emails": {
                "type": "array",
                "description": "The list of messages.",
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/RulesEmailNotification"
                }
              },
              "splitTestStartTime": {
                "type": "string",
                "format": "date-time",
                "description": "The split test start time"
              }
            },
            "required": [
              "emails"
            ]
          }
        ]
      },
      "stop-subscriptions": {
        "description": "Stop active subscriptions",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          }
        ]
      },
      "tag-or-untag-customer": {
        "description": "Tag or untag a customer with specified list of tags",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "type": "object",
            "properties": {
              "addingTags": {
                "description": "The list of tag ID customer should be tagged with",
                "type": "array",
                "maxItems": 1000,
                "items": {
                  "type": "string"
                }
              },
              "removingTags": {
                "description": "The list of tag ID customer should be untagged from",
                "type": "array",
                "maxItems": 1000,
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "addingTags",
              "removingTags"
            ]
          }
        ]
      },
      "trigger-webhook": {
        "description": "",
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleAction"
          },
          {
            "$ref": "#/components/schemas/Webhook"
          }
        ]
      },
      "SendPreviewWebhook": {
        "description": "Trigger a test webhook",
        "allOf": [
          {
            "$ref": "#/components/schemas/Webhook"
          }
        ]
      },
      "SendTestEmail": {
        "description": "Send a test email",
        "allOf": [
          {
            "$ref": "#/components/schemas/RulesEmailNotification"
          }
        ]
      },
      "Bind": {
        "type": "object",
        "description": "The rule",
        "properties": {
          "name": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "uniqueItems": true,
            "example": [
              "test-rule",
              "category:foo"
            ],
            "items": {
              "type": "string",
              "pattern": "[a-zA-Z][a-zA-Z0-9:-]*"
            }
          },
          "status": {
            "$ref": "#/components/schemas/OnOff"
          },
          "criteria": {
            "$ref": "#/components/schemas/Condition"
          },
          "actions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/RuleAction"
            }
          }
        },
        "required": [
          "name",
          "actions"
        ]
      },
      "GatewayAccountPickInstruction": {
        "type": "object",
        "discriminator": {
          "propertyName": "method"
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "gateway-account-weights",
              "gateway-acquirer-weights"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "MatchedRule": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "id": {
            "description": "Event tracking id",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "event": {
            "$ref": "#/components/schemas/EventType"
          },
          "description": {
            "description": "Rule's description",
            "type": "string"
          },
          "rulesVersion": {
            "type": "integer",
            "description": "Rule version"
          },
          "occurredTime": {
            "description": "Time when event occurred.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "context": {
            "type": "object",
            "description": "Event's context",
            "additionalProperties": {
              "type": "string"
            }
          },
          "processedRules": {
            "type": "object",
            "description": "Processed rules",
            "properties": {
              "name": {
                "type": "string",
                "description": "Rule name"
              },
              "actions": {
                "type": "array",
                "description": "Rule actions applied",
                "items": {
                  "type": "string"
                }
              },
              "result": {
                "type": "string",
                "description": "Rule result"
              }
            }
          }
        }
      },
      "gateway-account-weights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccountPickInstruction"
          },
          {
            "type": "object",
            "properties": {
              "weightedList": {
                "type": "array",
                "uniqueItems": true,
                "minimum": 0,
                "items": {
                  "type": "object",
                  "properties": {
                    "gatewayAccountId": {
                      "$ref": "#/components/schemas/ResourceId"
                    },
                    "weight": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "gatewayAccountId",
                    "weight"
                  ]
                },
                "example": "[\n  {\"gatewayAccountId\": \"my_gateway_account_1\", \"weight\": 80},\n  {\"gatewayAccountId\": \"my_gateway_account_2\", \"weight\": 20}\n]\n"
              }
            },
            "required": [
              "weightedList"
            ]
          }
        ]
      },
      "gateway-acquirer-weights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccountPickInstruction"
          },
          {
            "type": "object",
            "properties": {
              "weightedList": {
                "type": "array",
                "uniqueItems": true,
                "minimum": 0,
                "items": {
                  "type": "object",
                  "properties": {
                    "gatewayName": {
                      "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/gateway-name.json"
                    },
                    "acquirerName": {
                      "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/acquirer-name.json"
                    },
                    "weight": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "gatewayName",
                    "acquirerName",
                    "weight"
                  ]
                },
                "example": "[\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"AIB\", \"weight\": 80},\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"B+S\", \"weight\": 20}\n"
              }
            },
            "required": [
              "weightedList"
            ]
          }
        ]
      },
      "Rule": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bind"
          },
          {
            "type": "object",
            "properties": {
              "final": {
                "description": "Whether rule is final, meaning stop further matching rules if this is matched",
                "type": "boolean",
                "default": true
              }
            }
          }
        ]
      },
      "RuleAction": {
        "type": "object",
        "discriminator": {
          "propertyName": "name"
        },
        "properties": {
          "name": {
            "type": "string",
            "description": "The action name",
            "enum": [
              "blacklist",
              "cancel-scheduled-payments",
              "guess-payment-card-expiration",
              "pick-gateway-account",
              "schedule-payment-retry",
              "schedule-payment",
              "schedule-invoice-retry",
              "send-email",
              "trigger-webhook",
              "stop-subscriptions",
              "add-risk-score",
              "request-kyc",
              "tag-or-untag-customer",
              "display-other-choices",
              "offer-purchase-bump"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/OnOff"
          }
        },
        "required": [
          "name"
        ]
      },
      "RulesEmailNotification": {
        "type": "object",
        "properties": {
          "credentialHash": {
            "type": "string",
            "description": "SMTP or Mailgun credential identifier string."
          },
          "version": {
            "type": "string",
            "description": "The message version. (By default is empty, but if you make multiple versions, you can name or number them to distinguish them.)"
          },
          "from": {
            "type": "string",
            "description": "The sender address. The template placeholders are allowed.",
            "maxLength": 254
          },
          "to": {
            "type": "array",
            "description": "The recipients addresses. The template placeholders are allowed.",
            "minItems": 1,
            "items": {
              "type": "string",
              "maxLength": 254
            }
          },
          "cc": {
            "type": "array",
            "description": "The recipients addresses. The template placeholders are allowed.",
            "items": {
              "type": "string",
              "maxLength": 254
            }
          },
          "bcc": {
            "type": "array",
            "description": "The hidden recipients addresses. The template placeholders are allowed.",
            "items": {
              "type": "string",
              "maxLength": 254
            }
          },
          "subject": {
            "type": "string",
            "description": "The message subject. The template placeholders are allowed.",
            "maxLength": 998
          },
          "text": {
            "type": "string",
            "description": "The message's text body.\nLeave empty to use content from \"bodyHtml\".\nThe template placeholders are allowed.\n"
          },
          "html": {
            "type": "string",
            "description": "The message's html body.\nLeave empty to use content from \"bodyText\".\nThe template placeholders are allowed.\n"
          },
          "editor": {
            "type": "string",
            "description": "The source of the message required for the email editor.\nNot used for sending emails.\nUsed by the editor to reproduce the message for future updates.\n"
          },
          "attachments": {
            "description": "The message's attachments",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "resourceType",
                "resourceId"
              ],
              "properties": {
                "resourceType": {
                  "description": "The attachment's resource type.",
                  "type": "string",
                  "example": "invoice"
                },
                "resourceId": {
                  "description": "The attachment's resource identifier string. The template placeholders are allowed.",
                  "type": "string",
                  "maxLength": 255,
                  "example": "INV-1"
                }
              }
            }
          },
          "weight": {
            "type": "integer",
            "description": "The message's weight.",
            "minimum": 0,
            "maximum": 100,
            "example": 75,
            "default": 100
          }
        },
        "required": [
          "from",
          "to",
          "subject",
          "text",
          "html"
        ]
      },
      "RuleSet": {
        "type": "object",
        "description": "Set of rules for particular event",
        "properties": {
          "version": {
            "type": "integer",
            "readOnly": true
          },
          "binds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bind"
            }
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "updatedTime": {
            "$ref": "#/components/schemas/ServerTimestamp"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        },
        "required": [
          "rules"
        ]
      },
      "RuleSetHistoryItem": {
        "type": "object",
        "description": "Version of rules",
        "readOnly": true,
        "properties": {
          "version": {
            "type": "integer"
          },
          "createdTime": {
            "$ref": "#/components/schemas/ServerTimestamp"
          },
          "_links": {
            "type": "array",
            "description": "The links related to a resource",
            "readOnly": true,
            "minItems": 3,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/RuleSetHistoryLink"
                },
                {
                  "$ref": "#/components/schemas/RuleSetVersionLink"
                }
              ]
            }
          }
        }
      },
      "RuleSetVersion": {
        "type": "object",
        "description": "Version of rules",
        "readOnly": true,
        "properties": {
          "version": {
            "type": "integer"
          },
          "binds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bind"
            }
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "createdTime": {
            "$ref": "#/components/schemas/ServerTimestamp"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "query": {
            "type": "object",
            "description": "The URI parameters",
            "additionalProperties": {
              "type": "string",
              "example": {
                "param1": "value1",
                "param2": "value2"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "credentialHash": {
            "type": "string",
            "description": "Webhook Credential identifier string."
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeader"
            }
          }
        },
        "required": [
          "method",
          "url"
        ]
      },
      "WebhookHeader": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/OnOff"
          },
          "value": {
            "type": "string",
            "example": {
              "Header1": "value1",
              "Header2": "value2;value3"
            }
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "BillingScheduleInstruction": {
        "type": "object",
        "description": "The calculation instruction of billing time.\nThis is used in conjunction with the **service period anchor** to calculate the time the invoice is issued.\n",
        "discriminator": {
          "propertyName": "method"
        },
        "default": {
          "method": "immediately"
        },
        "required": [
          "method"
        ],
        "properties": {
          "method": {
            "type": "string",
            "default": "immediately",
            "enum": [
              "immediately",
              "date-interval"
            ]
          }
        }
      },
      "CommonScheduleInstruction": {
        "type": "object",
        "description": "The calculation instruction of scheduled time",
        "discriminator": {
          "propertyName": "method"
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "auto",
              "intelligent",
              "immediately",
              "date-interval",
              "day-of-month",
              "day-of-week"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "CustomEventScheduleInstruction": {
        "type": "object",
        "description": "The calculation instruction of scheduled time",
        "discriminator": {
          "propertyName": "method"
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "date-interval",
              "day-of-month",
              "day-of-week"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "InvoiceRetryScheduleInstruction": {
        "type": "object",
        "description": "The calculation instruction of scheduled time",
        "discriminator": {
          "propertyName": "method"
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "intelligent",
              "immediately",
              "date-interval",
              "day-of-month",
              "day-of-week"
            ]
          }
        },
        "required": [
          "method"
        ]
      },
      "auto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          }
        ]
      },
      "date-interval": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/BillingScheduleInstruction"
          },
          {
            "type": "object",
            "properties": {
              "duration": {
                "type": "integer",
                "description": "The number of the units",
                "minimum": 1
              },
              "unit": {
                "allOf": [
                  {
                    "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/date-time/time-unit.json"
                  },
                  {
                    "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/date-time/time-plural-unit.json"
                  }
                ]
              }
            },
            "required": [
              "duration",
              "unit"
            ]
          }
        ]
      },
      "day-of-month": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
          },
          {
            "type": "object",
            "properties": {
              "day": {
                "type": "integer",
                "minimum": 1,
                "maximum": 31,
                "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n"
              },
              "time": {
                "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/date-time/extended-time-iso8601.json"
              }
            },
            "required": [
              "day"
            ]
          }
        ]
      },
      "day-of-week": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
          },
          {
            "type": "object",
            "properties": {
              "day": {
                "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/date-time/long-day-of-week.json"
              },
              "week": {
                "type": "string",
                "default": "next",
                "enum": [
                  "next",
                  "first-in-month",
                  "last-in-month"
                ]
              },
              "time": {
                "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/date-time/extended-time-iso8601.json"
              }
            },
            "required": [
              "day"
            ]
          }
        ]
      },
      "immediately": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/BillingScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
          }
        ]
      },
      "intelligent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "type": "object",
            "properties": {
              "duration": {
                "type": "integer",
                "description": "The number of the units",
                "minimum": 1
              },
              "unit": {
                "allOf": [
                  {
                    "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/date-time/time-unit.json"
                  },
                  {
                    "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/date-time/time-plural-unit.json"
                  }
                ]
              }
            },
            "required": [
              "duration",
              "unit"
            ]
          }
        ]
      },
      "ServicePeriodAnchorInstruction": {
        "type": "object",
        "description": "Instruction for calculating the service period anchor.\nThis is used in conjunction with the **subscription start** to calculate the time the service period starts and ends.\n",
        "discriminator": {
          "propertyName": "method"
        },
        "default": {
          "method": "immediately"
        },
        "required": [
          "method"
        ],
        "properties": {
          "method": {
            "type": "string",
            "default": "immediately",
            "enum": [
              "immediately",
              "day-of-month",
              "day-of-week"
            ]
          }
        }
      },
      "PatchSegment": {
        "type": "object",
        "required": [
          "isVisible"
        ],
        "properties": {
          "isVisible": {
            "description": "Toggle whether this Segment is visible to the current user",
            "type": "boolean"
          }
        }
      },
      "Segment": {
        "type": "object",
        "required": [
          "data",
          "owner",
          "scope"
        ],
        "properties": {
          "id": {
            "description": "ID of current Segment",
            "readOnly": true,
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "owner": {
            "description": "Owner (creator) of Segment",
            "readOnly": true,
            "type": "object",
            "properties": {
              "id": {
                "description": "User ID",
                "type": "string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "name": {
                "description": "First and last name",
                "type": "string"
              }
            }
          },
          "data": {
            "description": "An object containing schema to set up the UI for the segment. This schema is built\nand consumed by the frontend. It includes such information as Segment name, UI settings, etc.\n",
            "type": "object"
          },
          "isVisible": {
            "description": "Toggle whether this Segment is visible to the current user",
            "type": "boolean",
            "readOnly": true
          },
          "userIds": {
            "type": "array",
            "uniqueItems": true,
            "writeOnly": true,
            "description": "A list of user id's with whom to share, used if scope is set to `shared`\n",
            "items": {
              "description": "User ID",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          },
          "users": {
            "type": "array",
            "uniqueItems": true,
            "description": "A list of user's id and first and last names with whom this Segment\nis shared\n",
            "readOnly": true,
            "items": {
              "type": "object",
              "description": "User person",
              "properties": {
                "id": {
                  "description": "User ID",
                  "type": "string",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                },
                "name": {
                  "description": "First and last name",
                  "type": "string"
                }
              }
            }
          },
          "scope": {
            "description": "If `private`, then only the owner/creator can view this Segment. If set\nto `public`, then it's shared with anyone in the owner's organization.\nIf set to `shared`, then it is only shared with specific users as specified\nin the `userIds` field\n",
            "type": "string",
            "enum": [
              "private",
              "public",
              "shared"
            ]
          }
        }
      },
      "SendGridCredential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "The SendGrid api key",
            "example": "SO.WFbRlSWUQJSb40eny4RuZQ.7liHLZ4l1jaPCgbu02b-aGH-bo4RB8z9fK3aUd1heeL"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        },
        "description": "SendGrid Credential",
        "required": [
          "apiKey"
        ]
      },
      "ServerTimestamp": {
        "type": "string",
        "description": "Read-only timestamp, automatically assigned on back-end.",
        "format": "date-time",
        "readOnly": true
      },
      "SESCredential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "key": {
            "type": "string",
            "description": "The AWS access key ID",
            "example": "BWITYO4UARGDLMFY6UDP"
          },
          "secret": {
            "type": "string",
            "description": "The AWS secret access key",
            "example": "8D34yYHOK9+yM7pDnNUO3UTO/5b8Wy/PGNyzTRmG"
          },
          "region": {
            "type": "string",
            "description": "The AWS region name",
            "example": "us-west-2"
          },
          "configurationSetName": {
            "type": "string",
            "description": "The configuration set name which will be used durring email sending",
            "example": "SpecialConfigurationSet"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        },
        "description": "Amazon simple email service (AWS SES) credential",
        "required": [
          "key",
          "secret",
          "region"
        ]
      },
      "Session": {
        "type": "object",
        "required": [
          "permissions"
        ],
        "properties": {
          "id": {
            "description": "The session identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "token": {
            "description": "The session's token used for authentication",
            "type": "string"
          },
          "permissions": {
            "description": "The session's permissions. See the format in example",
            "allOf": [
              {
                "$ref": "#/components/schemas/AclPermissions"
              }
            ]
          },
          "userId": {
            "description": "The user identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "createdTime": {
            "description": "Session created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Session updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expiredTime": {
            "description": "Session expired time. Defaults to one hour",
            "type": "string",
            "format": "date-time"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Signin": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "description": "Email",
            "type": "string",
            "example": "email@example.com"
          },
          "password": {
            "description": "Password",
            "type": "string",
            "format": "password"
          },
          "oneTimePassword": {
            "description": "One time password for 2 factor authentication. Should contain digits only.",
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "example": "123456"
          },
          "expiredTime": {
            "description": "Session expired time. Defaults to one hour",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Signup": {
        "type": "object",
        "required": [
          "email",
          "company",
          "firstName",
          "lastName",
          "businessPhone",
          "password",
          "website"
        ],
        "properties": {
          "email": {
            "description": "The user email",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "company": {
            "description": "The user company name",
            "type": "string"
          },
          "firstName": {
            "description": "The user first name",
            "type": "string"
          },
          "lastName": {
            "description": "The user last name",
            "type": "string"
          },
          "businessPhone": {
            "description": "The user business phone number",
            "type": "string"
          },
          "password": {
            "description": "The user password",
            "type": "string",
            "format": "password"
          },
          "website": {
            "description": "The user website address",
            "type": "string"
          },
          "country": {
            "description": "The user country (ISO Alpha-2 code)",
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "default": "US"
          },
          "reportingCurrency": {
            "description": "The currency to be set only once which will be used for conversion in reports",
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "default": "USD"
          }
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The API status. If everything is ok - value is 'ok'",
            "type": "string",
            "readOnly": true,
            "enum": [
              "ok"
            ]
          },
          "time": {
            "description": "Current time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          }
        }
      },
      "redemption-cancel": {
        "description": "Cancel Redemption",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineAction"
          },
          {
            "type": "object",
            "properties": {
              "redemptionId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "resend-email": {
        "description": "Resend Email action",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineAction"
          },
          {
            "type": "object",
            "properties": {
              "messageId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "GatewayAccountTimeline": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The Timeline message identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Timeline message type",
            "type": "string",
            "readOnly": true,
            "enum": [
              "gateway-account-created",
              "gateway-account-changed",
              "gateway-account-enabled",
              "gateway-account-disabled",
              "gateway-account-down",
              "gateway-account-up",
              "gateway-account-closed"
            ]
          },
          "triggeredBy": {
            "description": "Shows who or what triggered the Timeline message",
            "type": "string",
            "readOnly": true,
            "enum": [
              "rebilly",
              "app",
              "direct-api"
            ]
          },
          "message": {
            "description": "The message that describes the message details",
            "type": "string"
          },
          "extraData": {
            "$ref": "#/components/schemas/TimelineExtraData"
          },
          "occurredTime": {
            "description": "Timeline message time",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "three-columns": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineTable"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "description": "Table data. Each array element represents a table row",
                "items": {
                  "type": "object",
                  "properties": {
                    "attribute": {
                      "type": "string"
                    },
                    "previousValue": {
                      "type": "string"
                    },
                    "newValue": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "attribute": "Descriptor",
                    "previousValue": "test.com",
                    "newValue": "new-test.com"
                  }
                }
              }
            }
          }
        ]
      },
      "TimelineAction": {
        "type": "object",
        "discriminator": {
          "propertyName": "action"
        },
        "readOnly": true,
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "resend-email",
              "redemption-cancel"
            ]
          }
        }
      },
      "TimelineExtraData": {
        "type": "object",
        "description": "Additional data",
        "readOnly": true,
        "properties": {
          "actions": {
            "description": "Actions available to a Timeline message. Can be empty in case no actions are available for a message",
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/TimelineAction"
            }
          },
          "tables": {
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/TimelineTable"
            }
          },
          "author": {
            "type": "object",
            "description": "Timeline comment author data",
            "properties": {
              "userFullName": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              }
            }
          },
          "mentions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": {
                "@test@mail.com": "userId-1"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "resourceType": {
                  "type": "string",
                  "enum": [
                    "kyc-document",
                    "invoice",
                    "subscription",
                    "transaction",
                    "email-message",
                    "dispute"
                  ]
                },
                "resourceId": {
                  "$ref": "#/components/schemas/ResourceId"
                },
                "placeholder": {
                  "type": "string",
                  "example": "KYC Document"
                }
              }
            }
          }
        }
      },
      "TimelineTable": {
        "type": "object",
        "description": "Additional information about Timeline message",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "two-columns",
              "three-columns"
            ]
          },
          "title": {
            "type": "string",
            "description": "Data table title"
          },
          "footer": {
            "type": "string",
            "description": "Data table footer"
          }
        }
      },
      "two-columns": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineTable"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "description": "Table data. Each array element represents a table row",
                "items": {
                  "type": "object",
                  "properties": {
                    "attribute": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "attribute": "Who",
                    "value": "John Doe"
                  }
                }
              }
            }
          }
        ]
      },
      "ApiTracking": {
        "type": "object",
        "description": "Tracking API Requests.",
        "readOnly": true,
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "type": "integer",
            "description": "HTTP response code"
          },
          "url": {
            "type": "string",
            "description": "API request address"
          },
          "route": {
            "type": "string",
            "description": "API request route",
            "example": "/v2.1/customers/{param}"
          },
          "method": {
            "type": "string",
            "description": "HTTP method",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          },
          "request": {
            "type": "string",
            "description": "Request JSON-string"
          },
          "response": {
            "type": "string",
            "description": "Response JSON-string"
          },
          "requestHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "User-Agent": "Mozilla/5.0",
              "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            }
          },
          "responseHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "Rate-Limit-Limit": 5000,
              "Rate-Limit-Remaining": 4999,
              "Rate-Limit-Reset": "Mon, 31 Jul 2017 04:16:00 +0000"
            }
          },
          "user": {
            "type": "object",
            "description": "The user who has made a request",
            "readOnly": true,
            "properties": {
              "userId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "apiKeyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "email": {
                "description": "The user email",
                "type": "string",
                "format": "email"
              },
              "firstName": {
                "description": "The user first name",
                "type": "string"
              },
              "lastName": {
                "description": "The user last name",
                "type": "string"
              },
              "ipAddress": {
                "type": "string",
                "description": "Client IP address",
                "format": "ipv4"
              },
              "userAgent": {
                "description": "The software that is acting on behalf of a user",
                "type": "string"
              },
              "fingerprint": {
                "description": "The user device fingerprint hash",
                "type": "string"
              },
              "isSupport": {
                "description": "If user from support",
                "type": "boolean"
              }
            }
          },
          "relatedIds": {
            "type": "object",
            "description": "The IDs of related resources",
            "readOnly": true,
            "properties": {
              "customerId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "transactionId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "tokenId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "Request duration in milliseconds"
          },
          "createdTime": {
            "description": "The log created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "SubscriptionTracking": {
        "type": "object",
        "description": "Tracking subscription log",
        "readOnly": true,
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "subscriptionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "invoiceItemId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "result": {
            "type": "string",
            "description": "Subscription's result",
            "enum": [
              "created",
              "postponed",
              "stopped",
              "error"
            ]
          },
          "message": {
            "type": "string",
            "description": "It contains the transaction number and renewal time"
          },
          "createdTime": {
            "description": "The log created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "WebhookTracking": {
        "type": "object",
        "description": "Webhook Tracking Requests.",
        "readOnly": true,
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "url": {
            "type": "string",
            "description": "Url where webhook was sent"
          },
          "method": {
            "type": "string",
            "description": "HTTP method which was used to send webhook",
            "example": "POST"
          },
          "headers": {
            "type": "object",
            "description": "HTTP headers which were used to send webhook",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "My-Header": "Cool-Value"
            }
          },
          "responseCode": {
            "type": "integer",
            "description": "HTTP code response"
          },
          "responseBody": {
            "type": "string",
            "description": "Response body received"
          },
          "payload": {
            "type": "string",
            "description": "Webhook's payload"
          },
          "source": {
            "type": "string",
            "description": "The Webhook's source",
            "enum": [
              "webhooks",
              "rules"
            ]
          },
          "attempt": {
            "type": "integer",
            "description": "The Webhook's attempt number"
          },
          "sentTime": {
            "description": "Sent time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "initiatedTime": {
            "description": "Initiated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "createdTime": {
            "description": "The log created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "UpdatePassword": {
        "type": "object",
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "properties": {
          "currentPassword": {
            "description": "Current user's password - used when requesting password change",
            "type": "string",
            "format": "password"
          },
          "newPassword": {
            "description": "New user's password - used when requesting password change",
            "type": "string",
            "format": "password"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "email",
          "firstName",
          "lastName"
        ],
        "properties": {
          "id": {
            "description": "The user identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "email": {
            "description": "The user email",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "firstName": {
            "description": "User's first name",
            "type": "string"
          },
          "lastName": {
            "description": "User's last name",
            "type": "string"
          },
          "businessPhone": {
            "description": "The user business phone number",
            "type": "string"
          },
          "mobilePhone": {
            "description": "The user mobile phone number",
            "type": "string"
          },
          "password": {
            "description": "User's password. If not provided, password reset email will be sent",
            "type": "string",
            "format": "password"
          },
          "permissions": {
            "description": "The user's permissions. See the format in example",
            "allOf": [
              {
                "$ref": "#/components/schemas/AclPermissions"
              }
            ]
          },
          "createdTime": {
            "description": "The user created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The user updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "loginTime": {
            "description": "The user last login time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "reportingCurrency": {
            "description": "The user's ISO Alpha-3 code used for reports",
            "readOnly": true,
            "type": "string"
          },
          "availableCurrencies": {
            "type": "array",
            "description": "An array of reporting currencies enabled for the merchant",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "totpRequired": {
            "description": "The user setting of two-factor authentification",
            "type": "boolean"
          },
          "totpSecret": {
            "description": "The user TOTP key for authentification app (if TOTP enabled)",
            "type": "string"
          },
          "totpUrl": {
            "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
            "type": "string",
            "format": "url"
          },
          "status": {
            "description": "The user status",
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "pending-confirmation"
            ],
            "readOnly": true
          },
          "country": {
            "description": "The user country setting - two letter code",
            "type": "string"
          },
          "preferences": {
            "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
            "type": "object"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "WebhookAuthorization": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "none": "#/components/schemas/WebhookAuthorizationNone"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "description": "The authorization type",
            "enum": [
              "none",
              "basic",
              "digest",
              "oauth1"
            ],
            "default": "none"
          }
        },
        "required": [
          "type"
        ]
      },
      "basic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookAuthorization"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string",
                "format": "password"
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        ]
      },
      "digest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookAuthorization"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string",
                "format": "password"
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        ]
      },
      "oauth1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookAuthorization"
          },
          {
            "type": "object",
            "properties": {
              "consumerKey": {
                "type": "string"
              },
              "consumerSecret": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "tokenSecret": {
                "type": "string"
              }
            },
            "required": [
              "consumerKey",
              "consumerSecret",
              "token",
              "tokenSecret"
            ]
          }
        ]
      },
      "WebhookAuthorizationNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookAuthorization"
          }
        ]
      },
      "WebhookCredential": {
        "type": "object",
        "properties": {
          "hash": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "status": {
            "description": "The credential status",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "deactivationTime": {
            "description": "The time when the credential was deactivated",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "host": {
            "type": "string",
            "description": "The host name"
          },
          "auth": {
            "$ref": "#/components/schemas/WebhookAuthorization"
          }
        },
        "description": "Webhook credential",
        "required": [
          "host"
        ]
      },
      "Website": {
        "type": "object",
        "required": [
          "organizationId",
          "name",
          "url",
          "servicePhone",
          "serviceEmail"
        ],
        "properties": {
          "id": {
            "description": "The website identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "organizationId": {
            "description": "Organization ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "The website's name",
            "type": "string"
          },
          "url": {
            "description": "The website's domain address",
            "type": "string"
          },
          "servicePhone": {
            "description": "The website's customer service phone number",
            "type": "string"
          },
          "serviceEmail": {
            "description": "The website's customer service email address",
            "type": "string",
            "format": "email"
          },
          "createdTime": {
            "description": "Website created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Website updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/NotesLink"
                },
                {
                  "$ref": "#/components/schemas/OrganizationLink"
                }
              ]
            }
          }
        }
      }
    },
    "responses": {
      "AccessForbidden": {
        "description": "Access forbidden, invalid API-KEY was used",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Found": {
        "description": "Resource was moved",
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "InvalidDataError": {
        "description": "Invalid data was sent",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InvalidError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "SeeOther": {
        "description": "See other",
        "headers": {
          "Location": {
            "description": "The location of the related resource",
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          "Rate-Limit-Limit": {
            "description": "The number of allowed requests in the current period",
            "schema": {
              "type": "integer"
            }
          },
          "Rate-Limit-Remaining": {
            "description": "The number of remaining requests in the current period",
            "schema": {
              "type": "integer"
            }
          },
          "Rate-Limit-Reset": {
            "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1) when the current period will reset\n",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "parameters": {
      "collectionExpand": {
        "name": "expand",
        "in": "query",
        "description": "Expand response to get full related object instead of ID. See the expand guide for more info.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFields": {
        "name": "fields",
        "in": "query",
        "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFilter": {
        "name": "filter",
        "in": "query",
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
        "schema": {
          "type": "string"
        }
      },
      "collectionLimit": {
        "name": "limit",
        "in": "query",
        "description": "The collection items limit",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1000
        }
      },
      "collectionOffset": {
        "name": "offset",
        "in": "query",
        "description": "The collection items offset",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "collectionQuery": {
        "name": "q",
        "in": "query",
        "description": "The partial search of the text fields.",
        "schema": {
          "type": "string"
        }
      },
      "collectionSort": {
        "name": "sort",
        "in": "query",
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "hash": {
        "name": "hash",
        "in": "path",
        "description": "The token identifier string",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "integrationLabel": {
        "name": "label",
        "in": "path",
        "description": "The integration label",
        "required": true,
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/OAuth2CredentialService"
            }
          ]
        }
      },
      "mediaType": {
        "name": "Accept",
        "in": "header",
        "description": "The response media type",
        "schema": {
          "type": "string",
          "enum": [
            "application/json",
            "text/csv",
            "application/pdf"
          ],
          "default": "application/json"
        }
      },
      "resourceId": {
        "name": "id",
        "in": "path",
        "description": "The resource identifier string",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 50,
          "pattern": "^[@~\\-\\.\\w\\d]+$"
        }
      },
      "rulesVersion": {
        "name": "version",
        "in": "path",
        "required": true,
        "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "systemEventType": {
        "name": "eventType",
        "in": "path",
        "description": "The event type",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "Pagination-Limit": {
        "description": "Items per page limit",
        "schema": {
          "type": "integer"
        }
      },
      "Pagination-Offset": {
        "description": "Pagination offset",
        "schema": {
          "type": "integer"
        }
      },
      "Pagination-Total": {
        "description": "Total items count",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Limit": {
        "description": "The number of allowed requests in the current period",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Remaining": {
        "description": "The number of remaining requests in the current period",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Reset": {
        "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "ApiKey": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiKey"
            }
          }
        },
        "description": "ApiKey resource",
        "required": true
      },
      "CheckoutPage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckoutPage"
            }
          }
        },
        "description": "Checkout Page resource",
        "required": true
      },
      "CustomEvent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomEvent"
            }
          }
        },
        "description": "Custom event resource",
        "required": true
      },
      "GatewayAccount": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GatewayAccount"
            }
          }
        },
        "description": "Gateway Account resource",
        "required": true
      },
      "GatewayAccountDowntimeSchedule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GatewayAccountDowntimeSchedule"
            }
          }
        },
        "description": "Gateway Account downtime schedule resource",
        "required": true
      },
      "GlobalWebhook": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GlobalWebhook"
            }
          }
        },
        "description": "Webhook resource",
        "required": true
      },
      "Layout": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Layout"
            }
          }
        },
        "description": "Layout resource",
        "required": true
      },
      "List": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/List"
            }
          }
        },
        "description": "List resource",
        "required": true
      },
      "Note": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Note"
            }
          }
        },
        "description": "Note resource",
        "required": true
      },
      "OAuth2Credential": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OAuth2Credential"
            }
          }
        },
        "description": "OAuth2 credential resource",
        "required": true
      },
      "Organization": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        },
        "description": "Organization resource",
        "required": true
      },
      "RuleSet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RuleSet"
            }
          }
        },
        "description": "Set of rules resource",
        "required": true
      },
      "Segment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Segment"
            }
          }
        },
        "description": "Segment resource",
        "required": true
      },
      "UpdatePassword": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdatePassword"
            }
          }
        },
        "description": "currentPassword and newPassword",
        "required": true
      },
      "User": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "User resource",
        "required": true
      },
      "Website": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Website"
            }
          }
        },
        "description": "Website resource",
        "required": true
      }
    },
    "securitySchemes": {
      "JWT": {
        "description": "You can create a JSON Web Token (JWT) via our [JWT Session resource](https://rebilly.github.io/RebillyUserAPI/#tag/JWT-Session/paths/~1signin/post).\nUsage format: `Bearer <JWT>`\n",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "PublishableApiKey": {
        "description": "Only for the Tokens resource.\nYou can create a Publishable API Key via our [API Keys resource](https://rebilly.github.io/RebillyUserAPI/#tag/API-Keys), by specifying the type as `publishable`.\n",
        "name": "Authorization",
        "type": "apiKey",
        "in": "header"
      },
      "SecretApiKey": {
        "description": "When you sign up for an account, you are given your first secret API key.\nTo do so please [follow this link.](https://app.rebilly.com/signup)\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). All API keys can be restricted to a\nsmall set of permissions (restricted API keys).\n",
        "name": "REB-APIKEY",
        "type": "apiKey",
        "in": "header"
      }
    }
  }
}
