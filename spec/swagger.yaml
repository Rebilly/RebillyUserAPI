################################################################################
swagger: "2.0"
info:
  version: "2.1"
  title: "Rebilly User API"
  contact:
    name: "Rebilly API Support"
    url: "https://www.rebilly.com/contact/"
    email: "integrations@rebilly.com"
  license:
    name: "Rebilly"
    url: "https://www.rebilly.com/api-license/"
  termsOfService: "https://www.rebilly.com/terms/"
  x-logo:
    url: 'https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg'
    backgroundColor: '#0033A0'
  description: |
    # Introduction
    This document covers APIs mostly intended for consumption by Rebilly's
    Frontend GUI [app](https://app.rebilly.com).  However, any client is welcome
    to use these APIs.  Our main API docs can be [found here](https://rebilly.github.io/RebillyAPI/).

    The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
    resource URLs.  It returns HTTP response codes to indicate errors.  It also
    accepts and returns JSON in the HTTP body.  You can use your favorite
    HTTP/REST library for your programming language to use Rebilly's API, or
    you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
    or [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).

    # Authentication
    When you sign up for an account, you are given your first API key.
    You can generate additional API keys, and delete API keys (as you may
    need to rotate your keys in the future). You authenticate to the
    Rebilly API by providing your secret key in the request header.

    Rebilly offers four forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.
    - [Secret API key](#section/Authentication/SecretApiKey): used for requests made from the server side. Never share these keys. Keep them guarded and secure
    - [Publishable API key](#section/Authentication/PublishableApiKey): used for requests from the client side. For now can only be used on the [Tokens resource](https://rebilly.github.io/RebillyAPI/#tag/Payment-Tokens%2Fpaths%2F~1tokens%2Fpost)
    - [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time
    - [Public signature key](#section/Authentication/PublicSignatureKey): (deprecated) used for requests from the client side. For now can only be used on the [Tokens resource](https://rebilly.github.io/RebillyAPI/#tag/Payment-Tokens%2Fpaths%2F~1tokens%2Fpost)

    Never share your secret keys. Keep them guarded and secure.

    <!-- ReDoc-Inject: <security-definitions> -->

    # PHP SDK
    For all PHP SDK examples provided in this spec you will need to configure `$client`.
    You may do it like this:

    ```php
    $client = new Rebilly\Client([
        'apiKey' => 'YourApiKeyHere',
        'baseUrl' => 'https://api.rebilly.com',
    ]);
    ```
################################################################################
host: "api.rebilly.com"
basePath: "/v2.1"
schemes:
  - "https"
x-servers:
  - url: //api.rebilly.com/v2.1
    description: Live Server
  - url: //api-sandbox.rebilly.com/v2.1
    description: Sandbox Server
produces:
  - "application/json"
consumes:
  - "application/json"
################################################################################
tags:
  - name: API Keys
    description: |
      Always keep your API Keys private.  In addition to your API Keys, you may use
      JSON Web Tokens (JWT) to authenticate to the API.  See
      our [Sessions](#tag/Sessions) resource for more information.
  - name: Checkout Pages
    description: |
      Hosted checkout pages.
  - name: Custom Rules
    description: |
      If system events can't solve your problems, you are able to create a custom event
      that can fit your requirements, and use it to solve your own business logic.

      "Don't conform to the rules. Create the rules."
      Rather than adapt your workflow and business, Rebilly can align with your business
      objectives by giving you the power to automate certain behaviors when key events happen.
      You can use this to your advantage to mitigate risk, maximize conversions and minimize costs.
      You have the controls at your fingertips here. If you need more control,
      or help dialing in on a strategy, feel free to contact us.

      When an event happens, it triggers the evaluation of conditions (that you set up),
      in order from top to bottom. If the condition is met, the corresponding actions are executed.
      The conditions continue to be checked until either all of the conditions have been executed,
      or a special "stop" action is executed.
  - name: Credential Hashes
    description: |
      Get and create SMTP and Webhook credential hashes.
  - name: Email Credentials
    description: |
      Send automated emails through our system by connecting to your third party
      SMTP server (or your third party email service provider's SMTP server).
  - name: Gateway Accounts
    description: |
      Gateway accounts connect payment request to third party networks and platforms.
  - name: Layouts
    description: |
      Layouts are used to hold collections of plans. A layout can be used to
      power a pricing page. You can make multiple layouts, and use rules to
      target them to different audiences.
  - name: Lists
    description: |
      Lists contain sets of values and may be referenced within Rules criteria.

      You may grant permissions to edit Lists to different people than those who can edit Rules.
      It may be useful if your workflow involves frequent updates to value sets used in criteria.
  - name: Migrate payment cards
    description: |
      Migrate payment cards from one gateway to another.
  - name: Notes
    description: |
      Leave notes on a customer record to have a handy location to share with
      others who may interface with the customer.  It's great for customer service.
  - name: Organizations
    description: |
      Organizations include the name and address of the entities related to your
      account. An account may be multi-national, and support multiple
      organizations. Note: Organizations are share between "Live" and "Sandbox"
  - name: Reports
    description: |
      The Rebilly Reporting API is currently experimental.  You may see
      the [Reports API Documentation here](https://rebilly.github.io/RebillyReportsAPI/).
  - name: Rules
    description: |
      "Don't conform to the rules. Create the rules."
      Rather than adapt your workflow and business, Rebilly can align with your business
      objectives by giving you the power to automate certain behaviors when key events happen.
      You can use this to your advantage to mitigate risk, maximize conversions and minimize costs.
      You have the controls at your fingertips here. If you need more control,
      or help dialing in on a strategy, feel free to contact us.

      When an event happens, it triggers the evaluation of conditions (that you set up),
      in order from top to bottom. If the condition is met, the corresponding actions are executed.
      The conditions continue to be checked until either all of the conditions have been executed,
      or a special "stop" action is executed.
  - name: Sessions
    description: |
      A session contains a token, which is a JSON Web Token.  The token is created
      with a user's signin credentials.

      This token can be used to authenticate to the API.  In addition, the session can be set to
      expire at a particular time, and has very granular control over permissions.
      Use the token to then authenticate for further requests to the Rebilly API.

      The token should be kept private, but could be stored on the user's browser
      client to simulate a "session."
  - name: Status
    description: |
      Check the status of the Rebilly API (no authentication required).
  - name: Taxes
    description: |
      Proposed: You can map a product to a tax category.  The tax category is used by
      tax providers to calculate taxes for invoices.
  - name: Tracking
    description: |
      Tracking is a layer for accessing all the activity (API requests,
      subscriptions, webhooks, events, etc.), thus providing easier
      debugging and issues auditing.
  - name: Users
    description: |
      A User represents a person who can login to Rebilly, and take actions subject to
      their granted permissions.
  - name: Websites
    description: |
      A Website represents the website/brand that customers interact with... You
      could think of it like a brand.  For example, Nestle owns Perrier and Purina
      and PowerBar.

      We recognize that some enterprises have more than one website (or brand).  The
      website is related to each invoice and each payment gateway account.  This feature
      would allow you to have gateway accounts that are related to multiple websites, or
      exclusive to particular websites.  And gives you more control over your business.
  - name: Webhooks
    description: |
      Webhooks are designed to notify your systems when certain/all registered events happen in near real-time.
      They allow you to collect information about those events. Rebilly can send these information via
      POST to an URL of your choice.
################################################################################
securityDefinitions:
  SecretApiKey:
    description: |
      When you sign up for an account, you are given your first secret API key.
      To do so please [follow this link.](https://app.rebilly.com/signup)
      Also you can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future).
    name: "REB-APIKEY: sk_live_xxxx"
    type: apiKey
    in: header
  PublishableApiKey:
    description: |
      Only for the Tokens resource.
      You can create a Publishable API Key via our Sessions resource, by specifying the type as `publishable`.
    name: "Authorization: Bearer pk_live_xxxx"
    type: apiKey
    in: header
  JWT:
    description: |
      You can create a JSON Web Token (JWT) via our [Sessions resource](https://rebilly.github.io/RebillyUserAPI/#tag/Sessions%2Fpaths%2F~1signin%2Fpost).
    name: "Authorization: Bearer jwt"
    type: apiKey
    in: header
  PublicSignatureKey:
    description: |
      (deprecated) Please use [PublishableApiKey](#section/Authentication/PublishableApiKey).

      This authentication scheme can be used on the client-side. It uses an apiUser and HMAC-SHA1 signature
      (only for the Tokens resource), so that you may safely create tokens from the client-side without compromising
      your secret keys.

      Only for the Tokens resource.
      The REB-AUTH value is created in this way:
      - Generate a Nonce (random string), and a Timestamp (unix timestamp)
      - Concatenate the values of ApiUser, Nonce, and Timestamp (in that order).
      - Use that value as the input data when you calculate the <a href="http://tools.ietf.org/html/rfc2104">HMAC-SHA1</a>
      with your secret key on the server side, called the signature. **Never expose your secret API key**, even in minified JS applications.
      - Forming the four data points into a JSON object.

      ```json
      {
        "REB-APIUSER": "abcdefg",
        "REB-NONCE": "adfsjtreitou345fgkdafgj",
        "REB-TIMESTAMP": "1382591345",
        "REB-SIGNATURE": "a234fc95460401cfg09c9d09"
      }
      ```

      Then base64 encode that JSON object. This is the final value of the REB-AUTH HTTP header
    name: "REB-AUTH"
    type: apiKey
    in: header
################################################################################
security:
  - SecretApiKey: []
################################################################################
responses:
  AccessForbidden:
    description: "Access forbidden, invalid API-KEY was used"
    schema:
      $ref: "#/definitions/Error"
  NotFound:
    description: "Resource was not found"
    schema:
      $ref: "#/definitions/Error"
  Found:
    description: "Resource was moved"
    headers:
      Location:
        type: "string"
  Conflict:
    description: "Conflict"
    schema:
      $ref: "#/definitions/Error"
  InvalidDataError:
    description: "Invalid data was sent"
    schema:
      $ref: "#/definitions/InvalidError"
################################################################################
parameters:
  resourceId:
    name: id
    in: path
    description: The resource identifier string
    type: string
    required: true
  collectionLimit:
    name: limit
    in: query
    description: The collection items limit
    type: integer
    minimum: 0
    maximum: 1000
  collectionOffset:
    name: offset
    in: query
    description: The collection items offset
    type: integer
    minimum: 0
  collectionFilter:
    name: filter
    in: query
    type: string
    description: |
      The collection items filter requires a special format.
      Use "," for multiple allowed values.  Use ";" for multiple fields.
      See the filter guide for more options and examples about this format.
  collectionQuery:
    name: q
    in: query
    type: string
    description: The partial search of the text fields.
  collectionCriteria:
    name: criteria
    in: query
    type: string
    description: The json criteria for collection
  collectionSort:
    name: sort
    in: query
    type: array
    collectionFormat: csv
    description: The collection items sort field and order (prefix with "-" for descending sort).
    items:
      type: string
  collectionFields:
    name: fields
    in: query
    type: string
    description: Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.
  collectionExpand:
    name: expand
    in: query
    type: string
    description: Expand response to get full related object intead of ID.  See the expand guide for more info.
  systemEventType:
    name: eventType
    in: path
    description: The event type
    type: string
    required: true
  rulesVersion:
    name: version
    in: path
    type: integer
    required: true
    minimum: 1
    description: The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.
  hash:
    name: hash
    in: path
    description: The token identifier string
    type: string
    required: true
  mediaType:
    name: Accept
    in: header
    type: string
    enum:
      - application/json
    default: application/json
    description: The response media type
################################################################################
headers:
  Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    type: integer
  Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    type: integer
  Rate-Limit-Reset:
    description: |
      The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
      when the current period will reset
    type: string
  Pagination-Total:
    description: Total items count
    type: integer
  Pagination-Limit:
    description: Items per page limit
    type: integer
  Pagination-Offset:
    description: Pagination offset
    type: integer
